GAS LISTING /tmp/ccSX9sHX.s 			page 1


   1              		.file	"riscv.cpp"
   2              		.option pic
   3              		.option norelax
   4              		.text
   5              	.Ltext0:
   6              		.align	2
   7              		.globl	_ZN5Riscv10popSppSpieEv
   9              	_ZN5Riscv10popSppSpieEv:
  10              	.LFB35:
  11              		.file 1 "src/riscv.cpp"
   1:src/riscv.cpp **** //
   2:src/riscv.cpp **** // Created by marko on 20.4.22..
   3:src/riscv.cpp **** //
   4:src/riscv.cpp **** 
   5:src/riscv.cpp **** #include "../h/riscv.hpp"
   6:src/riscv.cpp **** #include "../h/tcb.hpp"
   7:src/riscv.cpp **** #include "../lib/console.h"
   8:src/riscv.cpp **** #include "../test/printing.hpp"
   9:src/riscv.cpp **** #include "../h/syscall_c.h"
  10:src/riscv.cpp **** #include "../h/my_mem.h"
  11:src/riscv.cpp **** #include "../h/sem.hpp"
  12:src/riscv.cpp **** 
  13:src/riscv.cpp **** using Body = void (*)(void*);
  14:src/riscv.cpp **** 
  15:src/riscv.cpp **** void Riscv::popSppSpie()
  16:src/riscv.cpp **** {
  12              		.loc 1 16 1
  13              		.cfi_startproc
  14 0000 130101FF 		addi	sp,sp,-16
  15              		.cfi_def_cfa_offset 16
  16 0004 23348100 		sd	s0,8(sp)
  17              		.cfi_offset 8, -8
  18 0008 13040101 		addi	s0,sp,16
  19              		.cfi_def_cfa 8, 0
  17:src/riscv.cpp ****     __asm__ volatile("csrw sepc, ra");
  20              		.loc 1 17 5
  21              		.loc 1 17 38 is_stmt 0
  22              	#APP
  23              	# 17 "src/riscv.cpp" 1
  18              	    __asm__ volatile("sret");
  24              		csrw sepc, ra
  25              	# 0 "" 2
  26              		.loc 1 18 5 is_stmt 1
  27              		.loc 1 18 29 is_stmt 0
  28              	# 18 "src/riscv.cpp" 1
  19              	}
  29              		sret
  30              	# 0 "" 2
  31              		.loc 1 19 1
  32              	#NO_APP
  33 0014 03348100 		ld	s0,8(sp)
  34              		.cfi_restore 8
  35              		.cfi_def_cfa 2, 16
  36 0018 13010101 		addi	sp,sp,16
  37              		.cfi_def_cfa_offset 0
  38 001c 67800000 		jr	ra
  39              		.cfi_endproc
GAS LISTING /tmp/ccSX9sHX.s 			page 2


  40              	.LFE35:
  42              		.align	2
  43              		.globl	_ZN5Riscv20handleSupervisorTrapEv
  45              	_ZN5Riscv20handleSupervisorTrapEv:
  46              	.LFB36:
  20:src/riscv.cpp **** 
  21:src/riscv.cpp **** void Riscv::handleSupervisorTrap()
  22:src/riscv.cpp **** {
  47              		.loc 1 22 1 is_stmt 1
  48              		.cfi_startproc
  49 0020 130101F9 		addi	sp,sp,-112
  50              		.cfi_def_cfa_offset 112
  51 0024 23341106 		sd	ra,104(sp)
  52 0028 23308106 		sd	s0,96(sp)
  53 002c 233C9104 		sd	s1,88(sp)
  54 0030 23382105 		sd	s2,80(sp)
  55 0034 23343105 		sd	s3,72(sp)
  56 0038 23304105 		sd	s4,64(sp)
  57 003c 233C5103 		sd	s5,56(sp)
  58              		.cfi_offset 1, -8
  59              		.cfi_offset 8, -16
  60              		.cfi_offset 9, -24
  61              		.cfi_offset 18, -32
  62              		.cfi_offset 19, -40
  63              		.cfi_offset 20, -48
  64              		.cfi_offset 21, -56
  65 0040 13040107 		addi	s0,sp,112
  66              		.cfi_def_cfa 8, 0
  23:src/riscv.cpp ****     uint64 volatile scause = r_scause();
  67              		.loc 1 23 5
  68              	.LBB42:
  69              	.LBB43:
  70              		.file 2 "src/../h/riscv.hpp"
   1:src/../h/riscv.hpp **** //
   2:src/../h/riscv.hpp **** // Created by marko on 20.4.22..
   3:src/../h/riscv.hpp **** //
   4:src/../h/riscv.hpp **** 
   5:src/../h/riscv.hpp **** #ifndef OS1_VEZBE07_RISCV_CONTEXT_SWITCH_1_SYNCHRONOUS_RISCV_HPP
   6:src/../h/riscv.hpp **** #define OS1_VEZBE07_RISCV_CONTEXT_SWITCH_1_SYNCHRONOUS_RISCV_HPP
   7:src/../h/riscv.hpp **** 
   8:src/../h/riscv.hpp **** #include "../lib/hw.h"
   9:src/../h/riscv.hpp **** 
  10:src/../h/riscv.hpp **** 
  11:src/../h/riscv.hpp **** class Riscv
  12:src/../h/riscv.hpp **** {
  13:src/../h/riscv.hpp **** public:
  14:src/../h/riscv.hpp ****     // pop sstatus.spp and sstatus.spie bits (has to be a non inline function)
  15:src/../h/riscv.hpp ****     static void popSppSpie();
  16:src/../h/riscv.hpp **** 
  17:src/../h/riscv.hpp ****     // push x3..x31 registers onto stack
  18:src/../h/riscv.hpp ****     static void pushRegisters();
  19:src/../h/riscv.hpp **** 
  20:src/../h/riscv.hpp ****     // pop x3..x31 registers from stack
  21:src/../h/riscv.hpp ****     static void popRegisters();
  22:src/../h/riscv.hpp **** 
  23:src/../h/riscv.hpp ****     // read register scause
  24:src/../h/riscv.hpp ****     static uint64 r_scause();
GAS LISTING /tmp/ccSX9sHX.s 			page 3


  25:src/../h/riscv.hpp **** 
  26:src/../h/riscv.hpp ****     // write register scause
  27:src/../h/riscv.hpp ****     static void w_scause(uint64 scause);
  28:src/../h/riscv.hpp **** 
  29:src/../h/riscv.hpp ****     // read register sepc
  30:src/../h/riscv.hpp ****     static uint64 r_sepc();
  31:src/../h/riscv.hpp **** 
  32:src/../h/riscv.hpp ****     // write register sepc
  33:src/../h/riscv.hpp ****     static void w_sepc(uint64 sepc);
  34:src/../h/riscv.hpp **** 
  35:src/../h/riscv.hpp ****     // read register stvec
  36:src/../h/riscv.hpp ****     static uint64 r_stvec();
  37:src/../h/riscv.hpp **** 
  38:src/../h/riscv.hpp ****     // write register stvec
  39:src/../h/riscv.hpp ****     static void w_stvec(uint64 stvec);
  40:src/../h/riscv.hpp **** 
  41:src/../h/riscv.hpp ****     // read register stval
  42:src/../h/riscv.hpp ****     static uint64 r_stval();
  43:src/../h/riscv.hpp **** 
  44:src/../h/riscv.hpp ****     // write register stval
  45:src/../h/riscv.hpp ****     static void w_stval(uint64 stval);
  46:src/../h/riscv.hpp **** 
  47:src/../h/riscv.hpp ****     enum BitMaskSip
  48:src/../h/riscv.hpp ****     {
  49:src/../h/riscv.hpp ****         SIP_SSIP = (1 << 1),
  50:src/../h/riscv.hpp ****         SIP_STIP = (1 << 5),
  51:src/../h/riscv.hpp ****         SIP_SEIP = (1 << 9),
  52:src/../h/riscv.hpp ****     };
  53:src/../h/riscv.hpp **** 
  54:src/../h/riscv.hpp ****     // mask set register sip
  55:src/../h/riscv.hpp ****     static void ms_sip(uint64 mask);
  56:src/../h/riscv.hpp **** 
  57:src/../h/riscv.hpp ****     // mask clear register sip
  58:src/../h/riscv.hpp ****     static void mc_sip(uint64 mask);
  59:src/../h/riscv.hpp **** 
  60:src/../h/riscv.hpp ****     // read register sip
  61:src/../h/riscv.hpp ****     static uint64 r_sip();
  62:src/../h/riscv.hpp **** 
  63:src/../h/riscv.hpp ****     // write register sip
  64:src/../h/riscv.hpp ****     static void w_sip(uint64 sip);
  65:src/../h/riscv.hpp **** 
  66:src/../h/riscv.hpp ****     enum BitMaskSstatus
  67:src/../h/riscv.hpp ****     {
  68:src/../h/riscv.hpp ****         SSTATUS_SIE = (1 << 1),
  69:src/../h/riscv.hpp ****         SSTATUS_SPIE = (1 << 5),
  70:src/../h/riscv.hpp ****         SSTATUS_SPP = (1 << 8),
  71:src/../h/riscv.hpp ****     };
  72:src/../h/riscv.hpp **** 
  73:src/../h/riscv.hpp ****     // mask set register sstatus
  74:src/../h/riscv.hpp ****     static void ms_sstatus(uint64 mask);
  75:src/../h/riscv.hpp **** 
  76:src/../h/riscv.hpp ****     // mask clear register sstatus
  77:src/../h/riscv.hpp ****     static void mc_sstatus(uint64 mask);
  78:src/../h/riscv.hpp **** 
  79:src/../h/riscv.hpp ****     // read register sstatus
  80:src/../h/riscv.hpp ****     static uint64 r_sstatus();
  81:src/../h/riscv.hpp **** 
GAS LISTING /tmp/ccSX9sHX.s 			page 4


  82:src/../h/riscv.hpp ****     // write register sstatus
  83:src/../h/riscv.hpp ****     static void w_sstatus(uint64 sstatus);
  84:src/../h/riscv.hpp **** 
  85:src/../h/riscv.hpp ****     // supervisor trap
  86:src/../h/riscv.hpp ****     static void supervisorTrap();
  87:src/../h/riscv.hpp **** 
  88:src/../h/riscv.hpp **** private:
  89:src/../h/riscv.hpp ****     // supervisor trap handler. Sve vezano za prekid radimo u ovoj funkciji
  90:src/../h/riscv.hpp ****     static void handleSupervisorTrap();
  91:src/../h/riscv.hpp **** 
  92:src/../h/riscv.hpp **** };
  93:src/../h/riscv.hpp **** 
  94:src/../h/riscv.hpp **** inline uint64 Riscv::r_scause()
  95:src/../h/riscv.hpp **** {
  96:src/../h/riscv.hpp ****     uint64 volatile scause;
  71              		.loc 2 96 5
  97:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[scause], scause" : [scause] "=r"(scause));
  72              		.loc 2 97 5
  73              		.loc 2 97 72 is_stmt 0
  74              	#APP
  75              	# 97 "src/../h/riscv.hpp" 1
  98              	    return scause;
  76              		csrr a5, scause
  77              	# 0 "" 2
  78              	#NO_APP
  79 0048 2338F4F8 		sd	a5,-112(s0)
  80              		.loc 2 98 5 is_stmt 1
  81              		.loc 2 98 12 is_stmt 0
  82 004c 833704F9 		ld	a5,-112(s0)
  83              	.LBE43:
  84              	.LBE42:
  85              		.loc 1 23 39
  86 0050 233CF4FA 		sd	a5,-72(s0)
  24:src/riscv.cpp **** 
  25:src/riscv.cpp ****     if (scause == 0x0000000000000008UL || scause == 0x0000000000000009UL)
  87              		.loc 1 25 5 is_stmt 1
  88              	.LBB44:
  89              		.loc 1 25 16 is_stmt 0
  90 0054 033784FB 		ld	a4,-72(s0)
  91              		.loc 1 25 40
  92 0058 93078000 		li	a5,8
  93 005c 6302F704 		beq	a4,a5,.L4
  94              		.loc 1 25 50 discriminator 2
  95 0060 033784FB 		ld	a4,-72(s0)
  96              		.loc 1 25 40 discriminator 2
  97 0064 93079000 		li	a5,9
  98 0068 630CF702 		beq	a4,a5,.L4
  99              	.LBE44:
  26:src/riscv.cpp ****     {
  27:src/riscv.cpp ****         // Interrupt: no, cause code: environment code for S-mode(9)
  28:src/riscv.cpp ****         uint64 sepc = r_sepc() + 4;
  29:src/riscv.cpp ****         uint64 sstatus = r_sstatus();
  30:src/riscv.cpp **** 
  31:src/riscv.cpp ****         uint64 number;
  32:src/riscv.cpp **** 
  33:src/riscv.cpp ****         __asm__ volatile ("mv %0, a0" : "=r" (number));
  34:src/riscv.cpp **** 
GAS LISTING /tmp/ccSX9sHX.s 			page 5


  35:src/riscv.cpp ****         switch (number)
  36:src/riscv.cpp ****         {
  37:src/riscv.cpp ****             case 0x01:
  38:src/riscv.cpp ****             {
  39:src/riscv.cpp ****                 size_t allocate;
  40:src/riscv.cpp ****                 __asm__ volatile ("mv %0, a1" : "=r" (allocate));
  41:src/riscv.cpp **** 
  42:src/riscv.cpp ****                 uint64 *allocated_address = (uint64*) __mem_alloc(allocate);
  43:src/riscv.cpp ****                 __asm__ volatile ("mv a0, %0" : : "r" (allocated_address));
  44:src/riscv.cpp **** 
  45:src/riscv.cpp ****                 break;
  46:src/riscv.cpp ****             }
  47:src/riscv.cpp ****             case 0x02:
  48:src/riscv.cpp ****             {
  49:src/riscv.cpp ****                 void *allocated_address;
  50:src/riscv.cpp ****                 __asm__ volatile ("mv %0, a1" : "=r" (allocated_address));
  51:src/riscv.cpp **** 
  52:src/riscv.cpp ****                 int ret = __mem_free(allocated_address);
  53:src/riscv.cpp ****                 __asm__ volatile ("mv a0, %0" : : "r" (ret));
  54:src/riscv.cpp ****                 break;
  55:src/riscv.cpp ****             }
  56:src/riscv.cpp ****             case 0x11:
  57:src/riscv.cpp ****             {
  58:src/riscv.cpp ****                 thread_t *handle;
  59:src/riscv.cpp ****                 Body body;
  60:src/riscv.cpp ****                 void *arg;
  61:src/riscv.cpp ****                 uint64  *stack;
  62:src/riscv.cpp **** 
  63:src/riscv.cpp ****                 __asm__ volatile ("mv %0, a1" : "=r" (handle));
  64:src/riscv.cpp ****                 __asm__ volatile ("mv %0, a2" : "=r" (body));
  65:src/riscv.cpp ****                 __asm__ volatile ("mv %0, a6" : "=r" (arg));
  66:src/riscv.cpp **** 
  67:src/riscv.cpp ****                 if (body != 0)
  68:src/riscv.cpp ****                     stack = (uint64 *)new uint64[DEFAULT_STACK_SIZE];
  69:src/riscv.cpp ****                 else
  70:src/riscv.cpp ****                     stack = 0;
  71:src/riscv.cpp **** 
  72:src/riscv.cpp ****                 *handle = TCB::createThread(body, arg, stack, true);
  73:src/riscv.cpp **** 
  74:src/riscv.cpp ****                 int ret;
  75:src/riscv.cpp ****                 ret = (*handle) != nullptr ? 0 : -1;
  76:src/riscv.cpp ****                 __asm__ volatile ("mv a0, %0" : : "r" (ret));
  77:src/riscv.cpp **** 
  78:src/riscv.cpp ****                 break;
  79:src/riscv.cpp ****             }
  80:src/riscv.cpp ****             case 0x12:
  81:src/riscv.cpp ****             {
  82:src/riscv.cpp **** //                printString("Exiting...\n");
  83:src/riscv.cpp ****                 int ret;
  84:src/riscv.cpp ****                 ret = TCB::threadExit();
  85:src/riscv.cpp ****                 __asm__ volatile ("mv a0, %0" : : "r" (ret));
  86:src/riscv.cpp **** 
  87:src/riscv.cpp ****                 break;
  88:src/riscv.cpp ****             }
  89:src/riscv.cpp ****             case 0x13:
  90:src/riscv.cpp ****             {
  91:src/riscv.cpp ****                 TCB::dispatch();
GAS LISTING /tmp/ccSX9sHX.s 			page 6


  92:src/riscv.cpp **** 
  93:src/riscv.cpp ****                 break;
  94:src/riscv.cpp ****             }
  95:src/riscv.cpp ****             case 0x14:
  96:src/riscv.cpp ****             {
  97:src/riscv.cpp ****                 thread_t *handle;
  98:src/riscv.cpp ****                 Body body;
  99:src/riscv.cpp ****                 void *arg;
 100:src/riscv.cpp ****                 uint64  *stack;
 101:src/riscv.cpp **** 
 102:src/riscv.cpp ****                 __asm__ volatile ("mv %0, a1" : "=r" (handle));
 103:src/riscv.cpp ****                 __asm__ volatile ("mv %0, a2" : "=r" (body));
 104:src/riscv.cpp ****                 __asm__ volatile ("mv %0, a5" : "=r" (arg));
 105:src/riscv.cpp ****                 __asm__ volatile ("mv %0, a6" : "=r" (arg));
 106:src/riscv.cpp **** 
 107:src/riscv.cpp ****                 if (body != 0)
 108:src/riscv.cpp ****                     stack = (uint64 *)new uint64[DEFAULT_STACK_SIZE];
 109:src/riscv.cpp ****                 else
 110:src/riscv.cpp ****                     stack = 0;
 111:src/riscv.cpp **** 
 112:src/riscv.cpp ****                 *handle = TCB::createThread(body, arg, stack, false);
 113:src/riscv.cpp **** 
 114:src/riscv.cpp ****                 int ret;
 115:src/riscv.cpp ****                 ret = (*handle) != nullptr ? 0 : -1;
 116:src/riscv.cpp ****                 __asm__ volatile ("mv a0, %0" : : "r" (ret));
 117:src/riscv.cpp **** 
 118:src/riscv.cpp ****                 break;
 119:src/riscv.cpp ****             }
 120:src/riscv.cpp ****             case 0x15:
 121:src/riscv.cpp ****             {
 122:src/riscv.cpp ****                 thread_t *handle;
 123:src/riscv.cpp ****                 __asm__ volatile ("mv %0, a1" : "=r" (handle));
 124:src/riscv.cpp **** 
 125:src/riscv.cpp ****                 TCB::threadStart((TCB*)handle);
 126:src/riscv.cpp ****                 break;
 127:src/riscv.cpp ****             }
 128:src/riscv.cpp ****             case 0x21:
 129:src/riscv.cpp ****             {
 130:src/riscv.cpp ****                 unsigned init;
 131:src/riscv.cpp ****                 sem_t* handle;
 132:src/riscv.cpp **** 
 133:src/riscv.cpp ****                 __asm__ volatile ("mv %0, a2" : "=r" (init));
 134:src/riscv.cpp ****                 __asm__ volatile ("mv %0, a6" : "=r" (handle));
 135:src/riscv.cpp **** 
 136:src/riscv.cpp ****                 int retu;
 137:src/riscv.cpp ****                 retu = Sem::__open(handle, init);
 138:src/riscv.cpp **** 
 139:src/riscv.cpp ****                 __asm__ volatile ("mv a0, %0" : : "r" (retu));
 140:src/riscv.cpp ****                 break;
 141:src/riscv.cpp ****             }
 142:src/riscv.cpp ****             case 0x22:
 143:src/riscv.cpp ****             {
 144:src/riscv.cpp ****                 sem_t handle;
 145:src/riscv.cpp ****                 __asm__ volatile ("mv %0, a1" : "=r" (handle));
 146:src/riscv.cpp **** 
 147:src/riscv.cpp ****                 int retu;
 148:src/riscv.cpp ****                 retu = handle->__close();
GAS LISTING /tmp/ccSX9sHX.s 			page 7


 149:src/riscv.cpp **** 
 150:src/riscv.cpp ****                 __asm__ volatile ("mv a0, %0" : : "r" (retu));
 151:src/riscv.cpp **** 
 152:src/riscv.cpp ****                 break;
 153:src/riscv.cpp ****             }
 154:src/riscv.cpp ****             case 0x23:
 155:src/riscv.cpp ****             {
 156:src/riscv.cpp ****                 sem_t handle;
 157:src/riscv.cpp ****                 __asm__ volatile ("mv %0, a1" : "=r" (handle));
 158:src/riscv.cpp **** 
 159:src/riscv.cpp ****                 int retu;
 160:src/riscv.cpp ****                 retu = handle->__wait();
 161:src/riscv.cpp **** 
 162:src/riscv.cpp ****                 __asm__ volatile ("mv a0, %0" : : "r" (retu));
 163:src/riscv.cpp **** 
 164:src/riscv.cpp ****                 break;
 165:src/riscv.cpp ****             }
 166:src/riscv.cpp ****             case 0x24:
 167:src/riscv.cpp ****             {
 168:src/riscv.cpp ****                 sem_t handle;
 169:src/riscv.cpp ****                 __asm__ volatile ("mv %0, a1" : "=r" (handle));
 170:src/riscv.cpp **** 
 171:src/riscv.cpp ****                 int retu;
 172:src/riscv.cpp ****                 retu = handle->__signal();
 173:src/riscv.cpp **** 
 174:src/riscv.cpp ****                 __asm__ volatile ("mv a0, %0" : : "r" (retu));
 175:src/riscv.cpp ****                 break;
 176:src/riscv.cpp ****             }
 177:src/riscv.cpp ****         }
 178:src/riscv.cpp **** 
 179:src/riscv.cpp **** //        TCB::timeSliceCounter = 0;
 180:src/riscv.cpp **** //        TCB::dispatch();
 181:src/riscv.cpp ****         w_sstatus(sstatus);
 182:src/riscv.cpp ****         w_sepc(sepc);
 183:src/riscv.cpp ****     }
 184:src/riscv.cpp ****     else if (scause == 0x8000000000000001UL)
 100              		.loc 1 184 10 is_stmt 1
 101              	.LBB87:
 102              	.LBB45:
 103              		.loc 1 184 21 is_stmt 0
 104 006c 033784FB 		ld	a4,-72(s0)
 105              		.loc 1 184 10
 106 0070 9307F0FF 		li	a5,-1
 107 0074 9397F703 		slli	a5,a5,63
 108 0078 93871700 		addi	a5,a5,1
 109 007c 6308F71E 		beq	a4,a5,.L32
 185:src/riscv.cpp ****     {
 186:src/riscv.cpp ****         // Interrupt: yes, cause code: Software interrupt (timer)
 187:src/riscv.cpp ****         TCB::timeSliceCounter++;
 188:src/riscv.cpp **** 
 189:src/riscv.cpp ****         if (TCB::timeSliceCounter >= TCB::running->getTimeSlice())
 190:src/riscv.cpp ****         {
 191:src/riscv.cpp ****             uint64 sepc = r_sepc();
 192:src/riscv.cpp ****             uint64 sstatus = r_sstatus();
 193:src/riscv.cpp ****             TCB::timeSliceCounter = 0;
 194:src/riscv.cpp ****             TCB::dispatch();
 195:src/riscv.cpp ****             w_sstatus(sstatus);
GAS LISTING /tmp/ccSX9sHX.s 			page 8


 196:src/riscv.cpp ****             w_sepc(sepc);
 197:src/riscv.cpp ****         }
 198:src/riscv.cpp **** 
 199:src/riscv.cpp ****         mc_sip(SIP_SSIP);
 200:src/riscv.cpp ****     }
 201:src/riscv.cpp ****     else if (scause == 0x8000000000000009UL)
 110              		.loc 1 201 10 is_stmt 1
 111              		.loc 1 201 21 is_stmt 0
 112 0080 033784FB 		ld	a4,-72(s0)
 113              		.loc 1 201 10
 114 0084 9307F0FF 		li	a5,-1
 115 0088 9397F703 		slli	a5,a5,63
 116 008c 93879700 		addi	a5,a5,9
 117 0090 6316F706 		bne	a4,a5,.L3
 202:src/riscv.cpp ****     {
 203:src/riscv.cpp ****         // Interrupt: yes, cause code: Software external interrupt (console)
 204:src/riscv.cpp ****         console_handler();
 118              		.loc 1 204 9 is_stmt 1
 119              		.loc 1 204 24 is_stmt 0
 120 0094 97000000 		call	console_handler@plt
 120      E7800000 
 121              	.LVL0:
 122              	.LBE45:
 123              	.LBE87:
 205:src/riscv.cpp ****     }
 206:src/riscv.cpp ****     else
 207:src/riscv.cpp ****     {
 208:src/riscv.cpp ****         // Unexpected trap cause
 209:src/riscv.cpp ****         //printInt(scause);
 210:src/riscv.cpp **** //        printInt(sepc);
 211:src/riscv.cpp **** //        printInt(stvalue);
 212:src/riscv.cpp **** //        printString("Unexpected Trap Cause...\n");
 213:src/riscv.cpp ****     }
 214:src/riscv.cpp **** }...
 124              		.loc 1 214 1
 125 009c 6F000006 		j	.L3
 126              	.L4:
 127              	.LBB88:
 128              	.LBB62:
  28:src/riscv.cpp ****         uint64 sepc = r_sepc() + 4;
 129              		.loc 1 28 9 is_stmt 1
 130              	.LBB63:
 131              	.LBB64:
  99:src/../h/riscv.hpp **** }
 100:src/../h/riscv.hpp **** 
 101:src/../h/riscv.hpp **** inline void Riscv::w_scause(uint64 scause)
 102:src/../h/riscv.hpp **** {
 103:src/../h/riscv.hpp ****     __asm__ volatile ("csrw scause, %[scause]" : : [scause] "r"(scause));
 104:src/../h/riscv.hpp **** }
 105:src/../h/riscv.hpp **** 
 106:src/../h/riscv.hpp **** inline uint64 Riscv::r_sepc()
 107:src/../h/riscv.hpp **** {
 108:src/../h/riscv.hpp ****     uint64 volatile sepc;
 132              		.loc 2 108 5
 109:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[sepc], sepc" : [sepc] "=r"(sepc));
 133              		.loc 2 109 5
 134              		.loc 2 109 64 is_stmt 0
GAS LISTING /tmp/ccSX9sHX.s 			page 9


 135              	#APP
 136              	# 109 "src/../h/riscv.hpp" 1
 110              	    return sepc;
 137              		csrr a5, sepc
 138              	# 0 "" 2
 139              	#NO_APP
 140 00a4 2330F4FA 		sd	a5,-96(s0)
 141              		.loc 2 110 5 is_stmt 1
 142              		.loc 2 110 12 is_stmt 0
 143 00a8 833404FA 		ld	s1,-96(s0)
 144              	.LBE64:
 145              	.LBE63:
  28:src/riscv.cpp ****         uint64 sepc = r_sepc() + 4;
 146              		.loc 1 28 34
 147 00ac 93844400 		addi	s1,s1,4
 148              	.LVL1:
  29:src/riscv.cpp ****         uint64 sstatus = r_sstatus();
 149              		.loc 1 29 9 is_stmt 1
 150              	.LBB65:
 151              	.LBB66:
 111:src/../h/riscv.hpp **** }
 112:src/../h/riscv.hpp **** 
 113:src/../h/riscv.hpp **** inline void Riscv::w_sepc(uint64 sepc)
 114:src/../h/riscv.hpp **** {
 115:src/../h/riscv.hpp ****     __asm__ volatile ("csrw sepc, %[sepc]" : : [sepc] "r"(sepc));
 116:src/../h/riscv.hpp **** }
 117:src/../h/riscv.hpp **** 
 118:src/../h/riscv.hpp **** inline uint64 Riscv::r_stvec()
 119:src/../h/riscv.hpp **** {
 120:src/../h/riscv.hpp ****     uint64 volatile stvec;
 121:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[stvec], stvec" : [stvec] "=r"(stvec));
 122:src/../h/riscv.hpp ****     return stvec;
 123:src/../h/riscv.hpp **** }
 124:src/../h/riscv.hpp **** 
 125:src/../h/riscv.hpp **** inline void Riscv::w_stvec(uint64 stvec)
 126:src/../h/riscv.hpp **** {
 127:src/../h/riscv.hpp ****     __asm__ volatile ("csrw stvec, %[stvec]" : : [stvec] "r"(stvec));
 128:src/../h/riscv.hpp **** }
 129:src/../h/riscv.hpp **** 
 130:src/../h/riscv.hpp **** inline uint64 Riscv::r_stval()
 131:src/../h/riscv.hpp **** {
 132:src/../h/riscv.hpp ****     uint64 volatile stval;
 133:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[stval], stval" : [stval] "=r"(stval));
 134:src/../h/riscv.hpp ****     return stval;
 135:src/../h/riscv.hpp **** }
 136:src/../h/riscv.hpp **** 
 137:src/../h/riscv.hpp **** inline void Riscv::w_stval(uint64 stval)
 138:src/../h/riscv.hpp **** {
 139:src/../h/riscv.hpp ****     __asm__ volatile ("csrw stval, %[stval]" : : [stval] "r"(stval));
 140:src/../h/riscv.hpp **** }
 141:src/../h/riscv.hpp **** 
 142:src/../h/riscv.hpp **** inline void Riscv::ms_sip(uint64 mask)
 143:src/../h/riscv.hpp **** {
 144:src/../h/riscv.hpp ****     __asm__ volatile ("csrs sip, %[mask]" : : [mask] "r"(mask));
 145:src/../h/riscv.hpp **** }
 146:src/../h/riscv.hpp **** 
 147:src/../h/riscv.hpp **** inline void Riscv::mc_sip(uint64 mask)
GAS LISTING /tmp/ccSX9sHX.s 			page 10


 148:src/../h/riscv.hpp **** {
 149:src/../h/riscv.hpp ****     __asm__ volatile ("csrc sip, %[mask]" : : [mask] "r"(mask));
 150:src/../h/riscv.hpp **** }
 151:src/../h/riscv.hpp **** 
 152:src/../h/riscv.hpp **** inline uint64 Riscv::r_sip()
 153:src/../h/riscv.hpp **** {
 154:src/../h/riscv.hpp ****     uint64 volatile sip;
 155:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[sip], sip" : [sip] "=r"(sip));
 156:src/../h/riscv.hpp ****     return sip;
 157:src/../h/riscv.hpp **** }
 158:src/../h/riscv.hpp **** 
 159:src/../h/riscv.hpp **** inline void Riscv::w_sip(uint64 sip)
 160:src/../h/riscv.hpp **** {
 161:src/../h/riscv.hpp ****     __asm__ volatile ("csrw sip, %[sip]" : : [sip] "r"(sip));
 162:src/../h/riscv.hpp **** }
 163:src/../h/riscv.hpp **** 
 164:src/../h/riscv.hpp **** inline void Riscv::ms_sstatus(uint64 mask)
 165:src/../h/riscv.hpp **** {
 166:src/../h/riscv.hpp ****     __asm__ volatile ("csrs sstatus, %[mask]" : : [mask] "r"(mask));
 167:src/../h/riscv.hpp **** }
 168:src/../h/riscv.hpp **** 
 169:src/../h/riscv.hpp **** inline void Riscv::mc_sstatus(uint64 mask)
 170:src/../h/riscv.hpp **** {
 171:src/../h/riscv.hpp ****     __asm__ volatile ("csrc sstatus, %[mask]" : : [mask] "r"(mask));
 172:src/../h/riscv.hpp **** }
 173:src/../h/riscv.hpp **** 
 174:src/../h/riscv.hpp **** inline uint64 Riscv::r_sstatus()
 175:src/../h/riscv.hpp **** {
 176:src/../h/riscv.hpp ****     uint64 volatile sstatus;
 152              		.loc 2 176 5
 177:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[sstatus], sstatus" : [sstatus] "=r"(sstatus));
 153              		.loc 2 177 5
 154              		.loc 2 177 76 is_stmt 0
 155              	#APP
 156              	# 177 "src/../h/riscv.hpp" 1
 178              	    return sstatus;
 157              		csrr a5, sstatus
 158              	# 0 "" 2
 159              	#NO_APP
 160 00b4 233CF4F8 		sd	a5,-104(s0)
 161              		.loc 2 178 5 is_stmt 1
 162              		.loc 2 178 12 is_stmt 0
 163 00b8 033984F9 		ld	s2,-104(s0)
 164              	.LVL2:
 165              	.LBE66:
 166              	.LBE65:
  31:src/riscv.cpp ****         uint64 number;
 167              		.loc 1 31 9 is_stmt 1
  33:src/riscv.cpp ****         __asm__ volatile ("mv %0, a0" : "=r" (number));
 168              		.loc 1 33 9
  33:src/riscv.cpp ****         __asm__ volatile ("mv %0, a0" : "=r" (number));
 169              		.loc 1 33 55 is_stmt 0
 170              	#APP
 171              	# 33 "src/riscv.cpp" 1
 172              		mv a5, a0
 173              	# 0 "" 2
 174              	.LVL3:
GAS LISTING /tmp/ccSX9sHX.s 			page 11


  35:src/riscv.cpp ****         switch (number)
 175              		.loc 1 35 9 is_stmt 1
 176              	#NO_APP
 177 00c0 13074002 		li	a4,36
 178 00c4 6368F702 		bgtu	a5,a4,.L7
 179 00c8 93972700 		slli	a5,a5,2
 180              	.LVL4:
 181 00cc 17070000 		lla	a4,.L9
 181      13070700 
 182 00d4 B387E700 		add	a5,a5,a4
 183 00d8 83A70700 		lw	a5,0(a5)
 184 00dc B387E700 		add	a5,a5,a4
 185 00e0 67800700 		jr	a5
 186              		.section	.rodata
 187              		.align	2
 188              		.align	2
 189              	.L9:
 190 0000 00000000 		.word	.L7-.L9
 191 0004 00000000 		.word	.L19-.L9
 192 0008 00000000 		.word	.L18-.L9
 193 000c 00000000 		.word	.L7-.L9
 194 0010 00000000 		.word	.L7-.L9
 195 0014 00000000 		.word	.L7-.L9
 196 0018 00000000 		.word	.L7-.L9
 197 001c 00000000 		.word	.L7-.L9
 198 0020 00000000 		.word	.L7-.L9
 199 0024 00000000 		.word	.L7-.L9
 200 0028 00000000 		.word	.L7-.L9
 201 002c 00000000 		.word	.L7-.L9
 202 0030 00000000 		.word	.L7-.L9
 203 0034 00000000 		.word	.L7-.L9
 204 0038 00000000 		.word	.L7-.L9
 205 003c 00000000 		.word	.L7-.L9
 206 0040 00000000 		.word	.L7-.L9
 207 0044 00000000 		.word	.L17-.L9
 208 0048 00000000 		.word	.L16-.L9
 209 004c 00000000 		.word	.L15-.L9
 210 0050 00000000 		.word	.L14-.L9
 211 0054 00000000 		.word	.L13-.L9
 212 0058 00000000 		.word	.L7-.L9
 213 005c 00000000 		.word	.L7-.L9
 214 0060 00000000 		.word	.L7-.L9
 215 0064 00000000 		.word	.L7-.L9
 216 0068 00000000 		.word	.L7-.L9
 217 006c 00000000 		.word	.L7-.L9
 218 0070 00000000 		.word	.L7-.L9
 219 0074 00000000 		.word	.L7-.L9
 220 0078 00000000 		.word	.L7-.L9
 221 007c 00000000 		.word	.L7-.L9
 222 0080 00000000 		.word	.L7-.L9
 223 0084 00000000 		.word	.L12-.L9
 224 0088 00000000 		.word	.L11-.L9
 225 008c 00000000 		.word	.L10-.L9
 226 0090 00000000 		.word	.L8-.L9
 227              		.text
 228              	.L19:
 229              	.LBB67:
GAS LISTING /tmp/ccSX9sHX.s 			page 12


 230              	.LBB68:
  37:src/riscv.cpp ****             case 0x01:
 231              		.loc 1 37 13
  38:src/riscv.cpp ****             {
 232              		.loc 1 38 13
 233              	.LBB69:
  39:src/riscv.cpp ****                 size_t allocate;
 234              		.loc 1 39 17
  40:src/riscv.cpp ****                 __asm__ volatile ("mv %0, a1" : "=r" (allocate));
 235              		.loc 1 40 17
  40:src/riscv.cpp ****                 __asm__ volatile ("mv %0, a1" : "=r" (allocate));
 236              		.loc 1 40 65 is_stmt 0
 237              	#APP
 238              	# 40 "src/riscv.cpp" 1
 239              		mv a0, a1
 240              	# 0 "" 2
 241              	.LVL5:
  42:src/riscv.cpp ****                 uint64 *allocated_address = (uint64*) __mem_alloc(allocate);
 242              		.loc 1 42 17 is_stmt 1
  42:src/riscv.cpp ****                 uint64 *allocated_address = (uint64*) __mem_alloc(allocate);
 243              		.loc 1 42 66 is_stmt 0
 244              	#NO_APP
 245 00e8 97000000 		call	_Z11__mem_allocm@plt
 245      E7800000 
 246              	.LVL6:
  43:src/riscv.cpp ****                 __asm__ volatile ("mv a0, %0" : : "r" (allocated_address));
 247              		.loc 1 43 17 is_stmt 1
  43:src/riscv.cpp ****                 __asm__ volatile ("mv a0, %0" : : "r" (allocated_address));
 248              		.loc 1 43 75 is_stmt 0
 249              	#APP
 250              	# 43 "src/riscv.cpp" 1
  45:src/riscv.cpp ****                 break;
 251              		mv a0, a0
 252              	# 0 "" 2
 253              		.loc 1 45 17 is_stmt 1
 254              	.LVL7:
 255              	#NO_APP
 256              	.L7:
 257              	.LBE69:
 258              	.LBE68:
 259              	.LBE67:
 181:src/riscv.cpp ****         w_sstatus(sstatus);
 260              		.loc 1 181 9
 261              	.LBB80:
 262              	.LBB81:
 179:src/../h/riscv.hpp **** }
 180:src/../h/riscv.hpp **** 
 181:src/../h/riscv.hpp **** inline void Riscv::w_sstatus(uint64 sstatus)
 182:src/../h/riscv.hpp **** {
 183:src/../h/riscv.hpp ****     __asm__ volatile ("csrw sstatus, %[sstatus]" : : [sstatus] "r"(sstatus));
 263              		.loc 2 183 5
 264              		.loc 2 183 77 is_stmt 0
 265              	#APP
 266              	# 183 "src/../h/riscv.hpp" 1
 184              	}
 267              		csrw sstatus, s2
 268              	# 0 "" 2
GAS LISTING /tmp/ccSX9sHX.s 			page 13


 269              	.LVL8:
 270              	#NO_APP
 271              	.LBE81:
 272              	.LBE80:
 182:src/riscv.cpp ****         w_sepc(sepc);
 273              		.loc 1 182 9 is_stmt 1
 274              	.LBB82:
 275              	.LBB83:
 115:src/../h/riscv.hpp **** }
 276              		.loc 2 115 5
 115:src/../h/riscv.hpp **** }
 277              		.loc 2 115 65 is_stmt 0
 278              	#APP
 279              	# 115 "src/../h/riscv.hpp" 1
 280              		csrw sepc, s1
 281              	# 0 "" 2
 282              	.LVL9:
 283              	#NO_APP
 284              	.L3:
 285              	.LBE83:
 286              	.LBE82:
 287              	.LBE62:
 288              	.LBE88:
 289              		.loc 1 214 1
 290 00fc 83308106 		ld	ra,104(sp)
 291              		.cfi_remember_state
 292              		.cfi_restore 1
 293 0100 03340106 		ld	s0,96(sp)
 294              		.cfi_restore 8
 295              		.cfi_def_cfa 2, 112
 296 0104 83348105 		ld	s1,88(sp)
 297              		.cfi_restore 9
 298 0108 03390105 		ld	s2,80(sp)
 299              		.cfi_restore 18
 300 010c 83398104 		ld	s3,72(sp)
 301              		.cfi_restore 19
 302 0110 033A0104 		ld	s4,64(sp)
 303              		.cfi_restore 20
 304 0114 833A8103 		ld	s5,56(sp)
 305              		.cfi_restore 21
 306 0118 13010107 		addi	sp,sp,112
 307              		.cfi_def_cfa_offset 0
 308 011c 67800000 		jr	ra
 309              	.LVL10:
 310              	.L18:
 311              		.cfi_restore_state
 312              	.LBB89:
 313              	.LBB85:
 314              	.LBB84:
 315              	.LBB79:
  47:src/riscv.cpp ****             case 0x02:
 316              		.loc 1 47 13 is_stmt 1
  48:src/riscv.cpp ****             {
 317              		.loc 1 48 13
 318              	.LBB70:
  49:src/riscv.cpp ****                 void *allocated_address;
 319              		.loc 1 49 17
GAS LISTING /tmp/ccSX9sHX.s 			page 14


  50:src/riscv.cpp ****                 __asm__ volatile ("mv %0, a1" : "=r" (allocated_address));
 320              		.loc 1 50 17
  50:src/riscv.cpp ****                 __asm__ volatile ("mv %0, a1" : "=r" (allocated_address));
 321              		.loc 1 50 74 is_stmt 0
 322              	#APP
 323              	# 50 "src/riscv.cpp" 1
 324              		mv a0, a1
 325              	# 0 "" 2
 326              	.LVL11:
  52:src/riscv.cpp ****                 int ret = __mem_free(allocated_address);
 327              		.loc 1 52 17 is_stmt 1
  52:src/riscv.cpp ****                 int ret = __mem_free(allocated_address);
 328              		.loc 1 52 37 is_stmt 0
 329              	#NO_APP
 330 0124 97000000 		call	_Z10__mem_freePv@plt
 330      E7800000 
 331              	.LVL12:
  53:src/riscv.cpp ****                 __asm__ volatile ("mv a0, %0" : : "r" (ret));
 332              		.loc 1 53 17 is_stmt 1
  53:src/riscv.cpp ****                 __asm__ volatile ("mv a0, %0" : : "r" (ret));
 333              		.loc 1 53 61 is_stmt 0
 334              	#APP
 335              	# 53 "src/riscv.cpp" 1
  54:src/riscv.cpp ****                 break;
 336              		mv a0, a0
 337              	# 0 "" 2
 338              		.loc 1 54 17 is_stmt 1
 339              	#NO_APP
 340 0130 6FF05FFC 		j	.L7
 341              	.LVL13:
 342              	.L17:
 343              	.LBE70:
  56:src/riscv.cpp ****             case 0x11:
 344              		.loc 1 56 13
  57:src/riscv.cpp ****             {
 345              		.loc 1 57 13
 346              	.LBB71:
  58:src/riscv.cpp ****                 thread_t *handle;
 347              		.loc 1 58 17
  59:src/riscv.cpp ****                 Body body;
 348              		.loc 1 59 17
  60:src/riscv.cpp ****                 void *arg;
 349              		.loc 1 60 17
  61:src/riscv.cpp ****                 uint64  *stack;
 350              		.loc 1 61 17
  63:src/riscv.cpp ****                 __asm__ volatile ("mv %0, a1" : "=r" (handle));
 351              		.loc 1 63 17
  63:src/riscv.cpp ****                 __asm__ volatile ("mv %0, a1" : "=r" (handle));
 352              		.loc 1 63 63 is_stmt 0
 353              	#APP
 354              	# 63 "src/riscv.cpp" 1
 355              		mv s4, a1
 356              	# 0 "" 2
 357              	.LVL14:
  64:src/riscv.cpp ****                 __asm__ volatile ("mv %0, a2" : "=r" (body));
 358              		.loc 1 64 17 is_stmt 1
  64:src/riscv.cpp ****                 __asm__ volatile ("mv %0, a2" : "=r" (body));
GAS LISTING /tmp/ccSX9sHX.s 			page 15


 359              		.loc 1 64 61 is_stmt 0
 360              	# 64 "src/riscv.cpp" 1
 361              		mv s3, a2
 362              	# 0 "" 2
 363              	.LVL15:
  65:src/riscv.cpp ****                 __asm__ volatile ("mv %0, a6" : "=r" (arg));
 364              		.loc 1 65 17 is_stmt 1
  65:src/riscv.cpp ****                 __asm__ volatile ("mv %0, a6" : "=r" (arg));
 365              		.loc 1 65 60 is_stmt 0
 366              	# 65 "src/riscv.cpp" 1
 367              		mv s5, a6
 368              	# 0 "" 2
 369              	.LVL16:
  67:src/riscv.cpp ****                 if (body != 0)
 370              		.loc 1 67 17 is_stmt 1
 371              	#NO_APP
 372 0140 638E0902 		beqz	s3,.L26
  68:src/riscv.cpp ****                     stack = (uint64 *)new uint64[DEFAULT_STACK_SIZE];
 373              		.loc 1 68 21
  68:src/riscv.cpp ****                     stack = (uint64 *)new uint64[DEFAULT_STACK_SIZE];
 374              		.loc 1 68 68 is_stmt 0
 375 0144 37850000 		li	a0,32768
 376 0148 97000000 		call	_Znam@plt
 376      E7800000 
 377              	.LVL17:
 378 0150 13060500 		mv	a2,a0
 379              	.LVL18:
 380              	.L20:
  72:src/riscv.cpp ****                 *handle = TCB::createThread(body, arg, stack, true);
 381              		.loc 1 72 17 is_stmt 1
  72:src/riscv.cpp ****                 *handle = TCB::createThread(body, arg, stack, true);
 382              		.loc 1 72 44 is_stmt 0
 383 0154 93061000 		li	a3,1
 384 0158 93850A00 		mv	a1,s5
 385 015c 13850900 		mv	a0,s3
 386 0160 97000000 		call	_ZN3TCB12createThreadEPFvPvES0_S0_b@plt
 386      E7800000 
 387              	.LVL19:
  72:src/riscv.cpp ****                 *handle = TCB::createThread(body, arg, stack, true);
 388              		.loc 1 72 25
 389 0168 2330AA00 		sd	a0,0(s4)
  74:src/riscv.cpp ****                 int ret;
 390              		.loc 1 74 17 is_stmt 1
  75:src/riscv.cpp ****                 ret = (*handle) != nullptr ? 0 : -1;
 391              		.loc 1 75 17
  75:src/riscv.cpp ****                 ret = (*handle) != nullptr ? 0 : -1;
 392              		.loc 1 75 44 is_stmt 0
 393 016c 630C0500 		beqz	a0,.L27
 394 0170 93070000 		li	a5,0
 395              	.L21:
 396              	.LVL20:
  76:src/riscv.cpp ****                 __asm__ volatile ("mv a0, %0" : : "r" (ret));
 397              		.loc 1 76 17 is_stmt 1 discriminator 4
  76:src/riscv.cpp ****                 __asm__ volatile ("mv a0, %0" : : "r" (ret));
 398              		.loc 1 76 61 is_stmt 0 discriminator 4
 399              	#APP
 400              	# 76 "src/riscv.cpp" 1
GAS LISTING /tmp/ccSX9sHX.s 			page 16


  78:src/riscv.cpp ****                 break;
 401              		mv a0, a5
 402              	# 0 "" 2
 403              		.loc 1 78 17 is_stmt 1 discriminator 4
 404              	#NO_APP
 405 0178 6FF0DFF7 		j	.L7
 406              	.LVL21:
 407              	.L26:
  70:src/riscv.cpp ****                     stack = 0;
 408              		.loc 1 70 27 is_stmt 0
 409 017c 13060000 		li	a2,0
 410 0180 6FF05FFD 		j	.L20
 411              	.L27:
  75:src/riscv.cpp ****                 ret = (*handle) != nullptr ? 0 : -1;
 412              		.loc 1 75 44
 413 0184 9307F0FF 		li	a5,-1
 414 0188 6FF0DFFE 		j	.L21
 415              	.LVL22:
 416              	.L16:
 417              	.LBE71:
  80:src/riscv.cpp ****             case 0x12:
 418              		.loc 1 80 13 is_stmt 1
  81:src/riscv.cpp ****             {
 419              		.loc 1 81 13
 420              	.LBB72:
  83:src/riscv.cpp ****                 int ret;
 421              		.loc 1 83 17
  84:src/riscv.cpp ****                 ret = TCB::threadExit();
 422              		.loc 1 84 17
  84:src/riscv.cpp ****                 ret = TCB::threadExit();
 423              		.loc 1 84 38 is_stmt 0
 424 018c 97000000 		call	_ZN3TCB10threadExitEv@plt
 424      E7800000 
 425              	.LVL23:
  85:src/riscv.cpp ****                 __asm__ volatile ("mv a0, %0" : : "r" (ret));
 426              		.loc 1 85 17 is_stmt 1
  85:src/riscv.cpp ****                 __asm__ volatile ("mv a0, %0" : : "r" (ret));
 427              		.loc 1 85 61 is_stmt 0
 428              	#APP
 429              	# 85 "src/riscv.cpp" 1
  87:src/riscv.cpp ****                 break;
 430              		mv a0, a0
 431              	# 0 "" 2
 432              		.loc 1 87 17 is_stmt 1
 433              	#NO_APP
 434 0198 6FF0DFF5 		j	.L7
 435              	.LVL24:
 436              	.L15:
 437              	.LBE72:
  89:src/riscv.cpp ****             case 0x13:
 438              		.loc 1 89 13
  90:src/riscv.cpp ****             {
 439              		.loc 1 90 13
  91:src/riscv.cpp ****                 TCB::dispatch();
 440              		.loc 1 91 17
  91:src/riscv.cpp ****                 TCB::dispatch();
 441              		.loc 1 91 30 is_stmt 0
GAS LISTING /tmp/ccSX9sHX.s 			page 17


 442 019c 97000000 		call	_ZN3TCB8dispatchEv@plt
 442      E7800000 
 443              	.LVL25:
  93:src/riscv.cpp ****                 break;
 444              		.loc 1 93 17 is_stmt 1
 445 01a4 6FF01FF5 		j	.L7
 446              	.L14:
  95:src/riscv.cpp ****             case 0x14:
 447              		.loc 1 95 13
  96:src/riscv.cpp ****             {
 448              		.loc 1 96 13
 449              	.LBB73:
  97:src/riscv.cpp ****                 thread_t *handle;
 450              		.loc 1 97 17
  98:src/riscv.cpp ****                 Body body;
 451              		.loc 1 98 17
  99:src/riscv.cpp ****                 void *arg;
 452              		.loc 1 99 17
 100:src/riscv.cpp ****                 uint64  *stack;
 453              		.loc 1 100 17
 102:src/riscv.cpp ****                 __asm__ volatile ("mv %0, a1" : "=r" (handle));
 454              		.loc 1 102 17
 102:src/riscv.cpp ****                 __asm__ volatile ("mv %0, a1" : "=r" (handle));
 455              		.loc 1 102 63 is_stmt 0
 456              	#APP
 457              	# 102 "src/riscv.cpp" 1
 458              		mv s4, a1
 459              	# 0 "" 2
 460              	.LVL26:
 103:src/riscv.cpp ****                 __asm__ volatile ("mv %0, a2" : "=r" (body));
 461              		.loc 1 103 17 is_stmt 1
 103:src/riscv.cpp ****                 __asm__ volatile ("mv %0, a2" : "=r" (body));
 462              		.loc 1 103 61 is_stmt 0
 463              	# 103 "src/riscv.cpp" 1
 464              		mv s3, a2
 465              	# 0 "" 2
 466              	.LVL27:
 104:src/riscv.cpp ****                 __asm__ volatile ("mv %0, a5" : "=r" (arg));
 467              		.loc 1 104 17 is_stmt 1
 104:src/riscv.cpp ****                 __asm__ volatile ("mv %0, a5" : "=r" (arg));
 468              		.loc 1 104 60 is_stmt 0
 469              	# 104 "src/riscv.cpp" 1
 470              		mv a5, a5
 471              	# 0 "" 2
 472              	.LVL28:
 105:src/riscv.cpp ****                 __asm__ volatile ("mv %0, a6" : "=r" (arg));
 473              		.loc 1 105 17 is_stmt 1
 105:src/riscv.cpp ****                 __asm__ volatile ("mv %0, a6" : "=r" (arg));
 474              		.loc 1 105 60 is_stmt 0
 475              	# 105 "src/riscv.cpp" 1
 476              		mv s5, a6
 477              	# 0 "" 2
 478              	.LVL29:
 107:src/riscv.cpp ****                 if (body != 0)
 479              		.loc 1 107 17 is_stmt 1
 480              	#NO_APP
 481 01b8 638E0902 		beqz	s3,.L28
GAS LISTING /tmp/ccSX9sHX.s 			page 18


 108:src/riscv.cpp ****                     stack = (uint64 *)new uint64[DEFAULT_STACK_SIZE];
 482              		.loc 1 108 21
 108:src/riscv.cpp ****                     stack = (uint64 *)new uint64[DEFAULT_STACK_SIZE];
 483              		.loc 1 108 68 is_stmt 0
 484 01bc 37850000 		li	a0,32768
 485 01c0 97000000 		call	_Znam@plt
 485      E7800000 
 486              	.LVL30:
 487 01c8 13060500 		mv	a2,a0
 488              	.LVL31:
 489              	.L22:
 112:src/riscv.cpp ****                 *handle = TCB::createThread(body, arg, stack, false);
 490              		.loc 1 112 17 is_stmt 1
 112:src/riscv.cpp ****                 *handle = TCB::createThread(body, arg, stack, false);
 491              		.loc 1 112 44 is_stmt 0
 492 01cc 93060000 		li	a3,0
 493 01d0 93850A00 		mv	a1,s5
 494 01d4 13850900 		mv	a0,s3
 495 01d8 97000000 		call	_ZN3TCB12createThreadEPFvPvES0_S0_b@plt
 495      E7800000 
 496              	.LVL32:
 112:src/riscv.cpp ****                 *handle = TCB::createThread(body, arg, stack, false);
 497              		.loc 1 112 25
 498 01e0 2330AA00 		sd	a0,0(s4)
 114:src/riscv.cpp ****                 int ret;
 499              		.loc 1 114 17 is_stmt 1
 115:src/riscv.cpp ****                 ret = (*handle) != nullptr ? 0 : -1;
 500              		.loc 1 115 17
 115:src/riscv.cpp ****                 ret = (*handle) != nullptr ? 0 : -1;
 501              		.loc 1 115 44 is_stmt 0
 502 01e4 630C0500 		beqz	a0,.L29
 503 01e8 93070000 		li	a5,0
 504              	.L23:
 505              	.LVL33:
 116:src/riscv.cpp ****                 __asm__ volatile ("mv a0, %0" : : "r" (ret));
 506              		.loc 1 116 17 is_stmt 1 discriminator 4
 116:src/riscv.cpp ****                 __asm__ volatile ("mv a0, %0" : : "r" (ret));
 507              		.loc 1 116 61 is_stmt 0 discriminator 4
 508              	#APP
 509              	# 116 "src/riscv.cpp" 1
 118:src/riscv.cpp ****                 break;
 510              		mv a0, a5
 511              	# 0 "" 2
 512              		.loc 1 118 17 is_stmt 1 discriminator 4
 513              	#NO_APP
 514 01f0 6FF05FF0 		j	.L7
 515              	.LVL34:
 516              	.L28:
 110:src/riscv.cpp ****                     stack = 0;
 517              		.loc 1 110 27 is_stmt 0
 518 01f4 13060000 		li	a2,0
 519 01f8 6FF05FFD 		j	.L22
 520              	.L29:
 115:src/riscv.cpp ****                 ret = (*handle) != nullptr ? 0 : -1;
 521              		.loc 1 115 44
 522 01fc 9307F0FF 		li	a5,-1
 523 0200 6FF0DFFE 		j	.L23
GAS LISTING /tmp/ccSX9sHX.s 			page 19


 524              	.LVL35:
 525              	.L13:
 526              	.LBE73:
 120:src/riscv.cpp ****             case 0x15:
 527              		.loc 1 120 13 is_stmt 1
 121:src/riscv.cpp ****             {
 528              		.loc 1 121 13
 529              	.LBB74:
 122:src/riscv.cpp ****                 thread_t *handle;
 530              		.loc 1 122 17
 123:src/riscv.cpp ****                 __asm__ volatile ("mv %0, a1" : "=r" (handle));
 531              		.loc 1 123 17
 123:src/riscv.cpp ****                 __asm__ volatile ("mv %0, a1" : "=r" (handle));
 532              		.loc 1 123 63 is_stmt 0
 533              	#APP
 534              	# 123 "src/riscv.cpp" 1
 535              		mv a0, a1
 536              	# 0 "" 2
 537              	.LVL36:
 125:src/riscv.cpp ****                 TCB::threadStart((TCB*)handle);
 538              		.loc 1 125 17 is_stmt 1
 125:src/riscv.cpp ****                 TCB::threadStart((TCB*)handle);
 539              		.loc 1 125 33 is_stmt 0
 540              	#NO_APP
 541 0208 97000000 		call	_ZN3TCB11threadStartEPS_@plt
 541      E7800000 
 542              	.LVL37:
 126:src/riscv.cpp ****                 break;
 543              		.loc 1 126 17 is_stmt 1
 544 0210 6FF05FEE 		j	.L7
 545              	.L12:
 546              	.LBE74:
 128:src/riscv.cpp ****             case 0x21:
 547              		.loc 1 128 13
 129:src/riscv.cpp ****             {
 548              		.loc 1 129 13
 549              	.LBB75:
 130:src/riscv.cpp ****                 unsigned init;
 550              		.loc 1 130 17
 131:src/riscv.cpp ****                 sem_t* handle;
 551              		.loc 1 131 17
 133:src/riscv.cpp ****                 __asm__ volatile ("mv %0, a2" : "=r" (init));
 552              		.loc 1 133 17
 133:src/riscv.cpp ****                 __asm__ volatile ("mv %0, a2" : "=r" (init));
 553              		.loc 1 133 61 is_stmt 0
 554              	#APP
 555              	# 133 "src/riscv.cpp" 1
 556              		mv a1, a2
 557              	# 0 "" 2
 558              	#NO_APP
 559 0218 9B850500 		sext.w	a1,a1
 560              	.LVL38:
 134:src/riscv.cpp ****                 __asm__ volatile ("mv %0, a6" : "=r" (handle));
 561              		.loc 1 134 17 is_stmt 1
 134:src/riscv.cpp ****                 __asm__ volatile ("mv %0, a6" : "=r" (handle));
 562              		.loc 1 134 63 is_stmt 0
 563              	#APP
GAS LISTING /tmp/ccSX9sHX.s 			page 20


 564              	# 134 "src/riscv.cpp" 1
 565              		mv a0, a6
 566              	# 0 "" 2
 567              	.LVL39:
 136:src/riscv.cpp ****                 int retu;
 568              		.loc 1 136 17 is_stmt 1
 137:src/riscv.cpp ****                 retu = Sem::__open(handle, init);
 569              		.loc 1 137 17
 137:src/riscv.cpp ****                 retu = Sem::__open(handle, init);
 570              		.loc 1 137 35 is_stmt 0
 571              	#NO_APP
 572 0220 97000000 		call	_ZN3Sem6__openEPPS_j@plt
 572      E7800000 
 573              	.LVL40:
 139:src/riscv.cpp ****                 __asm__ volatile ("mv a0, %0" : : "r" (retu));
 574              		.loc 1 139 17 is_stmt 1
 139:src/riscv.cpp ****                 __asm__ volatile ("mv a0, %0" : : "r" (retu));
 575              		.loc 1 139 62 is_stmt 0
 576              	#APP
 577              	# 139 "src/riscv.cpp" 1
 140:src/riscv.cpp ****                 break;
 578              		mv a0, a0
 579              	# 0 "" 2
 580              		.loc 1 140 17 is_stmt 1
 581              	#NO_APP
 582 022c 6FF09FEC 		j	.L7
 583              	.LVL41:
 584              	.L11:
 585              	.LBE75:
 142:src/riscv.cpp ****             case 0x22:
 586              		.loc 1 142 13
 143:src/riscv.cpp ****             {
 587              		.loc 1 143 13
 588              	.LBB76:
 144:src/riscv.cpp ****                 sem_t handle;
 589              		.loc 1 144 17
 145:src/riscv.cpp ****                 __asm__ volatile ("mv %0, a1" : "=r" (handle));
 590              		.loc 1 145 17
 145:src/riscv.cpp ****                 __asm__ volatile ("mv %0, a1" : "=r" (handle));
 591              		.loc 1 145 63 is_stmt 0
 592              	#APP
 593              	# 145 "src/riscv.cpp" 1
 594              		mv a0, a1
 595              	# 0 "" 2
 596              	.LVL42:
 147:src/riscv.cpp ****                 int retu;
 597              		.loc 1 147 17 is_stmt 1
 148:src/riscv.cpp ****                 retu = handle->__close();
 598              		.loc 1 148 17
 148:src/riscv.cpp ****                 retu = handle->__close();
 599              		.loc 1 148 39 is_stmt 0
 600              	#NO_APP
 601 0234 97000000 		call	_ZN3Sem7__closeEv@plt
 601      E7800000 
 602              	.LVL43:
 150:src/riscv.cpp ****                 __asm__ volatile ("mv a0, %0" : : "r" (retu));
 603              		.loc 1 150 17 is_stmt 1
GAS LISTING /tmp/ccSX9sHX.s 			page 21


 150:src/riscv.cpp ****                 __asm__ volatile ("mv a0, %0" : : "r" (retu));
 604              		.loc 1 150 62 is_stmt 0
 605              	#APP
 606              	# 150 "src/riscv.cpp" 1
 152:src/riscv.cpp ****                 break;
 607              		mv a0, a0
 608              	# 0 "" 2
 609              		.loc 1 152 17 is_stmt 1
 610              	#NO_APP
 611 0240 6FF05FEB 		j	.L7
 612              	.LVL44:
 613              	.L10:
 614              	.LBE76:
 154:src/riscv.cpp ****             case 0x23:
 615              		.loc 1 154 13
 155:src/riscv.cpp ****             {
 616              		.loc 1 155 13
 617              	.LBB77:
 156:src/riscv.cpp ****                 sem_t handle;
 618              		.loc 1 156 17
 157:src/riscv.cpp ****                 __asm__ volatile ("mv %0, a1" : "=r" (handle));
 619              		.loc 1 157 17
 157:src/riscv.cpp ****                 __asm__ volatile ("mv %0, a1" : "=r" (handle));
 620              		.loc 1 157 63 is_stmt 0
 621              	#APP
 622              	# 157 "src/riscv.cpp" 1
 623              		mv a0, a1
 624              	# 0 "" 2
 625              	.LVL45:
 159:src/riscv.cpp ****                 int retu;
 626              		.loc 1 159 17 is_stmt 1
 160:src/riscv.cpp ****                 retu = handle->__wait();
 627              		.loc 1 160 17
 160:src/riscv.cpp ****                 retu = handle->__wait();
 628              		.loc 1 160 38 is_stmt 0
 629              	#NO_APP
 630 0248 97000000 		call	_ZN3Sem6__waitEv@plt
 630      E7800000 
 631              	.LVL46:
 162:src/riscv.cpp ****                 __asm__ volatile ("mv a0, %0" : : "r" (retu));
 632              		.loc 1 162 17 is_stmt 1
 162:src/riscv.cpp ****                 __asm__ volatile ("mv a0, %0" : : "r" (retu));
 633              		.loc 1 162 62 is_stmt 0
 634              	#APP
 635              	# 162 "src/riscv.cpp" 1
 164:src/riscv.cpp ****                 break;
 636              		mv a0, a0
 637              	# 0 "" 2
 638              		.loc 1 164 17 is_stmt 1
 639              	#NO_APP
 640 0254 6FF01FEA 		j	.L7
 641              	.LVL47:
 642              	.L8:
 643              	.LBE77:
 166:src/riscv.cpp ****             case 0x24:
 644              		.loc 1 166 13
 167:src/riscv.cpp ****             {
GAS LISTING /tmp/ccSX9sHX.s 			page 22


 645              		.loc 1 167 13
 646              	.LBB78:
 168:src/riscv.cpp ****                 sem_t handle;
 647              		.loc 1 168 17
 169:src/riscv.cpp ****                 __asm__ volatile ("mv %0, a1" : "=r" (handle));
 648              		.loc 1 169 17
 169:src/riscv.cpp ****                 __asm__ volatile ("mv %0, a1" : "=r" (handle));
 649              		.loc 1 169 63 is_stmt 0
 650              	#APP
 651              	# 169 "src/riscv.cpp" 1
 652              		mv a0, a1
 653              	# 0 "" 2
 654              	.LVL48:
 171:src/riscv.cpp ****                 int retu;
 655              		.loc 1 171 17 is_stmt 1
 172:src/riscv.cpp ****                 retu = handle->__signal();
 656              		.loc 1 172 17
 172:src/riscv.cpp ****                 retu = handle->__signal();
 657              		.loc 1 172 40 is_stmt 0
 658              	#NO_APP
 659 025c 97000000 		call	_ZN3Sem8__signalEv@plt
 659      E7800000 
 660              	.LVL49:
 174:src/riscv.cpp ****                 __asm__ volatile ("mv a0, %0" : : "r" (retu));
 661              		.loc 1 174 17 is_stmt 1
 174:src/riscv.cpp ****                 __asm__ volatile ("mv a0, %0" : : "r" (retu));
 662              		.loc 1 174 62 is_stmt 0
 663              	#APP
 664              	# 174 "src/riscv.cpp" 1
 175:src/riscv.cpp ****                 break;
 665              		mv a0, a0
 666              	# 0 "" 2
 667              		.loc 1 175 17 is_stmt 1
 668              	#NO_APP
 669 0268 6FF0DFE8 		j	.L7
 670              	.LVL50:
 671              	.L32:
 672              	.LBE78:
 673              	.LBE79:
 674              	.LBE84:
 675              	.LBE85:
 676              	.LBB86:
 677              	.LBB46:
 187:src/riscv.cpp ****         TCB::timeSliceCounter++;
 678              		.loc 1 187 9
 187:src/riscv.cpp ****         TCB::timeSliceCounter++;
 679              		.loc 1 187 30 is_stmt 0
 680 026c 17070000 		la	a4,_ZN3TCB16timeSliceCounterE
 680      03370700 
 681 0274 83370700 		ld	a5,0(a4)
 682 0278 93871700 		addi	a5,a5,1
 683 027c 2330F700 		sd	a5,0(a4)
 189:src/riscv.cpp ****         if (TCB::timeSliceCounter >= TCB::running->getTimeSlice())
 684              		.loc 1 189 9 is_stmt 1
 685              	.LBB47:
 189:src/riscv.cpp ****         if (TCB::timeSliceCounter >= TCB::running->getTimeSlice())
 686              		.loc 1 189 64 is_stmt 0
GAS LISTING /tmp/ccSX9sHX.s 			page 23


 687 0280 17070000 		la	a4,_ZN3TCB7runningE
 687      03370700 
 688 0288 03370700 		ld	a4,0(a4)
 689              	.LVL51:
 690              	.LBB48:
 691              	.LBB49:
 692              		.file 3 "src/../h/tcb.hpp"
   1:src/../h/tcb.hpp **** //
   2:src/../h/tcb.hpp **** // Created by os on 2/11/23.
   3:src/../h/tcb.hpp **** //
   4:src/../h/tcb.hpp **** 
   5:src/../h/tcb.hpp **** #ifndef PROJECT_BASE_TCB_HPP
   6:src/../h/tcb.hpp **** #define PROJECT_BASE_TCB_HPP
   7:src/../h/tcb.hpp **** 
   8:src/../h/tcb.hpp **** #include "../lib/hw.h"
   9:src/../h/tcb.hpp **** #include "scheduler.hpp"
  10:src/../h/tcb.hpp **** 
  11:src/../h/tcb.hpp **** typedef enum State{ NEW, ACTIVE, READY, BLOCKED, FINISHED } State;
  12:src/../h/tcb.hpp **** 
  13:src/../h/tcb.hpp **** // Thread Control Block
  14:src/../h/tcb.hpp **** class TCB {
  15:src/../h/tcb.hpp **** public:
  16:src/../h/tcb.hpp ****     ~TCB() { delete[] stack; }
  17:src/../h/tcb.hpp **** 
  18:src/../h/tcb.hpp ****     bool isFinished() const      { return finished;  }
  19:src/../h/tcb.hpp ****     void setFinished(bool value) { finished = value; }
  20:src/../h/tcb.hpp ****     uint64 getTimeSlice() const  { return timeSlice; }
 693              		.loc 3 20 36 is_stmt 1
 694              		.loc 3 20 43 is_stmt 0
 695 028c 03378702 		ld	a4,40(a4)
 696              	.LVL52:
 697              	.LBE49:
 698              	.LBE48:
 189:src/riscv.cpp ****         if (TCB::timeSliceCounter >= TCB::running->getTimeSlice())
 699              		.loc 1 189 9
 700 0290 63F8E700 		bgeu	a5,a4,.L33
 701              	.L25:
 702              	.LBE47:
 199:src/riscv.cpp ****         mc_sip(SIP_SSIP);
 703              		.loc 1 199 9 is_stmt 1
 704              	.LVL53:
 705              	.LBB59:
 706              	.LBB60:
 149:src/../h/riscv.hpp **** }
 707              		.loc 2 149 5
 149:src/../h/riscv.hpp **** }
 708              		.loc 2 149 64 is_stmt 0
 709 0294 93072000 		li	a5,2
 710              	#APP
 711              	# 149 "src/../h/riscv.hpp" 1
 150:src/../h/riscv.hpp **** 
 712              		csrc sip, a5
 713              	# 0 "" 2
 714              		.loc 2 150 1
 715              	#NO_APP
 716 029c 6FF01FE6 		j	.L3
 717              	.LVL54:
GAS LISTING /tmp/ccSX9sHX.s 			page 24


 718              	.L33:
 719              	.LBE60:
 720              	.LBE59:
 721              	.LBB61:
 722              	.LBB50:
 191:src/riscv.cpp ****             uint64 sepc = r_sepc();
 723              		.loc 1 191 13 is_stmt 1
 724              	.LBB51:
 725              	.LBB52:
 108:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[sepc], sepc" : [sepc] "=r"(sepc));
 726              		.loc 2 108 5
 109:src/../h/riscv.hpp ****     return sepc;
 727              		.loc 2 109 5
 109:src/../h/riscv.hpp ****     return sepc;
 728              		.loc 2 109 64 is_stmt 0
 729              	#APP
 730              	# 109 "src/../h/riscv.hpp" 1
 731              		csrr a5, sepc
 732              	# 0 "" 2
 733              	#NO_APP
 734 02a4 2338F4FA 		sd	a5,-80(s0)
 110:src/../h/riscv.hpp **** }
 735              		.loc 2 110 5 is_stmt 1
 110:src/../h/riscv.hpp **** }
 736              		.loc 2 110 12 is_stmt 0
 737 02a8 833404FB 		ld	s1,-80(s0)
 738              	.LVL55:
 739              	.LBE52:
 740              	.LBE51:
 192:src/riscv.cpp ****             uint64 sstatus = r_sstatus();
 741              		.loc 1 192 13 is_stmt 1
 742              	.LBB53:
 743              	.LBB54:
 176:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[sstatus], sstatus" : [sstatus] "=r"(sstatus));
 744              		.loc 2 176 5
 177:src/../h/riscv.hpp ****     return sstatus;
 745              		.loc 2 177 5
 177:src/../h/riscv.hpp ****     return sstatus;
 746              		.loc 2 177 76 is_stmt 0
 747              	#APP
 748              	# 177 "src/../h/riscv.hpp" 1
 749              		csrr a5, sstatus
 750              	# 0 "" 2
 751              	#NO_APP
 752 02b0 2334F4FA 		sd	a5,-88(s0)
 178:src/../h/riscv.hpp **** }
 753              		.loc 2 178 5 is_stmt 1
 178:src/../h/riscv.hpp **** }
 754              		.loc 2 178 12 is_stmt 0
 755 02b4 033984FA 		ld	s2,-88(s0)
 756              	.LVL56:
 757              	.LBE54:
 758              	.LBE53:
 193:src/riscv.cpp ****             TCB::timeSliceCounter = 0;
 759              		.loc 1 193 13 is_stmt 1
 193:src/riscv.cpp ****             TCB::timeSliceCounter = 0;
 760              		.loc 1 193 35 is_stmt 0
GAS LISTING /tmp/ccSX9sHX.s 			page 25


 761 02b8 97070000 		la	a5,_ZN3TCB16timeSliceCounterE
 761      83B70700 
 762 02c0 23B00700 		sd	zero,0(a5)
 194:src/riscv.cpp ****             TCB::dispatch();
 763              		.loc 1 194 13 is_stmt 1
 194:src/riscv.cpp ****             TCB::dispatch();
 764              		.loc 1 194 26 is_stmt 0
 765 02c4 97000000 		call	_ZN3TCB8dispatchEv@plt
 765      E7800000 
 766              	.LVL57:
 195:src/riscv.cpp ****             w_sstatus(sstatus);
 767              		.loc 1 195 13 is_stmt 1
 768              	.LBB55:
 769              	.LBB56:
 183:src/../h/riscv.hpp **** }
 770              		.loc 2 183 5
 183:src/../h/riscv.hpp **** }
 771              		.loc 2 183 77 is_stmt 0
 772              	#APP
 773              	# 183 "src/../h/riscv.hpp" 1
 774              		csrw sstatus, s2
 775              	# 0 "" 2
 776              	.LVL58:
 777              	#NO_APP
 778              	.LBE56:
 779              	.LBE55:
 196:src/riscv.cpp ****             w_sepc(sepc);
 780              		.loc 1 196 13 is_stmt 1
 781              	.LBB57:
 782              	.LBB58:
 115:src/../h/riscv.hpp **** }
 783              		.loc 2 115 5
 115:src/../h/riscv.hpp **** }
 784              		.loc 2 115 65 is_stmt 0
 785              	#APP
 786              	# 115 "src/../h/riscv.hpp" 1
 116:src/../h/riscv.hpp **** 
 787              		csrw sepc, s1
 788              	# 0 "" 2
 789              		.loc 2 116 1
 790              	#NO_APP
 791 02d4 6FF01FFC 		j	.L25
 792              	.LBE58:
 793              	.LBE57:
 794              	.LBE50:
 795              	.LBE61:
 796              	.LBE46:
 797              	.LBE86:
 798              	.LBE89:
 799              		.cfi_endproc
 800              	.LFE36:
 802              	.Letext0:
 803              		.file 4 "src/../h/../lib/hw.h"
 804              		.file 5 "src/../h/list.hpp"
 805              		.file 6 "src/../test/../h/syscall_c.h"
 806              		.file 7 "src/../h/sem.hpp"
 807              		.file 8 "src/../h/my_mem.h"
GAS LISTING /tmp/ccSX9sHX.s 			page 26


 808              		.file 9 "src/../lib/console.h"
GAS LISTING /tmp/ccSX9sHX.s 			page 27


DEFINED SYMBOLS
                            *ABS*:0000000000000000 riscv.cpp
     /tmp/ccSX9sHX.s:9      .text:0000000000000000 _ZN5Riscv10popSppSpieEv
     /tmp/ccSX9sHX.s:13     .text:0000000000000000 .L0 
     /tmp/ccSX9sHX.s:14     .text:0000000000000000 .L0 
     /tmp/ccSX9sHX.s:15     .text:0000000000000004 .L0 
     /tmp/ccSX9sHX.s:17     .text:0000000000000008 .L0 
     /tmp/ccSX9sHX.s:19     .text:000000000000000c .L0 
     /tmp/ccSX9sHX.s:21     .text:000000000000000c .L0 
       src/riscv.cpp:17     .text:000000000000000c .L0 
     /tmp/ccSX9sHX.s:27     .text:0000000000000010 .L0 
       src/riscv.cpp:18     .text:0000000000000010 .L0 
     /tmp/ccSX9sHX.s:33     .text:0000000000000014 .L0 
     /tmp/ccSX9sHX.s:34     .text:0000000000000018 .L0 
     /tmp/ccSX9sHX.s:35     .text:0000000000000018 .L0 
     /tmp/ccSX9sHX.s:37     .text:000000000000001c .L0 
     /tmp/ccSX9sHX.s:39     .text:0000000000000020 .L0 
     /tmp/ccSX9sHX.s:45     .text:0000000000000020 _ZN5Riscv20handleSupervisorTrapEv
     /tmp/ccSX9sHX.s:48     .text:0000000000000020 .L0 
     /tmp/ccSX9sHX.s:49     .text:0000000000000020 .L0 
     /tmp/ccSX9sHX.s:50     .text:0000000000000024 .L0 
     /tmp/ccSX9sHX.s:58     .text:0000000000000040 .L0 
     /tmp/ccSX9sHX.s:59     .text:0000000000000040 .L0 
     /tmp/ccSX9sHX.s:60     .text:0000000000000040 .L0 
     /tmp/ccSX9sHX.s:61     .text:0000000000000040 .L0 
     /tmp/ccSX9sHX.s:62     .text:0000000000000040 .L0 
     /tmp/ccSX9sHX.s:63     .text:0000000000000040 .L0 
     /tmp/ccSX9sHX.s:64     .text:0000000000000040 .L0 
     /tmp/ccSX9sHX.s:66     .text:0000000000000044 .L0 
     /tmp/ccSX9sHX.s:71     .text:0000000000000044 .L0 
     /tmp/ccSX9sHX.s:72     .text:0000000000000044 .L0 
     /tmp/ccSX9sHX.s:73     .text:0000000000000044 .L0 
  src/../h/riscv.hpp:97     .text:0000000000000044 .L0 
     /tmp/ccSX9sHX.s:81     .text:000000000000004c .L0 
     /tmp/ccSX9sHX.s:82     .text:000000000000004c .L0 
     /tmp/ccSX9sHX.s:86     .text:0000000000000050 .L0 
     /tmp/ccSX9sHX.s:89     .text:0000000000000054 .L0 
     /tmp/ccSX9sHX.s:90     .text:0000000000000054 .L0 
     /tmp/ccSX9sHX.s:92     .text:0000000000000058 .L0 
     /tmp/ccSX9sHX.s:95     .text:0000000000000060 .L0 
     /tmp/ccSX9sHX.s:97     .text:0000000000000064 .L0 
     /tmp/ccSX9sHX.s:103    .text:000000000000006c .L0 
     /tmp/ccSX9sHX.s:104    .text:000000000000006c .L0 
     /tmp/ccSX9sHX.s:106    .text:0000000000000070 .L0 
     /tmp/ccSX9sHX.s:111    .text:0000000000000080 .L0 
     /tmp/ccSX9sHX.s:112    .text:0000000000000080 .L0 
     /tmp/ccSX9sHX.s:114    .text:0000000000000084 .L0 
     /tmp/ccSX9sHX.s:119    .text:0000000000000094 .L0 
     /tmp/ccSX9sHX.s:120    .text:0000000000000094 .L0 
     /tmp/ccSX9sHX.s:125    .text:000000000000009c .L0 
     /tmp/ccSX9sHX.s:132    .text:00000000000000a0 .L0 
     /tmp/ccSX9sHX.s:133    .text:00000000000000a0 .L0 
     /tmp/ccSX9sHX.s:134    .text:00000000000000a0 .L0 
  src/../h/riscv.hpp:109    .text:00000000000000a0 .L0 
     /tmp/ccSX9sHX.s:142    .text:00000000000000a8 .L0 
     /tmp/ccSX9sHX.s:143    .text:00000000000000a8 .L0 
     /tmp/ccSX9sHX.s:147    .text:00000000000000ac .L0 
GAS LISTING /tmp/ccSX9sHX.s 			page 28


     /tmp/ccSX9sHX.s:152    .text:00000000000000b0 .L0 
     /tmp/ccSX9sHX.s:153    .text:00000000000000b0 .L0 
     /tmp/ccSX9sHX.s:154    .text:00000000000000b0 .L0 
  src/../h/riscv.hpp:177    .text:00000000000000b0 .L0 
     /tmp/ccSX9sHX.s:162    .text:00000000000000b8 .L0 
     /tmp/ccSX9sHX.s:163    .text:00000000000000b8 .L0 
     /tmp/ccSX9sHX.s:168    .text:00000000000000bc .L0 
     /tmp/ccSX9sHX.s:169    .text:00000000000000bc .L0 
       src/riscv.cpp:33     .text:00000000000000bc .L0 
     /tmp/ccSX9sHX.s:177    .text:00000000000000c0 .L0 
     /tmp/ccSX9sHX.s:232    .text:00000000000000e4 .L0 
     /tmp/ccSX9sHX.s:234    .text:00000000000000e4 .L0 
     /tmp/ccSX9sHX.s:235    .text:00000000000000e4 .L0 
     /tmp/ccSX9sHX.s:236    .text:00000000000000e4 .L0 
       src/riscv.cpp:40     .text:00000000000000e4 .L0 
     /tmp/ccSX9sHX.s:243    .text:00000000000000e8 .L0 
     /tmp/ccSX9sHX.s:245    .text:00000000000000e8 .L0 
     /tmp/ccSX9sHX.s:248    .text:00000000000000f0 .L0 
       src/riscv.cpp:43     .text:00000000000000f0 .L0 
     /tmp/ccSX9sHX.s:260    .text:00000000000000f4 .L0 
     /tmp/ccSX9sHX.s:263    .text:00000000000000f4 .L0 
     /tmp/ccSX9sHX.s:264    .text:00000000000000f4 .L0 
  src/../h/riscv.hpp:183    .text:00000000000000f4 .L0 
     /tmp/ccSX9sHX.s:276    .text:00000000000000f8 .L0 
     /tmp/ccSX9sHX.s:277    .text:00000000000000f8 .L0 
  src/../h/riscv.hpp:115    .text:00000000000000f8 .L0 
     /tmp/ccSX9sHX.s:290    .text:00000000000000fc .L0 
     /tmp/ccSX9sHX.s:291    .text:0000000000000100 .L0 
     /tmp/ccSX9sHX.s:292    .text:0000000000000100 .L0 
     /tmp/ccSX9sHX.s:294    .text:0000000000000104 .L0 
     /tmp/ccSX9sHX.s:295    .text:0000000000000104 .L0 
     /tmp/ccSX9sHX.s:297    .text:0000000000000108 .L0 
     /tmp/ccSX9sHX.s:299    .text:000000000000010c .L0 
     /tmp/ccSX9sHX.s:301    .text:0000000000000110 .L0 
     /tmp/ccSX9sHX.s:303    .text:0000000000000114 .L0 
     /tmp/ccSX9sHX.s:305    .text:0000000000000118 .L0 
     /tmp/ccSX9sHX.s:307    .text:000000000000011c .L0 
     /tmp/ccSX9sHX.s:311    .text:0000000000000120 .L0 
     /tmp/ccSX9sHX.s:317    .text:0000000000000120 .L0 
     /tmp/ccSX9sHX.s:319    .text:0000000000000120 .L0 
     /tmp/ccSX9sHX.s:320    .text:0000000000000120 .L0 
     /tmp/ccSX9sHX.s:321    .text:0000000000000120 .L0 
       src/riscv.cpp:50     .text:0000000000000120 .L0 
     /tmp/ccSX9sHX.s:328    .text:0000000000000124 .L0 
     /tmp/ccSX9sHX.s:330    .text:0000000000000124 .L0 
     /tmp/ccSX9sHX.s:333    .text:000000000000012c .L0 
       src/riscv.cpp:53     .text:000000000000012c .L0 
     /tmp/ccSX9sHX.s:340    .text:0000000000000130 .L0 
     /tmp/ccSX9sHX.s:345    .text:0000000000000134 .L0 
     /tmp/ccSX9sHX.s:347    .text:0000000000000134 .L0 
     /tmp/ccSX9sHX.s:348    .text:0000000000000134 .L0 
     /tmp/ccSX9sHX.s:349    .text:0000000000000134 .L0 
     /tmp/ccSX9sHX.s:350    .text:0000000000000134 .L0 
     /tmp/ccSX9sHX.s:351    .text:0000000000000134 .L0 
     /tmp/ccSX9sHX.s:352    .text:0000000000000134 .L0 
       src/riscv.cpp:63     .text:0000000000000134 .L0 
     /tmp/ccSX9sHX.s:359    .text:0000000000000138 .L0 
GAS LISTING /tmp/ccSX9sHX.s 			page 29


       src/riscv.cpp:64     .text:0000000000000138 .L0 
     /tmp/ccSX9sHX.s:365    .text:000000000000013c .L0 
       src/riscv.cpp:65     .text:000000000000013c .L0 
     /tmp/ccSX9sHX.s:372    .text:0000000000000140 .L0 
     /tmp/ccSX9sHX.s:374    .text:0000000000000144 .L0 
     /tmp/ccSX9sHX.s:375    .text:0000000000000144 .L0 
     /tmp/ccSX9sHX.s:382    .text:0000000000000154 .L0 
     /tmp/ccSX9sHX.s:383    .text:0000000000000154 .L0 
     /tmp/ccSX9sHX.s:389    .text:0000000000000168 .L0 
     /tmp/ccSX9sHX.s:391    .text:000000000000016c .L0 
     /tmp/ccSX9sHX.s:392    .text:000000000000016c .L0 
     /tmp/ccSX9sHX.s:393    .text:000000000000016c .L0 
     /tmp/ccSX9sHX.s:398    .text:0000000000000174 .L0 
       src/riscv.cpp:76     .text:0000000000000174 .L0 
     /tmp/ccSX9sHX.s:405    .text:0000000000000178 .L0 
     /tmp/ccSX9sHX.s:409    .text:000000000000017c .L0 
     /tmp/ccSX9sHX.s:413    .text:0000000000000184 .L0 
     /tmp/ccSX9sHX.s:419    .text:000000000000018c .L0 
     /tmp/ccSX9sHX.s:421    .text:000000000000018c .L0 
     /tmp/ccSX9sHX.s:422    .text:000000000000018c .L0 
     /tmp/ccSX9sHX.s:423    .text:000000000000018c .L0 
     /tmp/ccSX9sHX.s:424    .text:000000000000018c .L0 
     /tmp/ccSX9sHX.s:427    .text:0000000000000194 .L0 
       src/riscv.cpp:85     .text:0000000000000194 .L0 
     /tmp/ccSX9sHX.s:434    .text:0000000000000198 .L0 
     /tmp/ccSX9sHX.s:439    .text:000000000000019c .L0 
     /tmp/ccSX9sHX.s:440    .text:000000000000019c .L0 
     /tmp/ccSX9sHX.s:441    .text:000000000000019c .L0 
     /tmp/ccSX9sHX.s:442    .text:000000000000019c .L0 
     /tmp/ccSX9sHX.s:445    .text:00000000000001a4 .L0 
     /tmp/ccSX9sHX.s:448    .text:00000000000001a8 .L0 
     /tmp/ccSX9sHX.s:450    .text:00000000000001a8 .L0 
     /tmp/ccSX9sHX.s:451    .text:00000000000001a8 .L0 
     /tmp/ccSX9sHX.s:452    .text:00000000000001a8 .L0 
     /tmp/ccSX9sHX.s:453    .text:00000000000001a8 .L0 
     /tmp/ccSX9sHX.s:454    .text:00000000000001a8 .L0 
     /tmp/ccSX9sHX.s:455    .text:00000000000001a8 .L0 
       src/riscv.cpp:102    .text:00000000000001a8 .L0 
     /tmp/ccSX9sHX.s:462    .text:00000000000001ac .L0 
       src/riscv.cpp:103    .text:00000000000001ac .L0 
     /tmp/ccSX9sHX.s:468    .text:00000000000001b0 .L0 
       src/riscv.cpp:104    .text:00000000000001b0 .L0 
     /tmp/ccSX9sHX.s:474    .text:00000000000001b4 .L0 
       src/riscv.cpp:105    .text:00000000000001b4 .L0 
     /tmp/ccSX9sHX.s:481    .text:00000000000001b8 .L0 
     /tmp/ccSX9sHX.s:483    .text:00000000000001bc .L0 
     /tmp/ccSX9sHX.s:484    .text:00000000000001bc .L0 
     /tmp/ccSX9sHX.s:491    .text:00000000000001cc .L0 
     /tmp/ccSX9sHX.s:492    .text:00000000000001cc .L0 
     /tmp/ccSX9sHX.s:498    .text:00000000000001e0 .L0 
     /tmp/ccSX9sHX.s:500    .text:00000000000001e4 .L0 
     /tmp/ccSX9sHX.s:501    .text:00000000000001e4 .L0 
     /tmp/ccSX9sHX.s:502    .text:00000000000001e4 .L0 
     /tmp/ccSX9sHX.s:507    .text:00000000000001ec .L0 
       src/riscv.cpp:116    .text:00000000000001ec .L0 
     /tmp/ccSX9sHX.s:514    .text:00000000000001f0 .L0 
     /tmp/ccSX9sHX.s:518    .text:00000000000001f4 .L0 
GAS LISTING /tmp/ccSX9sHX.s 			page 30


     /tmp/ccSX9sHX.s:522    .text:00000000000001fc .L0 
     /tmp/ccSX9sHX.s:528    .text:0000000000000204 .L0 
     /tmp/ccSX9sHX.s:530    .text:0000000000000204 .L0 
     /tmp/ccSX9sHX.s:531    .text:0000000000000204 .L0 
     /tmp/ccSX9sHX.s:532    .text:0000000000000204 .L0 
       src/riscv.cpp:123    .text:0000000000000204 .L0 
     /tmp/ccSX9sHX.s:539    .text:0000000000000208 .L0 
     /tmp/ccSX9sHX.s:541    .text:0000000000000208 .L0 
     /tmp/ccSX9sHX.s:544    .text:0000000000000210 .L0 
     /tmp/ccSX9sHX.s:548    .text:0000000000000214 .L0 
     /tmp/ccSX9sHX.s:550    .text:0000000000000214 .L0 
     /tmp/ccSX9sHX.s:551    .text:0000000000000214 .L0 
     /tmp/ccSX9sHX.s:552    .text:0000000000000214 .L0 
     /tmp/ccSX9sHX.s:553    .text:0000000000000214 .L0 
       src/riscv.cpp:133    .text:0000000000000214 .L0 
     /tmp/ccSX9sHX.s:562    .text:000000000000021c .L0 
       src/riscv.cpp:134    .text:000000000000021c .L0 
     /tmp/ccSX9sHX.s:569    .text:0000000000000220 .L0 
     /tmp/ccSX9sHX.s:570    .text:0000000000000220 .L0 
     /tmp/ccSX9sHX.s:572    .text:0000000000000220 .L0 
     /tmp/ccSX9sHX.s:575    .text:0000000000000228 .L0 
       src/riscv.cpp:139    .text:0000000000000228 .L0 
     /tmp/ccSX9sHX.s:582    .text:000000000000022c .L0 
     /tmp/ccSX9sHX.s:587    .text:0000000000000230 .L0 
     /tmp/ccSX9sHX.s:589    .text:0000000000000230 .L0 
     /tmp/ccSX9sHX.s:590    .text:0000000000000230 .L0 
     /tmp/ccSX9sHX.s:591    .text:0000000000000230 .L0 
       src/riscv.cpp:145    .text:0000000000000230 .L0 
     /tmp/ccSX9sHX.s:598    .text:0000000000000234 .L0 
     /tmp/ccSX9sHX.s:599    .text:0000000000000234 .L0 
     /tmp/ccSX9sHX.s:601    .text:0000000000000234 .L0 
     /tmp/ccSX9sHX.s:604    .text:000000000000023c .L0 
       src/riscv.cpp:150    .text:000000000000023c .L0 
     /tmp/ccSX9sHX.s:611    .text:0000000000000240 .L0 
     /tmp/ccSX9sHX.s:616    .text:0000000000000244 .L0 
     /tmp/ccSX9sHX.s:618    .text:0000000000000244 .L0 
     /tmp/ccSX9sHX.s:619    .text:0000000000000244 .L0 
     /tmp/ccSX9sHX.s:620    .text:0000000000000244 .L0 
       src/riscv.cpp:157    .text:0000000000000244 .L0 
     /tmp/ccSX9sHX.s:627    .text:0000000000000248 .L0 
     /tmp/ccSX9sHX.s:628    .text:0000000000000248 .L0 
     /tmp/ccSX9sHX.s:630    .text:0000000000000248 .L0 
     /tmp/ccSX9sHX.s:633    .text:0000000000000250 .L0 
       src/riscv.cpp:162    .text:0000000000000250 .L0 
     /tmp/ccSX9sHX.s:640    .text:0000000000000254 .L0 
     /tmp/ccSX9sHX.s:645    .text:0000000000000258 .L0 
     /tmp/ccSX9sHX.s:647    .text:0000000000000258 .L0 
     /tmp/ccSX9sHX.s:648    .text:0000000000000258 .L0 
     /tmp/ccSX9sHX.s:649    .text:0000000000000258 .L0 
       src/riscv.cpp:169    .text:0000000000000258 .L0 
     /tmp/ccSX9sHX.s:656    .text:000000000000025c .L0 
     /tmp/ccSX9sHX.s:657    .text:000000000000025c .L0 
     /tmp/ccSX9sHX.s:659    .text:000000000000025c .L0 
     /tmp/ccSX9sHX.s:662    .text:0000000000000264 .L0 
       src/riscv.cpp:174    .text:0000000000000264 .L0 
     /tmp/ccSX9sHX.s:669    .text:0000000000000268 .L0 
     /tmp/ccSX9sHX.s:679    .text:000000000000026c .L0 
GAS LISTING /tmp/ccSX9sHX.s 			page 31


     /tmp/ccSX9sHX.s:680    .text:000000000000026c .L0 
     /tmp/ccSX9sHX.s:686    .text:0000000000000280 .L0 
     /tmp/ccSX9sHX.s:687    .text:0000000000000280 .L0 
     /tmp/ccSX9sHX.s:694    .text:000000000000028c .L0 
     /tmp/ccSX9sHX.s:695    .text:000000000000028c .L0 
     /tmp/ccSX9sHX.s:700    .text:0000000000000290 .L0 
     /tmp/ccSX9sHX.s:707    .text:0000000000000294 .L0 
     /tmp/ccSX9sHX.s:708    .text:0000000000000294 .L0 
     /tmp/ccSX9sHX.s:709    .text:0000000000000294 .L0 
     /tmp/ccSX9sHX.s:716    .text:000000000000029c .L0 
     /tmp/ccSX9sHX.s:726    .text:00000000000002a0 .L0 
     /tmp/ccSX9sHX.s:727    .text:00000000000002a0 .L0 
     /tmp/ccSX9sHX.s:728    .text:00000000000002a0 .L0 
  src/../h/riscv.hpp:109    .text:00000000000002a0 .L0 
     /tmp/ccSX9sHX.s:736    .text:00000000000002a8 .L0 
     /tmp/ccSX9sHX.s:737    .text:00000000000002a8 .L0 
     /tmp/ccSX9sHX.s:744    .text:00000000000002ac .L0 
     /tmp/ccSX9sHX.s:745    .text:00000000000002ac .L0 
     /tmp/ccSX9sHX.s:746    .text:00000000000002ac .L0 
  src/../h/riscv.hpp:177    .text:00000000000002ac .L0 
     /tmp/ccSX9sHX.s:754    .text:00000000000002b4 .L0 
     /tmp/ccSX9sHX.s:755    .text:00000000000002b4 .L0 
     /tmp/ccSX9sHX.s:760    .text:00000000000002b8 .L0 
     /tmp/ccSX9sHX.s:761    .text:00000000000002b8 .L0 
     /tmp/ccSX9sHX.s:764    .text:00000000000002c4 .L0 
     /tmp/ccSX9sHX.s:765    .text:00000000000002c4 .L0 
     /tmp/ccSX9sHX.s:770    .text:00000000000002cc .L0 
     /tmp/ccSX9sHX.s:771    .text:00000000000002cc .L0 
  src/../h/riscv.hpp:183    .text:00000000000002cc .L0 
     /tmp/ccSX9sHX.s:783    .text:00000000000002d0 .L0 
     /tmp/ccSX9sHX.s:784    .text:00000000000002d0 .L0 
  src/../h/riscv.hpp:115    .text:00000000000002d0 .L0 
     /tmp/ccSX9sHX.s:791    .text:00000000000002d4 .L0 
     /tmp/ccSX9sHX.s:799    .text:00000000000002d8 .L0 
     /tmp/ccSX9sHX.s:809    .text:00000000000002d8 .L0 
     /tmp/ccSX9sHX.s:189    .rodata:0000000000000000 .L9
     /tmp/ccSX9sHX.s:181    .text:00000000000000cc .L0 
     /tmp/ccSX9sHX.s:680    .text:000000000000026c .L0 
     /tmp/ccSX9sHX.s:687    .text:0000000000000280 .L0 
     /tmp/ccSX9sHX.s:761    .text:00000000000002b8 .L0 
     /tmp/ccSX9sHX.s:126    .text:00000000000000a0 .L4
     /tmp/ccSX9sHX.s:671    .text:000000000000026c .L32
     /tmp/ccSX9sHX.s:284    .text:00000000000000fc .L3
     /tmp/ccSX9sHX.s:256    .text:00000000000000f4 .L7
     /tmp/ccSX9sHX.s:407    .text:000000000000017c .L26
     /tmp/ccSX9sHX.s:411    .text:0000000000000184 .L27
     /tmp/ccSX9sHX.s:380    .text:0000000000000154 .L20
     /tmp/ccSX9sHX.s:395    .text:0000000000000174 .L21
     /tmp/ccSX9sHX.s:516    .text:00000000000001f4 .L28
     /tmp/ccSX9sHX.s:520    .text:00000000000001fc .L29
     /tmp/ccSX9sHX.s:489    .text:00000000000001cc .L22
     /tmp/ccSX9sHX.s:504    .text:00000000000001ec .L23
     /tmp/ccSX9sHX.s:718    .text:00000000000002a0 .L33
     /tmp/ccSX9sHX.s:701    .text:0000000000000294 .L25
     /tmp/ccSX9sHX.s:228    .text:00000000000000e4 .L19
     /tmp/ccSX9sHX.s:310    .text:0000000000000120 .L18
     /tmp/ccSX9sHX.s:342    .text:0000000000000134 .L17
GAS LISTING /tmp/ccSX9sHX.s 			page 32


     /tmp/ccSX9sHX.s:416    .text:000000000000018c .L16
     /tmp/ccSX9sHX.s:436    .text:000000000000019c .L15
     /tmp/ccSX9sHX.s:446    .text:00000000000001a8 .L14
     /tmp/ccSX9sHX.s:525    .text:0000000000000204 .L13
     /tmp/ccSX9sHX.s:545    .text:0000000000000214 .L12
     /tmp/ccSX9sHX.s:584    .text:0000000000000230 .L11
     /tmp/ccSX9sHX.s:613    .text:0000000000000244 .L10
     /tmp/ccSX9sHX.s:642    .text:0000000000000258 .L8
     /tmp/ccSX9sHX.s:2472   .debug_abbrev:0000000000000000 .Ldebug_abbrev0
     /tmp/ccSX9sHX.s:4107   .debug_str:0000000000000762 .LASF153
     /tmp/ccSX9sHX.s:4155   .debug_str:0000000000000954 .LASF154
     /tmp/ccSX9sHX.s:3915   .debug_str:000000000000022e .LASF155
     /tmp/ccSX9sHX.s:5      .text:0000000000000000 .Ltext0
     /tmp/ccSX9sHX.s:802    .text:00000000000002d8 .Letext0
     /tmp/ccSX9sHX.s:3839   .debug_line:0000000000000000 .Ldebug_line0
     /tmp/ccSX9sHX.s:3937   .debug_str:00000000000002e5 .LASF0
     /tmp/ccSX9sHX.s:3959   .debug_str:000000000000039f .LASF1
     /tmp/ccSX9sHX.s:4045   .debug_str:00000000000005fa .LASF2
     /tmp/ccSX9sHX.s:4057   .debug_str:000000000000064f .LASF4
     /tmp/ccSX9sHX.s:3947   .debug_str:000000000000031f .LASF3
     /tmp/ccSX9sHX.s:3853   .debug_str:0000000000000075 .LASF5
     /tmp/ccSX9sHX.s:4009   .debug_str:00000000000004d8 .LASF6
     /tmp/ccSX9sHX.s:3953   .debug_str:0000000000000370 .LASF7
     /tmp/ccSX9sHX.s:3911   .debug_str:0000000000000218 .LASF8
     /tmp/ccSX9sHX.s:3925   .debug_str:0000000000000291 .LASF9
     /tmp/ccSX9sHX.s:3873   .debug_str:00000000000000fd .LASF10
     /tmp/ccSX9sHX.s:3905   .debug_str:00000000000001f2 .LASF11
     /tmp/ccSX9sHX.s:3879   .debug_str:0000000000000132 .LASF12
     /tmp/ccSX9sHX.s:3871   .debug_str:00000000000000ed .LASF13
     /tmp/ccSX9sHX.s:4091   .debug_str:000000000000071b .LASF14
     /tmp/ccSX9sHX.s:3895   .debug_str:0000000000000185 .LASF15
     /tmp/ccSX9sHX.s:4079   .debug_str:00000000000006d2 .LASF16
     /tmp/ccSX9sHX.s:4143   .debug_str:0000000000000902 .LASF60
     /tmp/ccSX9sHX.s:4029   .debug_str:0000000000000579 .LASF156
     /tmp/ccSX9sHX.s:3961   .debug_str:00000000000003b2 .LASF17
     /tmp/ccSX9sHX.s:3901   .debug_str:00000000000001d2 .LASF18
     /tmp/ccSX9sHX.s:4157   .debug_str:0000000000000962 .LASF19
     /tmp/ccSX9sHX.s:3929   .debug_str:00000000000002aa .LASF20
     /tmp/ccSX9sHX.s:3935   .debug_str:00000000000002cd .LASF22
     /tmp/ccSX9sHX.s:4065   .debug_str:0000000000000675 .LASF21
     /tmp/ccSX9sHX.s:3899   .debug_str:00000000000001b7 .LASF23
     /tmp/ccSX9sHX.s:3939   .debug_str:00000000000002f2 .LASF24
     /tmp/ccSX9sHX.s:4151   .debug_str:0000000000000932 .LASF25
     /tmp/ccSX9sHX.s:4125   .debug_str:0000000000000891 .LASF26
     /tmp/ccSX9sHX.s:4117   .debug_str:0000000000000851 .LASF28
     /tmp/ccSX9sHX.s:4041   .debug_str:00000000000005e6 .LASF30
     /tmp/ccSX9sHX.s:4003   .debug_str:00000000000004b2 .LASF32
     /tmp/ccSX9sHX.s:4021   .debug_str:0000000000000539 .LASF27
     /tmp/ccSX9sHX.s:4025   .debug_str:0000000000000552 .LASF29
     /tmp/ccSX9sHX.s:3995   .debug_str:000000000000047a .LASF31
     /tmp/ccSX9sHX.s:3955   .debug_str:0000000000000383 .LASF33
     /tmp/ccSX9sHX.s:4153   .debug_str:000000000000094c .LASF34
     /tmp/ccSX9sHX.s:4111   .debug_str:000000000000082b .LASF35
     /tmp/ccSX9sHX.s:3991   .debug_str:000000000000046d .LASF36
     /tmp/ccSX9sHX.s:4001   .debug_str:000000000000049e .LASF37
     /tmp/ccSX9sHX.s:3967   .debug_str:00000000000003d9 .LASF38
     /tmp/ccSX9sHX.s:4027   .debug_str:0000000000000565 .LASF39
GAS LISTING /tmp/ccSX9sHX.s 			page 33


     /tmp/ccSX9sHX.s:4171   .debug_str:00000000000009e1 .LASF40
     /tmp/ccSX9sHX.s:3943   .debug_str:0000000000000305 .LASF41
     /tmp/ccSX9sHX.s:4087   .debug_str:0000000000000707 .LASF42
     /tmp/ccSX9sHX.s:4061   .debug_str:000000000000065b .LASF43
     /tmp/ccSX9sHX.s:4063   .debug_str:000000000000066e .LASF44
     /tmp/ccSX9sHX.s:3875   .debug_str:000000000000010c .LASF45
     /tmp/ccSX9sHX.s:3891   .debug_str:0000000000000178 .LASF46
     /tmp/ccSX9sHX.s:3933   .debug_str:00000000000002bb .LASF47
     /tmp/ccSX9sHX.s:3941   .debug_str:00000000000002ff .LASF48
     /tmp/ccSX9sHX.s:3885   .debug_str:0000000000000157 .LASF49
     /tmp/ccSX9sHX.s:3855   .debug_str:000000000000007c .LASF50
     /tmp/ccSX9sHX.s:4049   .debug_str:0000000000000612 .LASF51
     /tmp/ccSX9sHX.s:4043   .debug_str:00000000000005ef .LASF52
     /tmp/ccSX9sHX.s:4167   .debug_str:00000000000009bd .LASF53
     /tmp/ccSX9sHX.s:4147   .debug_str:0000000000000920 .LASF54
     /tmp/ccSX9sHX.s:4163   .debug_str:000000000000098c .LASF55
     /tmp/ccSX9sHX.s:4137   .debug_str:00000000000008d1 .LASF56
     /tmp/ccSX9sHX.s:3979   .debug_str:0000000000000414 .LASF57
     /tmp/ccSX9sHX.s:4121   .debug_str:000000000000087d .LASF58
     /tmp/ccSX9sHX.s:3923   .debug_str:0000000000000275 .LASF59
     /tmp/ccSX9sHX.s:4013   .debug_str:00000000000004f5 .LASF102
     /tmp/ccSX9sHX.s:3949   .debug_str:0000000000000331 .LASF104
     /tmp/ccSX9sHX.s:4011   .debug_str:00000000000004eb .LASF61
     /tmp/ccSX9sHX.s:4129   .debug_str:00000000000008a5 .LASF157
     /tmp/ccSX9sHX.s:4085   .debug_str:0000000000000702 .LASF62
     /tmp/ccSX9sHX.s:3993   .debug_str:0000000000000475 .LASF63
     /tmp/ccSX9sHX.s:3985   .debug_str:000000000000044a .LASF64
     /tmp/ccSX9sHX.s:4081   .debug_str:00000000000006e8 .LASF66
     /tmp/ccSX9sHX.s:3903   .debug_str:00000000000001db .LASF71
     /tmp/ccSX9sHX.s:4047   .debug_str:0000000000000608 .LASF158
     /tmp/ccSX9sHX.s:4037   .debug_str:00000000000005be .LASF159
     /tmp/ccSX9sHX.s:3957   .debug_str:0000000000000396 .LASF65
     /tmp/ccSX9sHX.s:3867   .debug_str:00000000000000c4 .LASF67
     /tmp/ccSX9sHX.s:3969   .debug_str:00000000000003e1 .LASF68
     /tmp/ccSX9sHX.s:3897   .debug_str:000000000000019b .LASF69
     /tmp/ccSX9sHX.s:4007   .debug_str:00000000000004cc .LASF70
     /tmp/ccSX9sHX.s:4139   .debug_str:00000000000008db .LASF72
     /tmp/ccSX9sHX.s:4175   .debug_str:00000000000009f2 .LASF73
     /tmp/ccSX9sHX.s:4165   .debug_str:00000000000009a2 .LASF74
     /tmp/ccSX9sHX.s:4073   .debug_str:00000000000006b3 .LASF75
     /tmp/ccSX9sHX.s:3951   .debug_str:0000000000000353 .LASF76
     /tmp/ccSX9sHX.s:4019   .debug_str:0000000000000530 .LASF77
     /tmp/ccSX9sHX.s:3845   .debug_str:0000000000000011 .LASF78
     /tmp/ccSX9sHX.s:4095   .debug_str:0000000000000733 .LASF160
     /tmp/ccSX9sHX.s:4059   .debug_str:0000000000000656 .LASF79
     /tmp/ccSX9sHX.s:3849   .debug_str:0000000000000053 .LASF80
     /tmp/ccSX9sHX.s:4097   .debug_str:000000000000073b .LASF81
     /tmp/ccSX9sHX.s:3989   .debug_str:0000000000000456 .LASF82
     /tmp/ccSX9sHX.s:3861   .debug_str:00000000000000a1 .LASF83
     /tmp/ccSX9sHX.s:4119   .debug_str:0000000000000866 .LASF84
     /tmp/ccSX9sHX.s:3975   .debug_str:00000000000003f7 .LASF85
     /tmp/ccSX9sHX.s:4131   .debug_str:00000000000008aa .LASF86
     /tmp/ccSX9sHX.s:3887   .debug_str:0000000000000169 .LASF87
     /tmp/ccSX9sHX.s:3877   .debug_str:000000000000011f .LASF88
     /tmp/ccSX9sHX.s:4071   .debug_str:00000000000006aa .LASF89
     /tmp/ccSX9sHX.s:4015   .debug_str:000000000000050a .LASF90
     /tmp/ccSX9sHX.s:4051   .debug_str:000000000000062a .LASF91
GAS LISTING /tmp/ccSX9sHX.s 			page 34


     /tmp/ccSX9sHX.s:4145   .debug_str:0000000000000908 .LASF92
     /tmp/ccSX9sHX.s:4089   .debug_str:000000000000070e .LASF93
     /tmp/ccSX9sHX.s:4033   .debug_str:0000000000000595 .LASF94
     /tmp/ccSX9sHX.s:4005   .debug_str:00000000000004c7 .LASF137
     /tmp/ccSX9sHX.s:4105   .debug_str:000000000000075a .LASF161
     /tmp/ccSX9sHX.s:3997   .debug_str:0000000000000481 .LASF120
     /tmp/ccSX9sHX.s:3843   .debug_str:000000000000000c .LASF95
     /tmp/ccSX9sHX.s:3973   .debug_str:00000000000003f1 .LASF96
     /tmp/ccSX9sHX.s:4115   .debug_str:0000000000000849 .LASF97
     /tmp/ccSX9sHX.s:4113   .debug_str:000000000000083f .LASF98
     /tmp/ccSX9sHX.s:3889   .debug_str:0000000000000172 .LASF99
     /tmp/ccSX9sHX.s:4077   .debug_str:00000000000006c9 .LASF100
     /tmp/ccSX9sHX.s:4023   .debug_str:0000000000000540 .LASF101
     /tmp/ccSX9sHX.s:3865   .debug_str:00000000000000b6 .LASF103
     /tmp/ccSX9sHX.s:3963   .debug_str:00000000000003bb .LASF105
     /tmp/ccSX9sHX.s:3881   .debug_str:0000000000000142 .LASF162
     /tmp/ccSX9sHX.s:3847   .debug_str:000000000000002b .LASF163
     /tmp/ccSX9sHX.s:4075   .debug_str:00000000000006be .LASF106
     /tmp/ccSX9sHX.s:3851   .debug_str:000000000000005f .LASF107
     /tmp/ccSX9sHX.s:4093   .debug_str:0000000000000727 .LASF108
     /tmp/ccSX9sHX.s:3983   .debug_str:0000000000000431 .LASF109
     /tmp/ccSX9sHX.s:4067   .debug_str:0000000000000683 .LASF164
     /tmp/ccSX9sHX.s:4053   .debug_str:0000000000000633 .LASF110
     /tmp/ccSX9sHX.s:4161   .debug_str:0000000000000981 .LASF111
     /tmp/ccSX9sHX.s:4101   .debug_str:000000000000074c .LASF116
     /tmp/ccSX9sHX.s:3883   .debug_str:0000000000000150 .LASF112
     /tmp/ccSX9sHX.s:4099   .debug_str:0000000000000746 .LASF113
     /tmp/ccSX9sHX.s:3971   .debug_str:00000000000003e9 .LASF114
     /tmp/ccSX9sHX.s:3863   .debug_str:00000000000000ad .LASF115
     /tmp/ccSX9sHX.s:4035   .debug_str:00000000000005b9 .LASF117
     /tmp/ccSX9sHX.s:4135   .debug_str:00000000000008c8 .LASF118
     /tmp/ccSX9sHX.s:3913   .debug_str:0000000000000228 .LASF119
     /tmp/ccSX9sHX.s:3869   .debug_str:00000000000000e1 .LASF121
     /tmp/ccSX9sHX.s:3965   .debug_str:00000000000003d4 .LASF122
     /tmp/ccSX9sHX.s:3841   .debug_str:0000000000000000 .LASF123
     /tmp/ccSX9sHX.s:3987   .debug_str:000000000000044f .LASF124
     /tmp/ccSX9sHX.s:3857   .debug_str:0000000000000087 .LASF125
     /tmp/ccSX9sHX.s:4103   .debug_str:0000000000000752 .LASF126
     /tmp/ccSX9sHX.s:3919   .debug_str:000000000000025c .LASF127
     /tmp/ccSX9sHX.s:3893   .debug_str:000000000000017e .LASF128
     /tmp/ccSX9sHX.s:4055   .debug_str:000000000000063e .LASF129
     /tmp/ccSX9sHX.s:4141   .debug_str:00000000000008f9 .LASF130
     /tmp/ccSX9sHX.s:4017   .debug_str:000000000000051d .LASF131
     /tmp/ccSX9sHX.s:4127   .debug_str:000000000000089a .LASF132
     /tmp/ccSX9sHX.s:4159   .debug_str:000000000000096b .LASF133
     /tmp/ccSX9sHX.s:3931   .debug_str:00000000000002b5 .LASF134
     /tmp/ccSX9sHX.s:3999   .debug_str:0000000000000499 .LASF135
     /tmp/ccSX9sHX.s:4069   .debug_str:0000000000000694 .LASF136
     /tmp/ccSX9sHX.s:46     .text:0000000000000020 .LFB36
     /tmp/ccSX9sHX.s:800    .text:00000000000002d8 .LFE36
     /tmp/ccSX9sHX.s:4083   .debug_str:00000000000006fb .LASF138
     /tmp/ccSX9sHX.s:3831   .debug_ranges:0000000000000000 .Ldebug_ranges0
     /tmp/ccSX9sHX.s:4109   .debug_str:0000000000000826 .LASF139
     /tmp/ccSX9sHX.s:3578   .debug_loc:0000000000000000 .LLST3
     /tmp/ccSX9sHX.s:4149   .debug_str:000000000000092a .LASF140
     /tmp/ccSX9sHX.s:3589   .debug_loc:0000000000000036 .LLST4
     /tmp/ccSX9sHX.s:3921   .debug_str:000000000000026e .LASF141
GAS LISTING /tmp/ccSX9sHX.s 			page 35


     /tmp/ccSX9sHX.s:3600   .debug_loc:000000000000006c .LLST5
     /tmp/ccSX9sHX.s:233    .text:00000000000000e4 .LBB69
     /tmp/ccSX9sHX.s:257    .text:00000000000000f4 .LBE69
     /tmp/ccSX9sHX.s:4173   .debug_str:00000000000009e9 .LASF142
     /tmp/ccSX9sHX.s:3607   .debug_loc:000000000000008f .LLST6
     /tmp/ccSX9sHX.s:3907   .debug_str:0000000000000201 .LASF143
     /tmp/ccSX9sHX.s:3614   .debug_loc:00000000000000b2 .LLST7
     /tmp/ccSX9sHX.s:246    .text:00000000000000f0 .LVL6
     /tmp/ccSX9sHX.s:318    .text:0000000000000120 .LBB70
     /tmp/ccSX9sHX.s:343    .text:0000000000000134 .LBE70
     /tmp/ccSX9sHX.s:3621   .debug_loc:00000000000000d5 .LLST8
     /tmp/ccSX9sHX.s:3628   .debug_loc:00000000000000f8 .LLST9
     /tmp/ccSX9sHX.s:331    .text:000000000000012c .LVL12
     /tmp/ccSX9sHX.s:346    .text:0000000000000134 .LBB71
     /tmp/ccSX9sHX.s:417    .text:000000000000018c .LBE71
     /tmp/ccSX9sHX.s:3981   .debug_str:000000000000042a .LASF144
     /tmp/ccSX9sHX.s:3635   .debug_loc:000000000000011b .LLST10
     /tmp/ccSX9sHX.s:3642   .debug_loc:000000000000013e .LLST11
     /tmp/ccSX9sHX.s:3649   .debug_loc:0000000000000161 .LLST12
     /tmp/ccSX9sHX.s:3656   .debug_loc:0000000000000184 .LLST13
     /tmp/ccSX9sHX.s:3663   .debug_loc:00000000000001a7 .LLST14
     /tmp/ccSX9sHX.s:377    .text:0000000000000150 .LVL17
     /tmp/ccSX9sHX.s:387    .text:0000000000000168 .LVL19
     /tmp/ccSX9sHX.s:420    .text:000000000000018c .LBB72
     /tmp/ccSX9sHX.s:437    .text:000000000000019c .LBE72
     /tmp/ccSX9sHX.s:3670   .debug_loc:00000000000001ca .LLST15
     /tmp/ccSX9sHX.s:425    .text:0000000000000194 .LVL23
     /tmp/ccSX9sHX.s:449    .text:00000000000001a8 .LBB73
     /tmp/ccSX9sHX.s:526    .text:0000000000000204 .LBE73
     /tmp/ccSX9sHX.s:3677   .debug_loc:00000000000001ed .LLST16
     /tmp/ccSX9sHX.s:3684   .debug_loc:0000000000000210 .LLST17
     /tmp/ccSX9sHX.s:3691   .debug_loc:0000000000000233 .LLST18
     /tmp/ccSX9sHX.s:3698   .debug_loc:0000000000000256 .LLST19
     /tmp/ccSX9sHX.s:3705   .debug_loc:0000000000000279 .LLST20
     /tmp/ccSX9sHX.s:486    .text:00000000000001c8 .LVL30
     /tmp/ccSX9sHX.s:496    .text:00000000000001e0 .LVL32
     /tmp/ccSX9sHX.s:529    .text:0000000000000204 .LBB74
     /tmp/ccSX9sHX.s:546    .text:0000000000000214 .LBE74
     /tmp/ccSX9sHX.s:3712   .debug_loc:000000000000029c .LLST21
     /tmp/ccSX9sHX.s:542    .text:0000000000000210 .LVL37
     /tmp/ccSX9sHX.s:549    .text:0000000000000214 .LBB75
     /tmp/ccSX9sHX.s:585    .text:0000000000000230 .LBE75
     /tmp/ccSX9sHX.s:3859   .debug_str:000000000000009c .LASF145
     /tmp/ccSX9sHX.s:3719   .debug_loc:00000000000002bf .LLST22
     /tmp/ccSX9sHX.s:3726   .debug_loc:00000000000002e2 .LLST23
     /tmp/ccSX9sHX.s:4123   .debug_str:000000000000088c .LASF146
     /tmp/ccSX9sHX.s:3733   .debug_loc:0000000000000305 .LLST24
     /tmp/ccSX9sHX.s:573    .text:0000000000000228 .LVL40
     /tmp/ccSX9sHX.s:588    .text:0000000000000230 .LBB76
     /tmp/ccSX9sHX.s:614    .text:0000000000000244 .LBE76
     /tmp/ccSX9sHX.s:3740   .debug_loc:0000000000000328 .LLST25
     /tmp/ccSX9sHX.s:3747   .debug_loc:000000000000034b .LLST26
     /tmp/ccSX9sHX.s:602    .text:000000000000023c .LVL43
     /tmp/ccSX9sHX.s:617    .text:0000000000000244 .LBB77
     /tmp/ccSX9sHX.s:643    .text:0000000000000258 .LBE77
     /tmp/ccSX9sHX.s:3754   .debug_loc:000000000000036e .LLST27
     /tmp/ccSX9sHX.s:3761   .debug_loc:0000000000000391 .LLST28
GAS LISTING /tmp/ccSX9sHX.s 			page 36


     /tmp/ccSX9sHX.s:631    .text:0000000000000250 .LVL46
     /tmp/ccSX9sHX.s:646    .text:0000000000000258 .LBB78
     /tmp/ccSX9sHX.s:672    .text:000000000000026c .LBE78
     /tmp/ccSX9sHX.s:3768   .debug_loc:00000000000003b4 .LLST29
     /tmp/ccSX9sHX.s:3775   .debug_loc:00000000000003d7 .LLST30
     /tmp/ccSX9sHX.s:660    .text:0000000000000264 .LVL49
     /tmp/ccSX9sHX.s:130    .text:00000000000000a0 .LBB63
     /tmp/ccSX9sHX.s:145    .text:00000000000000ac .LBE63
     /tmp/ccSX9sHX.s:150    .text:00000000000000b0 .LBB65
     /tmp/ccSX9sHX.s:166    .text:00000000000000bc .LBE65
     /tmp/ccSX9sHX.s:261    .text:00000000000000f4 .LBB80
     /tmp/ccSX9sHX.s:272    .text:00000000000000f8 .LBE80
     /tmp/ccSX9sHX.s:3782   .debug_loc:00000000000003fa .LLST31
     /tmp/ccSX9sHX.s:274    .text:00000000000000f8 .LBB82
     /tmp/ccSX9sHX.s:286    .text:00000000000000fc .LBE82
     /tmp/ccSX9sHX.s:3789   .debug_loc:000000000000041d .LLST32
     /tmp/ccSX9sHX.s:443    .text:00000000000001a4 .LVL25
     /tmp/ccSX9sHX.s:722    .text:00000000000002a0 .LBB50
     /tmp/ccSX9sHX.s:794    .text:00000000000002d8 .LBE50
     /tmp/ccSX9sHX.s:724    .text:00000000000002a0 .LBB51
     /tmp/ccSX9sHX.s:740    .text:00000000000002ac .LBE51
     /tmp/ccSX9sHX.s:742    .text:00000000000002ac .LBB53
     /tmp/ccSX9sHX.s:758    .text:00000000000002b8 .LBE53
     /tmp/ccSX9sHX.s:768    .text:00000000000002cc .LBB55
     /tmp/ccSX9sHX.s:779    .text:00000000000002d0 .LBE55
     /tmp/ccSX9sHX.s:3796   .debug_loc:0000000000000440 .LLST1
     /tmp/ccSX9sHX.s:781    .text:00000000000002d0 .LBB57
     /tmp/ccSX9sHX.s:793    .text:00000000000002d8 .LBE57
     /tmp/ccSX9sHX.s:766    .text:00000000000002cc .LVL57
     /tmp/ccSX9sHX.s:68     .text:0000000000000044 .LBB42
     /tmp/ccSX9sHX.s:84     .text:0000000000000050 .LBE42
     /tmp/ccSX9sHX.s:690    .text:000000000000028c .LBB48
     /tmp/ccSX9sHX.s:698    .text:0000000000000290 .LBE48
     /tmp/ccSX9sHX.s:3803   .debug_loc:0000000000000463 .LLST0
     /tmp/ccSX9sHX.s:705    .text:0000000000000294 .LBB59
     /tmp/ccSX9sHX.s:720    .text:00000000000002a0 .LBE59
     /tmp/ccSX9sHX.s:3810   .debug_loc:0000000000000486 .LLST2
     /tmp/ccSX9sHX.s:121    .text:000000000000009c .LVL0
     /tmp/ccSX9sHX.s:10     .text:0000000000000000 .LFB35
     /tmp/ccSX9sHX.s:40     .text:0000000000000020 .LFE35
     /tmp/ccSX9sHX.s:3909   .debug_str:0000000000000213 .LASF165
     /tmp/ccSX9sHX.s:4133   .debug_str:00000000000008c3 .LASF147
     /tmp/ccSX9sHX.s:4031   .debug_str:0000000000000584 .LASF148
     /tmp/ccSX9sHX.s:4169   .debug_str:00000000000009d5 .LASF150
     /tmp/ccSX9sHX.s:4039   .debug_str:00000000000005d5 .LASF149
     /tmp/ccSX9sHX.s:3927   .debug_str:000000000000029f .LASF151
     /tmp/ccSX9sHX.s:3945   .debug_str:0000000000000319 .LASF166
     /tmp/ccSX9sHX.s:3977   .debug_str:0000000000000404 .LASF167
     /tmp/ccSX9sHX.s:3917   .debug_str:000000000000024c .LASF152
     /tmp/ccSX9sHX.s:148    .text:00000000000000b0 .LVL1
     /tmp/ccSX9sHX.s:282    .text:00000000000000fc .LVL9
     /tmp/ccSX9sHX.s:309    .text:0000000000000120 .LVL10
     /tmp/ccSX9sHX.s:670    .text:000000000000026c .LVL50
     /tmp/ccSX9sHX.s:164    .text:00000000000000bc .LVL2
     /tmp/ccSX9sHX.s:174    .text:00000000000000c0 .LVL3
     /tmp/ccSX9sHX.s:180    .text:00000000000000cc .LVL4
     /tmp/ccSX9sHX.s:241    .text:00000000000000e8 .LVL5
GAS LISTING /tmp/ccSX9sHX.s 			page 37


     /tmp/ccSX9sHX.s:254    .text:00000000000000f4 .LVL7
     /tmp/ccSX9sHX.s:326    .text:0000000000000124 .LVL11
     /tmp/ccSX9sHX.s:341    .text:0000000000000134 .LVL13
     /tmp/ccSX9sHX.s:357    .text:0000000000000138 .LVL14
     /tmp/ccSX9sHX.s:415    .text:000000000000018c .LVL22
     /tmp/ccSX9sHX.s:363    .text:000000000000013c .LVL15
     /tmp/ccSX9sHX.s:369    .text:0000000000000140 .LVL16
     /tmp/ccSX9sHX.s:379    .text:0000000000000154 .LVL18
     /tmp/ccSX9sHX.s:396    .text:0000000000000174 .LVL20
     /tmp/ccSX9sHX.s:406    .text:000000000000017c .LVL21
     /tmp/ccSX9sHX.s:435    .text:000000000000019c .LVL24
     /tmp/ccSX9sHX.s:460    .text:00000000000001ac .LVL26
     /tmp/ccSX9sHX.s:524    .text:0000000000000204 .LVL35
     /tmp/ccSX9sHX.s:466    .text:00000000000001b0 .LVL27
     /tmp/ccSX9sHX.s:478    .text:00000000000001b8 .LVL29
     /tmp/ccSX9sHX.s:488    .text:00000000000001cc .LVL31
     /tmp/ccSX9sHX.s:505    .text:00000000000001ec .LVL33
     /tmp/ccSX9sHX.s:515    .text:00000000000001f4 .LVL34
     /tmp/ccSX9sHX.s:537    .text:0000000000000208 .LVL36
     /tmp/ccSX9sHX.s:560    .text:000000000000021c .LVL38
     /tmp/ccSX9sHX.s:567    .text:0000000000000220 .LVL39
     /tmp/ccSX9sHX.s:583    .text:0000000000000230 .LVL41
     /tmp/ccSX9sHX.s:596    .text:0000000000000234 .LVL42
     /tmp/ccSX9sHX.s:612    .text:0000000000000244 .LVL44
     /tmp/ccSX9sHX.s:625    .text:0000000000000248 .LVL45
     /tmp/ccSX9sHX.s:641    .text:0000000000000258 .LVL47
     /tmp/ccSX9sHX.s:654    .text:000000000000025c .LVL48
     /tmp/ccSX9sHX.s:269    .text:00000000000000f8 .LVL8
     /tmp/ccSX9sHX.s:776    .text:00000000000002d0 .LVL58
     /tmp/ccSX9sHX.s:689    .text:000000000000028c .LVL51
     /tmp/ccSX9sHX.s:696    .text:0000000000000290 .LVL52
     /tmp/ccSX9sHX.s:704    .text:0000000000000294 .LVL53
     /tmp/ccSX9sHX.s:717    .text:00000000000002a0 .LVL54
     /tmp/ccSX9sHX.s:810    .debug_info:0000000000000000 .Ldebug_info0
     /tmp/ccSX9sHX.s:128    .text:00000000000000a0 .LBB62
     /tmp/ccSX9sHX.s:287    .text:00000000000000fc .LBE62
     /tmp/ccSX9sHX.s:313    .text:0000000000000120 .LBB85
     /tmp/ccSX9sHX.s:675    .text:000000000000026c .LBE85

UNDEFINED SYMBOLS
console_handler
_Z11__mem_allocm
_Z10__mem_freePv
_Znam
_ZN3TCB12createThreadEPFvPvES0_S0_b
_ZN3TCB10threadExitEv
_ZN3TCB8dispatchEv
_ZN3TCB11threadStartEPS_
_ZN3Sem6__openEPPS_j
_ZN3Sem7__closeEv
_ZN3Sem6__waitEv
_ZN3Sem8__signalEv
_ZN3TCB16timeSliceCounterE
_ZN3TCB7runningE
