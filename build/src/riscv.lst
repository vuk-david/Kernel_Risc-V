GAS LISTING /tmp/cckyFf43.s 			page 1


   1              		.file	"riscv.cpp"
   2              		.option pic
   3              		.option norelax
   4              		.text
   5              	.Ltext0:
   6              		.align	2
   7              		.globl	_ZN5Riscv10popSppSpieEv
   9              	_ZN5Riscv10popSppSpieEv:
  10              	.LFB33:
  11              		.file 1 "src/riscv.cpp"
   1:src/riscv.cpp **** //
   2:src/riscv.cpp **** // Created by marko on 20.4.22..
   3:src/riscv.cpp **** //
   4:src/riscv.cpp **** 
   5:src/riscv.cpp **** #include "../h/riscv.hpp"
   6:src/riscv.cpp **** #include "../h/tcb.hpp"
   7:src/riscv.cpp **** #include "../lib/console.h"
   8:src/riscv.cpp **** #include "../h/print.hpp"
   9:src/riscv.cpp **** #include "../h/syscall_c.h"
  10:src/riscv.cpp **** 
  11:src/riscv.cpp **** using Body = void (*)(void*);
  12:src/riscv.cpp **** 
  13:src/riscv.cpp **** void Riscv::popSppSpie()
  14:src/riscv.cpp **** {
  12              		.loc 1 14 1
  13              		.cfi_startproc
  14 0000 130101FF 		addi	sp,sp,-16
  15              		.cfi_def_cfa_offset 16
  16 0004 23348100 		sd	s0,8(sp)
  17              		.cfi_offset 8, -8
  18 0008 13040101 		addi	s0,sp,16
  19              		.cfi_def_cfa 8, 0
  15:src/riscv.cpp ****     __asm__ volatile("csrw sepc, ra");
  20              		.loc 1 15 5
  21              		.loc 1 15 38 is_stmt 0
  22              	#APP
  23              	# 15 "src/riscv.cpp" 1
  16              	    __asm__ volatile("sret");
  24              		csrw sepc, ra
  25              	# 0 "" 2
  26              		.loc 1 16 5 is_stmt 1
  27              		.loc 1 16 29 is_stmt 0
  28              	# 16 "src/riscv.cpp" 1
  17              	}
  29              		sret
  30              	# 0 "" 2
  31              		.loc 1 17 1
  32              	#NO_APP
  33 0014 03348100 		ld	s0,8(sp)
  34              		.cfi_restore 8
  35              		.cfi_def_cfa 2, 16
  36 0018 13010101 		addi	sp,sp,16
  37              		.cfi_def_cfa_offset 0
  38 001c 67800000 		jr	ra
  39              		.cfi_endproc
  40              	.LFE33:
  42              		.section	.rodata.str1.8,"aMS",@progbits,1
GAS LISTING /tmp/cckyFf43.s 			page 2


  43              		.align	3
  44              	.LC0:
  45 0000 45786974 		.string	"Exiting...\n"
  45      696E672E 
  45      2E2E0A00 
  46              		.text
  47              		.align	2
  48              		.globl	_ZN5Riscv20handleSupervisorTrapEv
  50              	_ZN5Riscv20handleSupervisorTrapEv:
  51              	.LFB34:
  18:src/riscv.cpp **** 
  19:src/riscv.cpp **** void Riscv::handleSupervisorTrap()
  20:src/riscv.cpp **** {
  52              		.loc 1 20 1 is_stmt 1
  53              		.cfi_startproc
  54 0020 130101F9 		addi	sp,sp,-112
  55              		.cfi_def_cfa_offset 112
  56 0024 23341106 		sd	ra,104(sp)
  57 0028 23308106 		sd	s0,96(sp)
  58 002c 233C9104 		sd	s1,88(sp)
  59 0030 23382105 		sd	s2,80(sp)
  60 0034 23343105 		sd	s3,72(sp)
  61 0038 23304105 		sd	s4,64(sp)
  62 003c 233C5103 		sd	s5,56(sp)
  63              		.cfi_offset 1, -8
  64              		.cfi_offset 8, -16
  65              		.cfi_offset 9, -24
  66              		.cfi_offset 18, -32
  67              		.cfi_offset 19, -40
  68              		.cfi_offset 20, -48
  69              		.cfi_offset 21, -56
  70 0040 13040107 		addi	s0,sp,112
  71              		.cfi_def_cfa 8, 0
  21:src/riscv.cpp ****     uint64 scause = r_scause();
  72              		.loc 1 21 5
  73              	.LBB34:
  74              	.LBB35:
  75              		.file 2 "src/../h/riscv.hpp"
   1:src/../h/riscv.hpp **** //
   2:src/../h/riscv.hpp **** // Created by marko on 20.4.22..
   3:src/../h/riscv.hpp **** //
   4:src/../h/riscv.hpp **** 
   5:src/../h/riscv.hpp **** #ifndef OS1_VEZBE07_RISCV_CONTEXT_SWITCH_1_SYNCHRONOUS_RISCV_HPP
   6:src/../h/riscv.hpp **** #define OS1_VEZBE07_RISCV_CONTEXT_SWITCH_1_SYNCHRONOUS_RISCV_HPP
   7:src/../h/riscv.hpp **** 
   8:src/../h/riscv.hpp **** #include "../lib/hw.h"
   9:src/../h/riscv.hpp **** 
  10:src/../h/riscv.hpp **** class Riscv
  11:src/../h/riscv.hpp **** {
  12:src/../h/riscv.hpp **** public:
  13:src/../h/riscv.hpp ****     // pop sstatus.spp and sstatus.spie bits (has to be a non inline function)
  14:src/../h/riscv.hpp ****     static void popSppSpie();
  15:src/../h/riscv.hpp **** 
  16:src/../h/riscv.hpp ****     // push x3..x31 registers onto stack
  17:src/../h/riscv.hpp ****     static void pushRegisters();
  18:src/../h/riscv.hpp **** 
  19:src/../h/riscv.hpp ****     // pop x3..x31 registers onto stack
GAS LISTING /tmp/cckyFf43.s 			page 3


  20:src/../h/riscv.hpp ****     static void popRegisters();
  21:src/../h/riscv.hpp **** 
  22:src/../h/riscv.hpp ****     // read register scause
  23:src/../h/riscv.hpp ****     static uint64 r_scause();
  24:src/../h/riscv.hpp **** 
  25:src/../h/riscv.hpp ****     // write register scause
  26:src/../h/riscv.hpp ****     static void w_scause(uint64 scause);
  27:src/../h/riscv.hpp **** 
  28:src/../h/riscv.hpp ****     // read register sepc
  29:src/../h/riscv.hpp ****     static uint64 r_sepc();
  30:src/../h/riscv.hpp **** 
  31:src/../h/riscv.hpp ****     // write register sepc
  32:src/../h/riscv.hpp ****     static void w_sepc(uint64 sepc);
  33:src/../h/riscv.hpp **** 
  34:src/../h/riscv.hpp ****     // read register stvec
  35:src/../h/riscv.hpp ****     static uint64 r_stvec();
  36:src/../h/riscv.hpp **** 
  37:src/../h/riscv.hpp ****     // write register stvec
  38:src/../h/riscv.hpp ****     static void w_stvec(uint64 stvec);
  39:src/../h/riscv.hpp **** 
  40:src/../h/riscv.hpp ****     // read register stval
  41:src/../h/riscv.hpp ****     static uint64 r_stval();
  42:src/../h/riscv.hpp **** 
  43:src/../h/riscv.hpp ****     // write register stval
  44:src/../h/riscv.hpp ****     static void w_stval(uint64 stval);
  45:src/../h/riscv.hpp **** 
  46:src/../h/riscv.hpp ****     enum BitMaskSip
  47:src/../h/riscv.hpp ****     {
  48:src/../h/riscv.hpp ****         SIP_SSIP = (1 << 1),
  49:src/../h/riscv.hpp ****         SIP_STIP = (1 << 5),
  50:src/../h/riscv.hpp ****         SIP_SEIP = (1 << 9),
  51:src/../h/riscv.hpp ****     };
  52:src/../h/riscv.hpp **** 
  53:src/../h/riscv.hpp ****     // mask set register sip
  54:src/../h/riscv.hpp ****     static void ms_sip(uint64 mask);
  55:src/../h/riscv.hpp **** 
  56:src/../h/riscv.hpp ****     // mask clear register sip
  57:src/../h/riscv.hpp ****     static void mc_sip(uint64 mask);
  58:src/../h/riscv.hpp **** 
  59:src/../h/riscv.hpp ****     // read register sip
  60:src/../h/riscv.hpp ****     static uint64 r_sip();
  61:src/../h/riscv.hpp **** 
  62:src/../h/riscv.hpp ****     // write register sip
  63:src/../h/riscv.hpp ****     static void w_sip(uint64 sip);
  64:src/../h/riscv.hpp **** 
  65:src/../h/riscv.hpp ****     enum BitMaskSstatus
  66:src/../h/riscv.hpp ****     {
  67:src/../h/riscv.hpp ****         SSTATUS_SIE = (1 << 1),
  68:src/../h/riscv.hpp ****         SSTATUS_SPIE = (1 << 5),
  69:src/../h/riscv.hpp ****         SSTATUS_SPP = (1 << 8),
  70:src/../h/riscv.hpp ****     };
  71:src/../h/riscv.hpp **** 
  72:src/../h/riscv.hpp ****     // mask set register sstatus
  73:src/../h/riscv.hpp ****     static void ms_sstatus(uint64 mask);
  74:src/../h/riscv.hpp **** 
  75:src/../h/riscv.hpp ****     // mask clear register sstatus
  76:src/../h/riscv.hpp ****     static void mc_sstatus(uint64 mask);
GAS LISTING /tmp/cckyFf43.s 			page 4


  77:src/../h/riscv.hpp **** 
  78:src/../h/riscv.hpp ****     // read register sstatus
  79:src/../h/riscv.hpp ****     static uint64 r_sstatus();
  80:src/../h/riscv.hpp **** 
  81:src/../h/riscv.hpp ****     // write register sstatus
  82:src/../h/riscv.hpp ****     static void w_sstatus(uint64 sstatus);
  83:src/../h/riscv.hpp **** 
  84:src/../h/riscv.hpp ****     // supervisor trap
  85:src/../h/riscv.hpp ****     static void supervisorTrap();
  86:src/../h/riscv.hpp **** 
  87:src/../h/riscv.hpp **** private:
  88:src/../h/riscv.hpp ****     // supervisor trap handler. Sve vezano za prekid radimo u ovoj funkciji
  89:src/../h/riscv.hpp ****     static void handleSupervisorTrap();
  90:src/../h/riscv.hpp **** 
  91:src/../h/riscv.hpp **** };
  92:src/../h/riscv.hpp **** 
  93:src/../h/riscv.hpp **** inline uint64 Riscv::r_scause()
  94:src/../h/riscv.hpp **** {
  95:src/../h/riscv.hpp ****     uint64 volatile scause;
  76              		.loc 2 95 5
  96:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[scause], scause" : [scause] "=r"(scause));
  77              		.loc 2 96 5
  78              		.loc 2 96 72 is_stmt 0
  79              	#APP
  80              	# 96 "src/../h/riscv.hpp" 1
  97              	    return scause;
  81              		csrr a5, scause
  82              	# 0 "" 2
  83              	#NO_APP
  84 0048 233CF4F8 		sd	a5,-104(s0)
  85              		.loc 2 97 5 is_stmt 1
  86              		.loc 2 97 12 is_stmt 0
  87 004c 033784F9 		ld	a4,-104(s0)
  88              	.LVL0:
  89              	.LBE35:
  90              	.LBE34:
  22:src/riscv.cpp **** 
  23:src/riscv.cpp ****     if (scause == 0x0000000000000008UL || scause == 0x0000000000000009UL)
  91              		.loc 1 23 5 is_stmt 1
  92              	.LBB36:
  93              		.loc 1 23 40 is_stmt 0
  94 0050 930687FF 		addi	a3,a4,-8
  95              		.loc 1 23 5
  96 0054 93071000 		li	a5,1
  97 0058 63F8D702 		bleu	a3,a5,.L19
  98              	.LBE36:
  24:src/riscv.cpp ****     {
  25:src/riscv.cpp ****         // Interrupt: no, cause code: environment code for S-mode(9)
  26:src/riscv.cpp ****         uint64 sepc = r_sepc() + 4;
  27:src/riscv.cpp ****         uint64 sstatus = r_sstatus();
  28:src/riscv.cpp **** 
  29:src/riscv.cpp ****         uint64 number;
  30:src/riscv.cpp ****         int ret;
  31:src/riscv.cpp ****         __asm__ volatile ("mv %0, a0" : "=r" (number));
  32:src/riscv.cpp **** 
  33:src/riscv.cpp ****         switch (number)
  34:src/riscv.cpp ****         {
GAS LISTING /tmp/cckyFf43.s 			page 5


  35:src/riscv.cpp ****             case 0x11:
  36:src/riscv.cpp ****             {
  37:src/riscv.cpp ****                 thread_t *handle;
  38:src/riscv.cpp ****                 Body body;
  39:src/riscv.cpp ****                 void *arg;
  40:src/riscv.cpp ****                 uint64  *stack;
  41:src/riscv.cpp **** 
  42:src/riscv.cpp ****                 __asm__ volatile ("mv %0, a1" : "=r" (handle));
  43:src/riscv.cpp ****                 __asm__ volatile ("mv %0, a2" : "=r" (body));
  44:src/riscv.cpp ****                 __asm__ volatile ("mv %0, a3" : "=r" (arg));
  45:src/riscv.cpp **** 
  46:src/riscv.cpp ****                 if (body != 0)
  47:src/riscv.cpp ****                     stack = (uint64 *)new uint64[DEFAULT_STACK_SIZE];
  48:src/riscv.cpp ****                 else
  49:src/riscv.cpp ****                     stack = 0;
  50:src/riscv.cpp **** 
  51:src/riscv.cpp ****                 *handle = TCB::createThread(body, arg, stack, true);
  52:src/riscv.cpp **** 
  53:src/riscv.cpp **** 
  54:src/riscv.cpp ****                 ret = (*handle) != nullptr ? 0 : -1;
  55:src/riscv.cpp ****                 __asm__ volatile ("mv a0, %0" : : "r" (ret));
  56:src/riscv.cpp **** 
  57:src/riscv.cpp ****                 break;
  58:src/riscv.cpp ****             }
  59:src/riscv.cpp ****             case 0x12:
  60:src/riscv.cpp ****             {
  61:src/riscv.cpp ****                 printString("Exiting...\n");
  62:src/riscv.cpp ****                 ret = TCB::threadExit();
  63:src/riscv.cpp ****                 __asm__ volatile ("mv a0, %0" : : "r" (ret));
  64:src/riscv.cpp **** 
  65:src/riscv.cpp ****                 break;
  66:src/riscv.cpp ****             }
  67:src/riscv.cpp ****             case 0x13:
  68:src/riscv.cpp ****             {
  69:src/riscv.cpp ****                 TCB::dispatch();
  70:src/riscv.cpp **** 
  71:src/riscv.cpp ****                 break;
  72:src/riscv.cpp ****             }
  73:src/riscv.cpp ****             case 0x15:
  74:src/riscv.cpp ****             {
  75:src/riscv.cpp ****                 thread_t *handle;
  76:src/riscv.cpp ****                 __asm__ volatile ("mv %0, a1" : "=r" (handle));
  77:src/riscv.cpp **** 
  78:src/riscv.cpp ****                 TCB::threadStart((TCB*)handle);
  79:src/riscv.cpp ****                 break;
  80:src/riscv.cpp ****             }
  81:src/riscv.cpp **** 
  82:src/riscv.cpp **** 
  83:src/riscv.cpp ****         }
  84:src/riscv.cpp **** 
  85:src/riscv.cpp **** //        TCB::timeSliceCounter = 0;
  86:src/riscv.cpp **** //        TCB::dispatch();
  87:src/riscv.cpp ****         w_sstatus(sstatus);
  88:src/riscv.cpp ****         w_sepc(sepc);
  89:src/riscv.cpp ****     }
  90:src/riscv.cpp ****     else if (scause == 0x8000000000000001UL)
  99              		.loc 1 90 10 is_stmt 1
GAS LISTING /tmp/cckyFf43.s 			page 6


 100              	.LBB71:
 101              	.LBB37:
 102 005c 9307F0FF 		li	a5,-1
 103 0060 9397F703 		slli	a5,a5,63
 104 0064 93871700 		addi	a5,a5,1
 105 0068 6300F712 		beq	a4,a5,.L20
  91:src/riscv.cpp ****     {
  92:src/riscv.cpp ****         // Interrupt: yes, cause code: Software interrupt (timer)
  93:src/riscv.cpp ****         TCB::timeSliceCounter++;
  94:src/riscv.cpp **** 
  95:src/riscv.cpp ****         if (TCB::timeSliceCounter >= TCB::running->getTimeSlice())
  96:src/riscv.cpp ****         {
  97:src/riscv.cpp ****             uint64 sepc = r_sepc();
  98:src/riscv.cpp ****             uint64 sstatus = r_sstatus();
  99:src/riscv.cpp ****             TCB::timeSliceCounter = 0;
 100:src/riscv.cpp ****             TCB::dispatch();
 101:src/riscv.cpp ****             w_sstatus(sstatus);
 102:src/riscv.cpp ****             w_sepc(sepc);
 103:src/riscv.cpp ****         }
 104:src/riscv.cpp **** 
 105:src/riscv.cpp ****         mc_sip(SIP_SSIP);
 106:src/riscv.cpp ****     }
 107:src/riscv.cpp ****     else if (scause == 0x8000000000000009UL)
 106              		.loc 1 107 10
 107 006c 9307F0FF 		li	a5,-1
 108 0070 9397F703 		slli	a5,a5,63
 109 0074 93879700 		addi	a5,a5,9
 110 0078 6318F706 		bne	a4,a5,.L3
 108:src/riscv.cpp ****     {
 109:src/riscv.cpp ****         // Interrupt: yes, cause code: Software external interrupt (console)
 110:src/riscv.cpp ****         console_handler();
 111              		.loc 1 110 9
 112              		.loc 1 110 24 is_stmt 0
 113 007c 97000000 		call	console_handler@plt
 113      E7800000 
 114              	.LVL1:
 115              	.LBE37:
 116              	.LBE71:
 111:src/riscv.cpp ****     }
 112:src/riscv.cpp ****     else
 113:src/riscv.cpp ****     {
 114:src/riscv.cpp ****         // Unexpected trap cause
 115:src/riscv.cpp ****         // print(scause)
 116:src/riscv.cpp ****         // print(sepc)
 117:src/riscv.cpp ****         // print(stvalue)
 118:src/riscv.cpp **** 
 119:src/riscv.cpp ****     }
 120:src/riscv.cpp **** }...
 117              		.loc 1 120 1
 118 0084 6F004006 		j	.L3
 119              	.LVL2:
 120              	.L19:
 121              	.LBB72:
 122              	.LBB54:
  26:src/riscv.cpp ****         uint64 sepc = r_sepc() + 4;
 123              		.loc 1 26 9 is_stmt 1
 124              	.LBB55:
GAS LISTING /tmp/cckyFf43.s 			page 7


 125              	.LBB56:
  98:src/../h/riscv.hpp **** }
  99:src/../h/riscv.hpp **** 
 100:src/../h/riscv.hpp **** inline void Riscv::w_scause(uint64 scause)
 101:src/../h/riscv.hpp **** {
 102:src/../h/riscv.hpp ****     __asm__ volatile ("csrw scause, %[scause]" : : [scause] "r"(scause));
 103:src/../h/riscv.hpp **** }
 104:src/../h/riscv.hpp **** 
 105:src/../h/riscv.hpp **** inline uint64 Riscv::r_sepc()
 106:src/../h/riscv.hpp **** {
 107:src/../h/riscv.hpp ****     uint64 volatile sepc;
 126              		.loc 2 107 5
 108:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[sepc], sepc" : [sepc] "=r"(sepc));
 127              		.loc 2 108 5
 128              		.loc 2 108 64 is_stmt 0
 129              	#APP
 130              	# 108 "src/../h/riscv.hpp" 1
 109              	    return sepc;
 131              		csrr a5, sepc
 132              	# 0 "" 2
 133              	#NO_APP
 134 008c 2334F4FA 		sd	a5,-88(s0)
 135              		.loc 2 109 5 is_stmt 1
 136              		.loc 2 109 12 is_stmt 0
 137 0090 833484FA 		ld	s1,-88(s0)
 138              	.LBE56:
 139              	.LBE55:
  26:src/riscv.cpp ****         uint64 sepc = r_sepc() + 4;
 140              		.loc 1 26 34
 141 0094 93844400 		addi	s1,s1,4
 142              	.LVL3:
  27:src/riscv.cpp ****         uint64 sstatus = r_sstatus();
 143              		.loc 1 27 9 is_stmt 1
 144              	.LBB57:
 145              	.LBB58:
 110:src/../h/riscv.hpp **** }
 111:src/../h/riscv.hpp **** 
 112:src/../h/riscv.hpp **** inline void Riscv::w_sepc(uint64 sepc)
 113:src/../h/riscv.hpp **** {
 114:src/../h/riscv.hpp ****     __asm__ volatile ("csrw sepc, %[sepc]" : : [sepc] "r"(sepc));
 115:src/../h/riscv.hpp **** }
 116:src/../h/riscv.hpp **** 
 117:src/../h/riscv.hpp **** inline uint64 Riscv::r_stvec()
 118:src/../h/riscv.hpp **** {
 119:src/../h/riscv.hpp ****     uint64 volatile stvec;
 120:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[stvec], stvec" : [stvec] "=r"(stvec));
 121:src/../h/riscv.hpp ****     return stvec;
 122:src/../h/riscv.hpp **** }
 123:src/../h/riscv.hpp **** 
 124:src/../h/riscv.hpp **** inline void Riscv::w_stvec(uint64 stvec)
 125:src/../h/riscv.hpp **** {
 126:src/../h/riscv.hpp ****     __asm__ volatile ("csrw stvec, %[stvec]" : : [stvec] "r"(stvec));
 127:src/../h/riscv.hpp **** }
 128:src/../h/riscv.hpp **** 
 129:src/../h/riscv.hpp **** inline uint64 Riscv::r_stval()
 130:src/../h/riscv.hpp **** {
 131:src/../h/riscv.hpp ****     uint64 volatile stval;
GAS LISTING /tmp/cckyFf43.s 			page 8


 132:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[stval], stval" : [stval] "=r"(stval));
 133:src/../h/riscv.hpp ****     return stval;
 134:src/../h/riscv.hpp **** }
 135:src/../h/riscv.hpp **** 
 136:src/../h/riscv.hpp **** inline void Riscv::w_stval(uint64 stval)
 137:src/../h/riscv.hpp **** {
 138:src/../h/riscv.hpp ****     __asm__ volatile ("csrw stval, %[stval]" : : [stval] "r"(stval));
 139:src/../h/riscv.hpp **** }
 140:src/../h/riscv.hpp **** 
 141:src/../h/riscv.hpp **** inline void Riscv::ms_sip(uint64 mask)
 142:src/../h/riscv.hpp **** {
 143:src/../h/riscv.hpp ****     __asm__ volatile ("csrs sip, %[mask]" : : [mask] "r"(mask));
 144:src/../h/riscv.hpp **** }
 145:src/../h/riscv.hpp **** 
 146:src/../h/riscv.hpp **** inline void Riscv::mc_sip(uint64 mask)
 147:src/../h/riscv.hpp **** {
 148:src/../h/riscv.hpp ****     __asm__ volatile ("csrc sip, %[mask]" : : [mask] "r"(mask));
 149:src/../h/riscv.hpp **** }
 150:src/../h/riscv.hpp **** 
 151:src/../h/riscv.hpp **** inline uint64 Riscv::r_sip()
 152:src/../h/riscv.hpp **** {
 153:src/../h/riscv.hpp ****     uint64 volatile sip;
 154:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[sip], sip" : [sip] "=r"(sip));
 155:src/../h/riscv.hpp ****     return sip;
 156:src/../h/riscv.hpp **** }
 157:src/../h/riscv.hpp **** 
 158:src/../h/riscv.hpp **** inline void Riscv::w_sip(uint64 sip)
 159:src/../h/riscv.hpp **** {
 160:src/../h/riscv.hpp ****     __asm__ volatile ("csrw sip, %[sip]" : : [sip] "r"(sip));
 161:src/../h/riscv.hpp **** }
 162:src/../h/riscv.hpp **** 
 163:src/../h/riscv.hpp **** inline void Riscv::ms_sstatus(uint64 mask)
 164:src/../h/riscv.hpp **** {
 165:src/../h/riscv.hpp ****     __asm__ volatile ("csrs sstatus, %[mask]" : : [mask] "r"(mask));
 166:src/../h/riscv.hpp **** }
 167:src/../h/riscv.hpp **** 
 168:src/../h/riscv.hpp **** inline void Riscv::mc_sstatus(uint64 mask)
 169:src/../h/riscv.hpp **** {
 170:src/../h/riscv.hpp ****     __asm__ volatile ("csrc sstatus, %[mask]" : : [mask] "r"(mask));
 171:src/../h/riscv.hpp **** }
 172:src/../h/riscv.hpp **** 
 173:src/../h/riscv.hpp **** inline uint64 Riscv::r_sstatus()
 174:src/../h/riscv.hpp **** {
 175:src/../h/riscv.hpp ****     uint64 volatile sstatus;
 146              		.loc 2 175 5
 176:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[sstatus], sstatus" : [sstatus] "=r"(sstatus));
 147              		.loc 2 176 5
 148              		.loc 2 176 76 is_stmt 0
 149              	#APP
 150              	# 176 "src/../h/riscv.hpp" 1
 177              	    return sstatus;
 151              		csrr a5, sstatus
 152              	# 0 "" 2
 153              	#NO_APP
 154 009c 2330F4FA 		sd	a5,-96(s0)
 155              		.loc 2 177 5 is_stmt 1
 156              		.loc 2 177 12 is_stmt 0
GAS LISTING /tmp/cckyFf43.s 			page 9


 157 00a0 033904FA 		ld	s2,-96(s0)
 158              	.LVL4:
 159              	.LBE58:
 160              	.LBE57:
  29:src/riscv.cpp ****         uint64 number;
 161              		.loc 1 29 9 is_stmt 1
  30:src/riscv.cpp ****         int ret;
 162              		.loc 1 30 9
  31:src/riscv.cpp ****         __asm__ volatile ("mv %0, a0" : "=r" (number));
 163              		.loc 1 31 9
  31:src/riscv.cpp ****         __asm__ volatile ("mv %0, a0" : "=r" (number));
 164              		.loc 1 31 55 is_stmt 0
 165              	#APP
 166              	# 31 "src/riscv.cpp" 1
 167              		mv a5, a0
 168              	# 0 "" 2
 169              	.LVL5:
  33:src/riscv.cpp ****         switch (number)
 170              		.loc 1 33 9 is_stmt 1
 171              	#NO_APP
 172              	.LBB59:
 173 00a8 13073001 		li	a4,19
 174              	.LVL6:
 175 00ac 6388E70C 		beq	a5,a4,.L5
 176 00b0 636EF704 		bgtu	a5,a4,.L6
 177 00b4 13071001 		li	a4,17
 178 00b8 6386E706 		beq	a5,a4,.L7
 179 00bc 13072001 		li	a4,18
 180 00c0 6390E702 		bne	a5,a4,.L9
 181              	.LBB60:
  59:src/riscv.cpp ****             case 0x12:
 182              		.loc 1 59 13
  60:src/riscv.cpp ****             {
 183              		.loc 1 60 13
  61:src/riscv.cpp ****                 printString("Exiting...\n");
 184              		.loc 1 61 17
  61:src/riscv.cpp ****                 printString("Exiting...\n");
 185              		.loc 1 61 28 is_stmt 0
 186 00c4 17050000 		lla	a0,.LC0
 186      13050500 
 187 00cc 97000000 		call	_Z11printStringPKc@plt
 187      E7800000 
 188              	.LVL7:
  62:src/riscv.cpp ****                 ret = TCB::threadExit();
 189              		.loc 1 62 17 is_stmt 1
  62:src/riscv.cpp ****                 ret = TCB::threadExit();
 190              		.loc 1 62 38 is_stmt 0
 191 00d4 97000000 		call	_ZN3TCB10threadExitEv@plt
 191      E7800000 
 192              	.LVL8:
  63:src/riscv.cpp ****                 __asm__ volatile ("mv a0, %0" : : "r" (ret));
 193              		.loc 1 63 17 is_stmt 1
  63:src/riscv.cpp ****                 __asm__ volatile ("mv a0, %0" : : "r" (ret));
 194              		.loc 1 63 61 is_stmt 0
 195              	#APP
 196              	# 63 "src/riscv.cpp" 1
  65:src/riscv.cpp ****                 break;
GAS LISTING /tmp/cckyFf43.s 			page 10


 197              		mv a0, a0
 198              	# 0 "" 2
 199              		.loc 1 65 17 is_stmt 1
 200              	.LVL9:
 201              	#NO_APP
 202              	.L9:
 203              	.LBE60:
 204              	.LBE59:
  87:src/riscv.cpp ****         w_sstatus(sstatus);
 205              		.loc 1 87 9
 206              	.LBB64:
 207              	.LBB65:
 178:src/../h/riscv.hpp **** }
 179:src/../h/riscv.hpp **** 
 180:src/../h/riscv.hpp **** inline void Riscv::w_sstatus(uint64 sstatus)
 181:src/../h/riscv.hpp **** {
 182:src/../h/riscv.hpp ****     __asm__ volatile ("csrw sstatus, %[sstatus]" : : [sstatus] "r"(sstatus));
 208              		.loc 2 182 5
 209              		.loc 2 182 77 is_stmt 0
 210              	#APP
 211              	# 182 "src/../h/riscv.hpp" 1
 183              	}
 212              		csrw sstatus, s2
 213              	# 0 "" 2
 214              	.LVL10:
 215              	#NO_APP
 216              	.LBE65:
 217              	.LBE64:
  88:src/riscv.cpp ****         w_sepc(sepc);
 218              		.loc 1 88 9 is_stmt 1
 219              	.LBB66:
 220              	.LBB67:
 114:src/../h/riscv.hpp **** }
 221              		.loc 2 114 5
 114:src/../h/riscv.hpp **** }
 222              		.loc 2 114 65 is_stmt 0
 223              	#APP
 224              	# 114 "src/../h/riscv.hpp" 1
 225              		csrw sepc, s1
 226              	# 0 "" 2
 227              	.LVL11:
 228              	#NO_APP
 229              	.L3:
 230              	.LBE67:
 231              	.LBE66:
 232              	.LBE54:
 233              	.LBE72:
 234              		.loc 1 120 1
 235 00e8 83308106 		ld	ra,104(sp)
 236              		.cfi_remember_state
 237              		.cfi_restore 1
 238 00ec 03340106 		ld	s0,96(sp)
 239              		.cfi_restore 8
 240              		.cfi_def_cfa 2, 112
 241 00f0 83348105 		ld	s1,88(sp)
 242              		.cfi_restore 9
 243 00f4 03390105 		ld	s2,80(sp)
GAS LISTING /tmp/cckyFf43.s 			page 11


 244              		.cfi_restore 18
 245 00f8 83398104 		ld	s3,72(sp)
 246              		.cfi_restore 19
 247 00fc 033A0104 		ld	s4,64(sp)
 248              		.cfi_restore 20
 249 0100 833A8103 		ld	s5,56(sp)
 250              		.cfi_restore 21
 251 0104 13010107 		addi	sp,sp,112
 252              		.cfi_def_cfa_offset 0
 253 0108 67800000 		jr	ra
 254              	.LVL12:
 255              	.L6:
 256              		.cfi_restore_state
 257              	.LBB73:
 258              	.LBB69:
 259              	.LBB68:
  33:src/riscv.cpp ****         switch (number)
 260              		.loc 1 33 9
 261 010c 13075001 		li	a4,21
 262 0110 E398E7FC 		bne	a5,a4,.L9
 263              	.LBB63:
  73:src/riscv.cpp ****             case 0x15:
 264              		.loc 1 73 13 is_stmt 1
  74:src/riscv.cpp ****             {
 265              		.loc 1 74 13
 266              	.LBB61:
  75:src/riscv.cpp ****                 thread_t *handle;
 267              		.loc 1 75 17
  76:src/riscv.cpp ****                 __asm__ volatile ("mv %0, a1" : "=r" (handle));
 268              		.loc 1 76 17
  76:src/riscv.cpp ****                 __asm__ volatile ("mv %0, a1" : "=r" (handle));
 269              		.loc 1 76 63 is_stmt 0
 270              	#APP
 271              	# 76 "src/riscv.cpp" 1
 272              		mv a0, a1
 273              	# 0 "" 2
 274              	.LVL13:
  78:src/riscv.cpp ****                 TCB::threadStart((TCB*)handle);
 275              		.loc 1 78 17 is_stmt 1
  78:src/riscv.cpp ****                 TCB::threadStart((TCB*)handle);
 276              		.loc 1 78 33 is_stmt 0
 277              	#NO_APP
 278 0118 97000000 		call	_ZN3TCB11threadStartEPS_@plt
 278      E7800000 
 279              	.LVL14:
  79:src/riscv.cpp ****                 break;
 280              		.loc 1 79 17 is_stmt 1
 281 0120 6FF01FFC 		j	.L9
 282              	.LVL15:
 283              	.L7:
 284              	.LBE61:
  35:src/riscv.cpp ****             case 0x11:
 285              		.loc 1 35 13
  36:src/riscv.cpp ****             {
 286              		.loc 1 36 13
 287              	.LBB62:
  37:src/riscv.cpp ****                 thread_t *handle;
GAS LISTING /tmp/cckyFf43.s 			page 12


 288              		.loc 1 37 17
  38:src/riscv.cpp ****                 Body body;
 289              		.loc 1 38 17
  39:src/riscv.cpp ****                 void *arg;
 290              		.loc 1 39 17
  40:src/riscv.cpp ****                 uint64  *stack;
 291              		.loc 1 40 17
  42:src/riscv.cpp ****                 __asm__ volatile ("mv %0, a1" : "=r" (handle));
 292              		.loc 1 42 17
  42:src/riscv.cpp ****                 __asm__ volatile ("mv %0, a1" : "=r" (handle));
 293              		.loc 1 42 63 is_stmt 0
 294              	#APP
 295              	# 42 "src/riscv.cpp" 1
 296              		mv s4, a1
 297              	# 0 "" 2
 298              	.LVL16:
  43:src/riscv.cpp ****                 __asm__ volatile ("mv %0, a2" : "=r" (body));
 299              		.loc 1 43 17 is_stmt 1
  43:src/riscv.cpp ****                 __asm__ volatile ("mv %0, a2" : "=r" (body));
 300              		.loc 1 43 61 is_stmt 0
 301              	# 43 "src/riscv.cpp" 1
 302              		mv s3, a2
 303              	# 0 "" 2
 304              	.LVL17:
  44:src/riscv.cpp ****                 __asm__ volatile ("mv %0, a3" : "=r" (arg));
 305              		.loc 1 44 17 is_stmt 1
  44:src/riscv.cpp ****                 __asm__ volatile ("mv %0, a3" : "=r" (arg));
 306              		.loc 1 44 60 is_stmt 0
 307              	# 44 "src/riscv.cpp" 1
 308              		mv s5, a3
 309              	# 0 "" 2
 310              	.LVL18:
  46:src/riscv.cpp ****                 if (body != 0)
 311              		.loc 1 46 17 is_stmt 1
 312              	#NO_APP
 313 0130 638E0902 		beqz	s3,.L16
  47:src/riscv.cpp ****                     stack = (uint64 *)new uint64[DEFAULT_STACK_SIZE];
 314              		.loc 1 47 21
  47:src/riscv.cpp ****                     stack = (uint64 *)new uint64[DEFAULT_STACK_SIZE];
 315              		.loc 1 47 68 is_stmt 0
 316 0134 37850000 		li	a0,32768
 317 0138 97000000 		call	_Znam@plt
 317      E7800000 
 318              	.LVL19:
 319 0140 13060500 		mv	a2,a0
 320              	.LVL20:
 321              	.L11:
  51:src/riscv.cpp ****                 *handle = TCB::createThread(body, arg, stack, true);
 322              		.loc 1 51 17 is_stmt 1
  51:src/riscv.cpp ****                 *handle = TCB::createThread(body, arg, stack, true);
 323              		.loc 1 51 44 is_stmt 0
 324 0144 93061000 		li	a3,1
 325 0148 93850A00 		mv	a1,s5
 326 014c 13850900 		mv	a0,s3
 327 0150 97000000 		call	_ZN3TCB12createThreadEPFvPvES0_S0_b@plt
 327      E7800000 
 328              	.LVL21:
GAS LISTING /tmp/cckyFf43.s 			page 13


  51:src/riscv.cpp ****                 *handle = TCB::createThread(body, arg, stack, true);
 329              		.loc 1 51 25
 330 0158 2330AA00 		sd	a0,0(s4)
  54:src/riscv.cpp ****                 ret = (*handle) != nullptr ? 0 : -1;
 331              		.loc 1 54 17 is_stmt 1
  54:src/riscv.cpp ****                 ret = (*handle) != nullptr ? 0 : -1;
 332              		.loc 1 54 44 is_stmt 0
 333 015c 630C0500 		beqz	a0,.L17
 334 0160 93070000 		li	a5,0
 335              	.L12:
 336              	.LVL22:
  55:src/riscv.cpp ****                 __asm__ volatile ("mv a0, %0" : : "r" (ret));
 337              		.loc 1 55 17 is_stmt 1 discriminator 4
  55:src/riscv.cpp ****                 __asm__ volatile ("mv a0, %0" : : "r" (ret));
 338              		.loc 1 55 61 is_stmt 0 discriminator 4
 339              	#APP
 340              	# 55 "src/riscv.cpp" 1
  57:src/riscv.cpp ****                 break;
 341              		mv a0, a5
 342              	# 0 "" 2
 343              		.loc 1 57 17 is_stmt 1 discriminator 4
 344              	#NO_APP
 345 0168 6FF09FF7 		j	.L9
 346              	.LVL23:
 347              	.L16:
  49:src/riscv.cpp ****                     stack = 0;
 348              		.loc 1 49 27 is_stmt 0
 349 016c 13060000 		li	a2,0
 350 0170 6FF05FFD 		j	.L11
 351              	.LVL24:
 352              	.L17:
  54:src/riscv.cpp ****                 ret = (*handle) != nullptr ? 0 : -1;
 353              		.loc 1 54 44
 354 0174 9307F0FF 		li	a5,-1
 355 0178 6FF0DFFE 		j	.L12
 356              	.LVL25:
 357              	.L5:
 358              	.LBE62:
  67:src/riscv.cpp ****             case 0x13:
 359              		.loc 1 67 13 is_stmt 1
  68:src/riscv.cpp ****             {
 360              		.loc 1 68 13
  69:src/riscv.cpp ****                 TCB::dispatch();
 361              		.loc 1 69 17
  69:src/riscv.cpp ****                 TCB::dispatch();
 362              		.loc 1 69 30 is_stmt 0
 363 017c 97000000 		call	_ZN3TCB8dispatchEv@plt
 363      E7800000 
 364              	.LVL26:
  71:src/riscv.cpp ****                 break;
 365              		.loc 1 71 17 is_stmt 1
 366 0184 6FF0DFF5 		j	.L9
 367              	.LVL27:
 368              	.L20:
 369              	.LBE63:
 370              	.LBE68:
 371              	.LBE69:
GAS LISTING /tmp/cckyFf43.s 			page 14


 372              	.LBB70:
 373              	.LBB38:
  93:src/riscv.cpp ****         TCB::timeSliceCounter++;
 374              		.loc 1 93 9
  93:src/riscv.cpp ****         TCB::timeSliceCounter++;
 375              		.loc 1 93 30 is_stmt 0
 376 0188 17070000 		la	a4,_ZN3TCB16timeSliceCounterE
 376      03370700 
 377              	.LVL28:
 378 0190 83370700 		ld	a5,0(a4)
 379 0194 93871700 		addi	a5,a5,1
 380 0198 2330F700 		sd	a5,0(a4)
  95:src/riscv.cpp ****         if (TCB::timeSliceCounter >= TCB::running->getTimeSlice())
 381              		.loc 1 95 9 is_stmt 1
 382              	.LBB39:
  95:src/riscv.cpp ****         if (TCB::timeSliceCounter >= TCB::running->getTimeSlice())
 383              		.loc 1 95 64 is_stmt 0
 384 019c 17070000 		la	a4,_ZN3TCB7runningE
 384      03370700 
 385 01a4 03370700 		ld	a4,0(a4)
 386              	.LVL29:
 387              	.LBB40:
 388              	.LBB41:
 389              		.file 3 "src/../h/tcb.hpp"
   1:src/../h/tcb.hpp **** //
   2:src/../h/tcb.hpp **** // Created by os on 2/11/23.
   3:src/../h/tcb.hpp **** //
   4:src/../h/tcb.hpp **** 
   5:src/../h/tcb.hpp **** #ifndef PROJECT_BASE_TCB_HPP
   6:src/../h/tcb.hpp **** #define PROJECT_BASE_TCB_HPP
   7:src/../h/tcb.hpp **** 
   8:src/../h/tcb.hpp **** #include "../lib/hw.h"
   9:src/../h/tcb.hpp **** #include "scheduler.hpp"
  10:src/../h/tcb.hpp **** 
  11:src/../h/tcb.hpp **** // Thread Control Block
  12:src/../h/tcb.hpp **** class TCB {
  13:src/../h/tcb.hpp **** public:
  14:src/../h/tcb.hpp ****     ~TCB() { delete[] stack; }
  15:src/../h/tcb.hpp **** 
  16:src/../h/tcb.hpp ****     bool isFinished() const { return finished; }
  17:src/../h/tcb.hpp **** 
  18:src/../h/tcb.hpp ****     void setFinished(bool value) { finished = value; }
  19:src/../h/tcb.hpp **** 
  20:src/../h/tcb.hpp ****     uint64 getTimeSlice() const { return timeSlice; }
 390              		.loc 3 20 35 is_stmt 1
 391              		.loc 3 20 42 is_stmt 0
 392 01a8 03378702 		ld	a4,40(a4)
 393              	.LVL30:
 394              	.LBE41:
 395              	.LBE40:
  95:src/riscv.cpp ****         if (TCB::timeSliceCounter >= TCB::running->getTimeSlice())
 396              		.loc 1 95 9
 397 01ac 63F8E700 		bgeu	a5,a4,.L21
 398              	.LVL31:
 399              	.L15:
 400              	.LBE39:
 105:src/riscv.cpp ****         mc_sip(SIP_SSIP);
GAS LISTING /tmp/cckyFf43.s 			page 15


 401              		.loc 1 105 9 is_stmt 1
 402              	.LBB51:
 403              	.LBB52:
 148:src/../h/riscv.hpp **** }
 404              		.loc 2 148 5
 148:src/../h/riscv.hpp **** }
 405              		.loc 2 148 64 is_stmt 0
 406 01b0 93072000 		li	a5,2
 407              	#APP
 408              	# 148 "src/../h/riscv.hpp" 1
 149:src/../h/riscv.hpp **** 
 409              		csrc sip, a5
 410              	# 0 "" 2
 411              		.loc 2 149 1
 412              	#NO_APP
 413 01b8 6FF01FF3 		j	.L3
 414              	.LVL32:
 415              	.L21:
 416              	.LBE52:
 417              	.LBE51:
 418              	.LBB53:
 419              	.LBB42:
  97:src/riscv.cpp ****             uint64 sepc = r_sepc();
 420              		.loc 1 97 13 is_stmt 1
 421              	.LBB43:
 422              	.LBB44:
 107:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[sepc], sepc" : [sepc] "=r"(sepc));
 423              		.loc 2 107 5
 108:src/../h/riscv.hpp ****     return sepc;
 424              		.loc 2 108 5
 108:src/../h/riscv.hpp ****     return sepc;
 425              		.loc 2 108 64 is_stmt 0
 426              	#APP
 427              	# 108 "src/../h/riscv.hpp" 1
 428              		csrr a5, sepc
 429              	# 0 "" 2
 430              	#NO_APP
 431 01c0 233CF4FA 		sd	a5,-72(s0)
 109:src/../h/riscv.hpp **** }
 432              		.loc 2 109 5 is_stmt 1
 109:src/../h/riscv.hpp **** }
 433              		.loc 2 109 12 is_stmt 0
 434 01c4 833484FB 		ld	s1,-72(s0)
 435              	.LVL33:
 436              	.LBE44:
 437              	.LBE43:
  98:src/riscv.cpp ****             uint64 sstatus = r_sstatus();
 438              		.loc 1 98 13 is_stmt 1
 439              	.LBB45:
 440              	.LBB46:
 175:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[sstatus], sstatus" : [sstatus] "=r"(sstatus));
 441              		.loc 2 175 5
 176:src/../h/riscv.hpp ****     return sstatus;
 442              		.loc 2 176 5
 176:src/../h/riscv.hpp ****     return sstatus;
 443              		.loc 2 176 76 is_stmt 0
 444              	#APP
GAS LISTING /tmp/cckyFf43.s 			page 16


 445              	# 176 "src/../h/riscv.hpp" 1
 446              		csrr a5, sstatus
 447              	# 0 "" 2
 448              	#NO_APP
 449 01cc 2338F4FA 		sd	a5,-80(s0)
 177:src/../h/riscv.hpp **** }
 450              		.loc 2 177 5 is_stmt 1
 177:src/../h/riscv.hpp **** }
 451              		.loc 2 177 12 is_stmt 0
 452 01d0 033904FB 		ld	s2,-80(s0)
 453              	.LVL34:
 454              	.LBE46:
 455              	.LBE45:
  99:src/riscv.cpp ****             TCB::timeSliceCounter = 0;
 456              		.loc 1 99 13 is_stmt 1
  99:src/riscv.cpp ****             TCB::timeSliceCounter = 0;
 457              		.loc 1 99 35 is_stmt 0
 458 01d4 97070000 		la	a5,_ZN3TCB16timeSliceCounterE
 458      83B70700 
 459 01dc 23B00700 		sd	zero,0(a5)
 100:src/riscv.cpp ****             TCB::dispatch();
 460              		.loc 1 100 13 is_stmt 1
 100:src/riscv.cpp ****             TCB::dispatch();
 461              		.loc 1 100 26 is_stmt 0
 462 01e0 97000000 		call	_ZN3TCB8dispatchEv@plt
 462      E7800000 
 463              	.LVL35:
 101:src/riscv.cpp ****             w_sstatus(sstatus);
 464              		.loc 1 101 13 is_stmt 1
 465              	.LBB47:
 466              	.LBB48:
 182:src/../h/riscv.hpp **** }
 467              		.loc 2 182 5
 182:src/../h/riscv.hpp **** }
 468              		.loc 2 182 77 is_stmt 0
 469              	#APP
 470              	# 182 "src/../h/riscv.hpp" 1
 471              		csrw sstatus, s2
 472              	# 0 "" 2
 473              	.LVL36:
 474              	#NO_APP
 475              	.LBE48:
 476              	.LBE47:
 102:src/riscv.cpp ****             w_sepc(sepc);
 477              		.loc 1 102 13 is_stmt 1
 478              	.LBB49:
 479              	.LBB50:
 114:src/../h/riscv.hpp **** }
 480              		.loc 2 114 5
 114:src/../h/riscv.hpp **** }
 481              		.loc 2 114 65 is_stmt 0
 482              	#APP
 483              	# 114 "src/../h/riscv.hpp" 1
 115:src/../h/riscv.hpp **** 
 484              		csrw sepc, s1
 485              	# 0 "" 2
 486              		.loc 2 115 1
GAS LISTING /tmp/cckyFf43.s 			page 17


 487              	#NO_APP
 488 01f0 6FF01FFC 		j	.L15
 489              	.LBE50:
 490              	.LBE49:
 491              	.LBE42:
 492              	.LBE53:
 493              	.LBE38:
 494              	.LBE70:
 495              	.LBE73:
 496              		.cfi_endproc
 497              	.LFE34:
 499              	.Letext0:
 500              		.file 4 "src/../h/../lib/hw.h"
 501              		.file 5 "src/../h/syscall_c.h"
 502              		.file 6 "src/../h/print.hpp"
 503              		.file 7 "src/../lib/console.h"
GAS LISTING /tmp/cckyFf43.s 			page 18


DEFINED SYMBOLS
                            *ABS*:0000000000000000 riscv.cpp
     /tmp/cckyFf43.s:9      .text:0000000000000000 _ZN5Riscv10popSppSpieEv
     /tmp/cckyFf43.s:13     .text:0000000000000000 .L0 
     /tmp/cckyFf43.s:14     .text:0000000000000000 .L0 
     /tmp/cckyFf43.s:15     .text:0000000000000004 .L0 
     /tmp/cckyFf43.s:17     .text:0000000000000008 .L0 
     /tmp/cckyFf43.s:19     .text:000000000000000c .L0 
     /tmp/cckyFf43.s:21     .text:000000000000000c .L0 
       src/riscv.cpp:15     .text:000000000000000c .L0 
     /tmp/cckyFf43.s:27     .text:0000000000000010 .L0 
       src/riscv.cpp:16     .text:0000000000000010 .L0 
     /tmp/cckyFf43.s:33     .text:0000000000000014 .L0 
     /tmp/cckyFf43.s:34     .text:0000000000000018 .L0 
     /tmp/cckyFf43.s:35     .text:0000000000000018 .L0 
     /tmp/cckyFf43.s:37     .text:000000000000001c .L0 
     /tmp/cckyFf43.s:39     .text:0000000000000020 .L0 
     /tmp/cckyFf43.s:50     .text:0000000000000020 _ZN5Riscv20handleSupervisorTrapEv
     /tmp/cckyFf43.s:53     .text:0000000000000020 .L0 
     /tmp/cckyFf43.s:54     .text:0000000000000020 .L0 
     /tmp/cckyFf43.s:55     .text:0000000000000024 .L0 
     /tmp/cckyFf43.s:63     .text:0000000000000040 .L0 
     /tmp/cckyFf43.s:64     .text:0000000000000040 .L0 
     /tmp/cckyFf43.s:65     .text:0000000000000040 .L0 
     /tmp/cckyFf43.s:66     .text:0000000000000040 .L0 
     /tmp/cckyFf43.s:67     .text:0000000000000040 .L0 
     /tmp/cckyFf43.s:68     .text:0000000000000040 .L0 
     /tmp/cckyFf43.s:69     .text:0000000000000040 .L0 
     /tmp/cckyFf43.s:71     .text:0000000000000044 .L0 
     /tmp/cckyFf43.s:76     .text:0000000000000044 .L0 
     /tmp/cckyFf43.s:77     .text:0000000000000044 .L0 
     /tmp/cckyFf43.s:78     .text:0000000000000044 .L0 
  src/../h/riscv.hpp:96     .text:0000000000000044 .L0 
     /tmp/cckyFf43.s:86     .text:000000000000004c .L0 
     /tmp/cckyFf43.s:87     .text:000000000000004c .L0 
     /tmp/cckyFf43.s:93     .text:0000000000000050 .L0 
     /tmp/cckyFf43.s:94     .text:0000000000000050 .L0 
     /tmp/cckyFf43.s:96     .text:0000000000000054 .L0 
     /tmp/cckyFf43.s:102    .text:000000000000005c .L0 
     /tmp/cckyFf43.s:107    .text:000000000000006c .L0 
     /tmp/cckyFf43.s:112    .text:000000000000007c .L0 
     /tmp/cckyFf43.s:113    .text:000000000000007c .L0 
     /tmp/cckyFf43.s:118    .text:0000000000000084 .L0 
     /tmp/cckyFf43.s:126    .text:0000000000000088 .L0 
     /tmp/cckyFf43.s:127    .text:0000000000000088 .L0 
     /tmp/cckyFf43.s:128    .text:0000000000000088 .L0 
  src/../h/riscv.hpp:108    .text:0000000000000088 .L0 
     /tmp/cckyFf43.s:136    .text:0000000000000090 .L0 
     /tmp/cckyFf43.s:137    .text:0000000000000090 .L0 
     /tmp/cckyFf43.s:141    .text:0000000000000094 .L0 
     /tmp/cckyFf43.s:146    .text:0000000000000098 .L0 
     /tmp/cckyFf43.s:147    .text:0000000000000098 .L0 
     /tmp/cckyFf43.s:148    .text:0000000000000098 .L0 
  src/../h/riscv.hpp:176    .text:0000000000000098 .L0 
     /tmp/cckyFf43.s:156    .text:00000000000000a0 .L0 
     /tmp/cckyFf43.s:157    .text:00000000000000a0 .L0 
     /tmp/cckyFf43.s:162    .text:00000000000000a4 .L0 
GAS LISTING /tmp/cckyFf43.s 			page 19


     /tmp/cckyFf43.s:163    .text:00000000000000a4 .L0 
     /tmp/cckyFf43.s:164    .text:00000000000000a4 .L0 
       src/riscv.cpp:31     .text:00000000000000a4 .L0 
     /tmp/cckyFf43.s:173    .text:00000000000000a8 .L0 
     /tmp/cckyFf43.s:183    .text:00000000000000c4 .L0 
     /tmp/cckyFf43.s:184    .text:00000000000000c4 .L0 
     /tmp/cckyFf43.s:185    .text:00000000000000c4 .L0 
     /tmp/cckyFf43.s:186    .text:00000000000000c4 .L0 
     /tmp/cckyFf43.s:190    .text:00000000000000d4 .L0 
     /tmp/cckyFf43.s:191    .text:00000000000000d4 .L0 
     /tmp/cckyFf43.s:194    .text:00000000000000dc .L0 
       src/riscv.cpp:63     .text:00000000000000dc .L0 
     /tmp/cckyFf43.s:205    .text:00000000000000e0 .L0 
     /tmp/cckyFf43.s:208    .text:00000000000000e0 .L0 
     /tmp/cckyFf43.s:209    .text:00000000000000e0 .L0 
  src/../h/riscv.hpp:182    .text:00000000000000e0 .L0 
     /tmp/cckyFf43.s:221    .text:00000000000000e4 .L0 
     /tmp/cckyFf43.s:222    .text:00000000000000e4 .L0 
  src/../h/riscv.hpp:114    .text:00000000000000e4 .L0 
     /tmp/cckyFf43.s:235    .text:00000000000000e8 .L0 
     /tmp/cckyFf43.s:236    .text:00000000000000ec .L0 
     /tmp/cckyFf43.s:237    .text:00000000000000ec .L0 
     /tmp/cckyFf43.s:239    .text:00000000000000f0 .L0 
     /tmp/cckyFf43.s:240    .text:00000000000000f0 .L0 
     /tmp/cckyFf43.s:242    .text:00000000000000f4 .L0 
     /tmp/cckyFf43.s:244    .text:00000000000000f8 .L0 
     /tmp/cckyFf43.s:246    .text:00000000000000fc .L0 
     /tmp/cckyFf43.s:248    .text:0000000000000100 .L0 
     /tmp/cckyFf43.s:250    .text:0000000000000104 .L0 
     /tmp/cckyFf43.s:252    .text:0000000000000108 .L0 
     /tmp/cckyFf43.s:256    .text:000000000000010c .L0 
     /tmp/cckyFf43.s:261    .text:000000000000010c .L0 
     /tmp/cckyFf43.s:265    .text:0000000000000114 .L0 
     /tmp/cckyFf43.s:267    .text:0000000000000114 .L0 
     /tmp/cckyFf43.s:268    .text:0000000000000114 .L0 
     /tmp/cckyFf43.s:269    .text:0000000000000114 .L0 
       src/riscv.cpp:76     .text:0000000000000114 .L0 
     /tmp/cckyFf43.s:276    .text:0000000000000118 .L0 
     /tmp/cckyFf43.s:278    .text:0000000000000118 .L0 
     /tmp/cckyFf43.s:281    .text:0000000000000120 .L0 
     /tmp/cckyFf43.s:286    .text:0000000000000124 .L0 
     /tmp/cckyFf43.s:288    .text:0000000000000124 .L0 
     /tmp/cckyFf43.s:289    .text:0000000000000124 .L0 
     /tmp/cckyFf43.s:290    .text:0000000000000124 .L0 
     /tmp/cckyFf43.s:291    .text:0000000000000124 .L0 
     /tmp/cckyFf43.s:292    .text:0000000000000124 .L0 
     /tmp/cckyFf43.s:293    .text:0000000000000124 .L0 
       src/riscv.cpp:42     .text:0000000000000124 .L0 
     /tmp/cckyFf43.s:300    .text:0000000000000128 .L0 
       src/riscv.cpp:43     .text:0000000000000128 .L0 
     /tmp/cckyFf43.s:306    .text:000000000000012c .L0 
       src/riscv.cpp:44     .text:000000000000012c .L0 
     /tmp/cckyFf43.s:313    .text:0000000000000130 .L0 
     /tmp/cckyFf43.s:315    .text:0000000000000134 .L0 
     /tmp/cckyFf43.s:316    .text:0000000000000134 .L0 
     /tmp/cckyFf43.s:323    .text:0000000000000144 .L0 
     /tmp/cckyFf43.s:324    .text:0000000000000144 .L0 
GAS LISTING /tmp/cckyFf43.s 			page 20


     /tmp/cckyFf43.s:330    .text:0000000000000158 .L0 
     /tmp/cckyFf43.s:332    .text:000000000000015c .L0 
     /tmp/cckyFf43.s:333    .text:000000000000015c .L0 
     /tmp/cckyFf43.s:338    .text:0000000000000164 .L0 
       src/riscv.cpp:55     .text:0000000000000164 .L0 
     /tmp/cckyFf43.s:345    .text:0000000000000168 .L0 
     /tmp/cckyFf43.s:349    .text:000000000000016c .L0 
     /tmp/cckyFf43.s:354    .text:0000000000000174 .L0 
     /tmp/cckyFf43.s:360    .text:000000000000017c .L0 
     /tmp/cckyFf43.s:361    .text:000000000000017c .L0 
     /tmp/cckyFf43.s:362    .text:000000000000017c .L0 
     /tmp/cckyFf43.s:363    .text:000000000000017c .L0 
     /tmp/cckyFf43.s:366    .text:0000000000000184 .L0 
     /tmp/cckyFf43.s:375    .text:0000000000000188 .L0 
     /tmp/cckyFf43.s:376    .text:0000000000000188 .L0 
     /tmp/cckyFf43.s:383    .text:000000000000019c .L0 
     /tmp/cckyFf43.s:384    .text:000000000000019c .L0 
     /tmp/cckyFf43.s:391    .text:00000000000001a8 .L0 
     /tmp/cckyFf43.s:392    .text:00000000000001a8 .L0 
     /tmp/cckyFf43.s:397    .text:00000000000001ac .L0 
     /tmp/cckyFf43.s:404    .text:00000000000001b0 .L0 
     /tmp/cckyFf43.s:405    .text:00000000000001b0 .L0 
     /tmp/cckyFf43.s:406    .text:00000000000001b0 .L0 
     /tmp/cckyFf43.s:413    .text:00000000000001b8 .L0 
     /tmp/cckyFf43.s:423    .text:00000000000001bc .L0 
     /tmp/cckyFf43.s:424    .text:00000000000001bc .L0 
     /tmp/cckyFf43.s:425    .text:00000000000001bc .L0 
  src/../h/riscv.hpp:108    .text:00000000000001bc .L0 
     /tmp/cckyFf43.s:433    .text:00000000000001c4 .L0 
     /tmp/cckyFf43.s:434    .text:00000000000001c4 .L0 
     /tmp/cckyFf43.s:441    .text:00000000000001c8 .L0 
     /tmp/cckyFf43.s:442    .text:00000000000001c8 .L0 
     /tmp/cckyFf43.s:443    .text:00000000000001c8 .L0 
  src/../h/riscv.hpp:176    .text:00000000000001c8 .L0 
     /tmp/cckyFf43.s:451    .text:00000000000001d0 .L0 
     /tmp/cckyFf43.s:452    .text:00000000000001d0 .L0 
     /tmp/cckyFf43.s:457    .text:00000000000001d4 .L0 
     /tmp/cckyFf43.s:458    .text:00000000000001d4 .L0 
     /tmp/cckyFf43.s:461    .text:00000000000001e0 .L0 
     /tmp/cckyFf43.s:462    .text:00000000000001e0 .L0 
     /tmp/cckyFf43.s:467    .text:00000000000001e8 .L0 
     /tmp/cckyFf43.s:468    .text:00000000000001e8 .L0 
  src/../h/riscv.hpp:182    .text:00000000000001e8 .L0 
     /tmp/cckyFf43.s:480    .text:00000000000001ec .L0 
     /tmp/cckyFf43.s:481    .text:00000000000001ec .L0 
  src/../h/riscv.hpp:114    .text:00000000000001ec .L0 
     /tmp/cckyFf43.s:488    .text:00000000000001f0 .L0 
     /tmp/cckyFf43.s:496    .text:00000000000001f4 .L0 
     /tmp/cckyFf43.s:504    .text:00000000000001f4 .L0 
     /tmp/cckyFf43.s:44     .rodata.str1.8:0000000000000000 .LC0
     /tmp/cckyFf43.s:186    .text:00000000000000c4 .L0 
     /tmp/cckyFf43.s:376    .text:0000000000000188 .L0 
     /tmp/cckyFf43.s:384    .text:000000000000019c .L0 
     /tmp/cckyFf43.s:458    .text:00000000000001d4 .L0 
     /tmp/cckyFf43.s:120    .text:0000000000000088 .L19
     /tmp/cckyFf43.s:368    .text:0000000000000188 .L20
     /tmp/cckyFf43.s:229    .text:00000000000000e8 .L3
GAS LISTING /tmp/cckyFf43.s 			page 21


     /tmp/cckyFf43.s:357    .text:000000000000017c .L5
     /tmp/cckyFf43.s:255    .text:000000000000010c .L6
     /tmp/cckyFf43.s:283    .text:0000000000000124 .L7
     /tmp/cckyFf43.s:202    .text:00000000000000e0 .L9
     /tmp/cckyFf43.s:347    .text:000000000000016c .L16
     /tmp/cckyFf43.s:352    .text:0000000000000174 .L17
     /tmp/cckyFf43.s:321    .text:0000000000000144 .L11
     /tmp/cckyFf43.s:335    .text:0000000000000164 .L12
     /tmp/cckyFf43.s:415    .text:00000000000001bc .L21
     /tmp/cckyFf43.s:399    .text:00000000000001b0 .L15
     /tmp/cckyFf43.s:1573   .debug_abbrev:0000000000000000 .Ldebug_abbrev0
     /tmp/cckyFf43.s:2927   .debug_str:000000000000056e .LASF101
     /tmp/cckyFf43.s:2881   .debug_str:000000000000043d .LASF102
     /tmp/cckyFf43.s:2801   .debug_str:00000000000001df .LASF103
     /tmp/cckyFf43.s:5      .text:0000000000000000 .Ltext0
     /tmp/cckyFf43.s:499    .text:00000000000001f4 .Letext0
     /tmp/cckyFf43.s:2731   .debug_line:0000000000000000 .Ldebug_line0
     /tmp/cckyFf43.s:2861   .debug_str:00000000000003d1 .LASF0
     /tmp/cckyFf43.s:2877   .debug_str:0000000000000417 .LASF1
     /tmp/cckyFf43.s:2853   .debug_str:000000000000039a .LASF2
     /tmp/cckyFf43.s:2827   .debug_str:00000000000002de .LASF4
     /tmp/cckyFf43.s:2905   .debug_str:00000000000004e0 .LASF3
     /tmp/cckyFf43.s:2759   .debug_str:000000000000009b .LASF5
     /tmp/cckyFf43.s:2879   .debug_str:000000000000042a .LASF6
     /tmp/cckyFf43.s:2859   .debug_str:00000000000003be .LASF7
     /tmp/cckyFf43.s:2933   .debug_str:000000000000064c .LASF8
     /tmp/cckyFf43.s:2811   .debug_str:0000000000000235 .LASF9
     /tmp/cckyFf43.s:2887   .debug_str:000000000000045c .LASF10
     /tmp/cckyFf43.s:2929   .debug_str:0000000000000632 .LASF11
     /tmp/cckyFf43.s:2761   .debug_str:00000000000000a2 .LASF12
     /tmp/cckyFf43.s:2739   .debug_str:000000000000002b .LASF13
     /tmp/cckyFf43.s:2769   .debug_str:00000000000000ec .LASF14
     /tmp/cckyFf43.s:2899   .debug_str:00000000000004a2 .LASF15
     /tmp/cckyFf43.s:2777   .debug_str:0000000000000110 .LASF16
     /tmp/cckyFf43.s:2873   .debug_str:0000000000000406 .LASF60
     /tmp/cckyFf43.s:2841   .debug_str:000000000000033f .LASF104
     /tmp/cckyFf43.s:2913   .debug_str:0000000000000519 .LASF17
     /tmp/cckyFf43.s:2871   .debug_str:00000000000003fd .LASF18
     /tmp/cckyFf43.s:2835   .debug_str:000000000000030c .LASF19
     /tmp/cckyFf43.s:2897   .debug_str:0000000000000497 .LASF20
     /tmp/cckyFf43.s:2949   .debug_str:00000000000006c2 .LASF22
     /tmp/cckyFf43.s:2753   .debug_str:000000000000006c .LASF21
     /tmp/cckyFf43.s:2789   .debug_str:000000000000017b .LASF23
     /tmp/cckyFf43.s:2915   .debug_str:0000000000000522 .LASF24
     /tmp/cckyFf43.s:2737   .debug_str:0000000000000011 .LASF25
     /tmp/cckyFf43.s:2741   .debug_str:000000000000003b .LASF26
     /tmp/cckyFf43.s:2793   .debug_str:000000000000019e .LASF28
     /tmp/cckyFf43.s:2787   .debug_str:0000000000000172 .LASF30
     /tmp/cckyFf43.s:2785   .debug_str:000000000000015d .LASF32
     /tmp/cckyFf43.s:2909   .debug_str:0000000000000503 .LASF27
     /tmp/cckyFf43.s:2889   .debug_str:000000000000046b .LASF29
     /tmp/cckyFf43.s:2925   .debug_str:0000000000000567 .LASF31
     /tmp/cckyFf43.s:2919   .debug_str:0000000000000536 .LASF33
     /tmp/cckyFf43.s:2805   .debug_str:0000000000000210 .LASF34
     /tmp/cckyFf43.s:2779   .debug_str:0000000000000126 .LASF35
     /tmp/cckyFf43.s:2735   .debug_str:0000000000000009 .LASF36
     /tmp/cckyFf43.s:2819   .debug_str:0000000000000287 .LASF37
GAS LISTING /tmp/cckyFf43.s 			page 22


     /tmp/cckyFf43.s:2757   .debug_str:0000000000000093 .LASF38
     /tmp/cckyFf43.s:2763   .debug_str:00000000000000b2 .LASF39
     /tmp/cckyFf43.s:2953   .debug_str:00000000000006e5 .LASF40
     /tmp/cckyFf43.s:2795   .debug_str:00000000000001b3 .LASF41
     /tmp/cckyFf43.s:2863   .debug_str:00000000000003de .LASF42
     /tmp/cckyFf43.s:2945   .debug_str:00000000000006aa .LASF43
     /tmp/cckyFf43.s:2751   .debug_str:0000000000000065 .LASF44
     /tmp/cckyFf43.s:2803   .debug_str:00000000000001fd .LASF45
     /tmp/cckyFf43.s:2807   .debug_str:0000000000000218 .LASF46
     /tmp/cckyFf43.s:2923   .debug_str:0000000000000555 .LASF47
     /tmp/cckyFf43.s:2749   .debug_str:000000000000005f .LASF48
     /tmp/cckyFf43.s:2959   .debug_str:0000000000000728 .LASF49
     /tmp/cckyFf43.s:2951   .debug_str:00000000000006da .LASF50
     /tmp/cckyFf43.s:2903   .debug_str:00000000000004c8 .LASF51
     /tmp/cckyFf43.s:2875   .debug_str:000000000000040c .LASF52
     /tmp/cckyFf43.s:2845   .debug_str:0000000000000355 .LASF53
     /tmp/cckyFf43.s:2767   .debug_str:00000000000000e2 .LASF54
     /tmp/cckyFf43.s:2823   .debug_str:00000000000002a0 .LASF55
     /tmp/cckyFf43.s:2857   .debug_str:00000000000003b4 .LASF56
     /tmp/cckyFf43.s:2817   .debug_str:0000000000000271 .LASF57
     /tmp/cckyFf43.s:2911   .debug_str:000000000000050a .LASF58
     /tmp/cckyFf43.s:2765   .debug_str:00000000000000c6 .LASF59
     /tmp/cckyFf43.s:2935   .debug_str:000000000000065c .LASF77
     /tmp/cckyFf43.s:2839   .debug_str:000000000000031d .LASF79
     /tmp/cckyFf43.s:2747   .debug_str:0000000000000057 .LASF105
     /tmp/cckyFf43.s:2821   .debug_str:000000000000029b .LASF61
     /tmp/cckyFf43.s:2891   .debug_str:000000000000047e .LASF63
     /tmp/cckyFf43.s:2883   .debug_str:000000000000044b .LASF65
     /tmp/cckyFf43.s:2809   .debug_str:000000000000021e .LASF67
     /tmp/cckyFf43.s:2855   .debug_str:00000000000003a8 .LASF62
     /tmp/cckyFf43.s:2955   .debug_str:00000000000006ed .LASF64
     /tmp/cckyFf43.s:2847   .debug_str:000000000000036d .LASF66
     /tmp/cckyFf43.s:2755   .debug_str:000000000000007a .LASF68
     /tmp/cckyFf43.s:2775   .debug_str:0000000000000103 .LASF69
     /tmp/cckyFf43.s:2957   .debug_str:0000000000000704 .LASF70
     /tmp/cckyFf43.s:2895   .debug_str:0000000000000492 .LASF91
     /tmp/cckyFf43.s:2791   .debug_str:0000000000000196 .LASF106
     /tmp/cckyFf43.s:2815   .debug_str:0000000000000259 .LASF107
     /tmp/cckyFf43.s:2833   .debug_str:0000000000000307 .LASF71
     /tmp/cckyFf43.s:2773   .debug_str:00000000000000fd .LASF72
     /tmp/cckyFf43.s:2837   .debug_str:0000000000000315 .LASF73
     /tmp/cckyFf43.s:2869   .debug_str:00000000000003f3 .LASF74
     /tmp/cckyFf43.s:2831   .debug_str:00000000000002fe .LASF75
     /tmp/cckyFf43.s:2849   .debug_str:000000000000037a .LASF76
     /tmp/cckyFf43.s:2851   .debug_str:000000000000038c .LASF78
     /tmp/cckyFf43.s:2939   .debug_str:000000000000067f .LASF80
     /tmp/cckyFf43.s:2937   .debug_str:0000000000000671 .LASF108
     /tmp/cckyFf43.s:2825   .debug_str:00000000000002b6 .LASF109
     /tmp/cckyFf43.s:2865   .debug_str:00000000000003e5 .LASF81
     /tmp/cckyFf43.s:2797   .debug_str:00000000000001c7 .LASF82
     /tmp/cckyFf43.s:2931   .debug_str:0000000000000641 .LASF83
     /tmp/cckyFf43.s:2813   .debug_str:0000000000000243 .LASF84
     /tmp/cckyFf43.s:2921   .debug_str:0000000000000549 .LASF85
     /tmp/cckyFf43.s:2829   .debug_str:00000000000002e5 .LASF86
     /tmp/cckyFf43.s:2907   .debug_str:00000000000004f2 .LASF110
     /tmp/cckyFf43.s:2843   .debug_str:000000000000034a .LASF87
     /tmp/cckyFf43.s:2941   .debug_str:0000000000000698 .LASF88
GAS LISTING /tmp/cckyFf43.s 			page 23


     /tmp/cckyFf43.s:2799   .debug_str:00000000000001da .LASF89
     /tmp/cckyFf43.s:2733   .debug_str:0000000000000000 .LASF90
     /tmp/cckyFf43.s:51     .text:0000000000000020 .LFB34
     /tmp/cckyFf43.s:497    .text:00000000000001f4 .LFE34
     /tmp/cckyFf43.s:2743   .debug_str:0000000000000044 .LASF92
     /tmp/cckyFf43.s:2526   .debug_loc:0000000000000000 .LLST0
     /tmp/cckyFf43.s:2723   .debug_ranges:0000000000000000 .Ldebug_ranges0
     /tmp/cckyFf43.s:2867   .debug_str:00000000000003ee .LASF93
     /tmp/cckyFf43.s:2583   .debug_loc:00000000000000dc .LLST4
     /tmp/cckyFf43.s:2893   .debug_str:000000000000048a .LASF94
     /tmp/cckyFf43.s:2594   .debug_loc:0000000000000112 .LLST5
     /tmp/cckyFf43.s:2943   .debug_str:00000000000006a3 .LASF95
     /tmp/cckyFf43.s:2605   .debug_loc:0000000000000148 .LLST6
     /tmp/cckyFf43.s:2628   .debug_loc:00000000000001b7 .LLST7
     /tmp/cckyFf43.s:287    .text:0000000000000124 .LBB62
     /tmp/cckyFf43.s:358    .text:000000000000017c .LBE62
     /tmp/cckyFf43.s:2917   .debug_str:000000000000052f .LASF96
     /tmp/cckyFf43.s:2639   .debug_loc:00000000000001ed .LLST9
     /tmp/cckyFf43.s:2646   .debug_loc:0000000000000210 .LLST10
     /tmp/cckyFf43.s:2653   .debug_loc:0000000000000233 .LLST11
     /tmp/cckyFf43.s:2660   .debug_loc:0000000000000256 .LLST12
     /tmp/cckyFf43.s:318    .text:0000000000000140 .LVL19
     /tmp/cckyFf43.s:328    .text:0000000000000158 .LVL21
     /tmp/cckyFf43.s:266    .text:0000000000000114 .LBB61
     /tmp/cckyFf43.s:284    .text:0000000000000124 .LBE61
     /tmp/cckyFf43.s:2667   .debug_loc:0000000000000279 .LLST8
     /tmp/cckyFf43.s:279    .text:0000000000000120 .LVL14
     /tmp/cckyFf43.s:124    .text:0000000000000088 .LBB55
     /tmp/cckyFf43.s:139    .text:0000000000000094 .LBE55
     /tmp/cckyFf43.s:144    .text:0000000000000098 .LBB57
     /tmp/cckyFf43.s:160    .text:00000000000000a4 .LBE57
     /tmp/cckyFf43.s:206    .text:00000000000000e0 .LBB64
     /tmp/cckyFf43.s:217    .text:00000000000000e4 .LBE64
     /tmp/cckyFf43.s:2674   .debug_loc:000000000000029c .LLST13
     /tmp/cckyFf43.s:219    .text:00000000000000e4 .LBB66
     /tmp/cckyFf43.s:231    .text:00000000000000e8 .LBE66
     /tmp/cckyFf43.s:2681   .debug_loc:00000000000002bf .LLST14
     /tmp/cckyFf43.s:188    .text:00000000000000d4 .LVL7
     /tmp/cckyFf43.s:192    .text:00000000000000dc .LVL8
     /tmp/cckyFf43.s:364    .text:0000000000000184 .LVL26
     /tmp/cckyFf43.s:419    .text:00000000000001bc .LBB42
     /tmp/cckyFf43.s:491    .text:00000000000001f4 .LBE42
     /tmp/cckyFf43.s:421    .text:00000000000001bc .LBB43
     /tmp/cckyFf43.s:437    .text:00000000000001c8 .LBE43
     /tmp/cckyFf43.s:439    .text:00000000000001c8 .LBB45
     /tmp/cckyFf43.s:455    .text:00000000000001d4 .LBE45
     /tmp/cckyFf43.s:465    .text:00000000000001e8 .LBB47
     /tmp/cckyFf43.s:476    .text:00000000000001ec .LBE47
     /tmp/cckyFf43.s:2688   .debug_loc:00000000000002e2 .LLST2
     /tmp/cckyFf43.s:478    .text:00000000000001ec .LBB49
     /tmp/cckyFf43.s:490    .text:00000000000001f4 .LBE49
     /tmp/cckyFf43.s:463    .text:00000000000001e8 .LVL35
     /tmp/cckyFf43.s:73     .text:0000000000000044 .LBB34
     /tmp/cckyFf43.s:90     .text:0000000000000050 .LBE34
     /tmp/cckyFf43.s:387    .text:00000000000001a8 .LBB40
     /tmp/cckyFf43.s:395    .text:00000000000001ac .LBE40
     /tmp/cckyFf43.s:2695   .debug_loc:0000000000000305 .LLST1
GAS LISTING /tmp/cckyFf43.s 			page 24


     /tmp/cckyFf43.s:402    .text:00000000000001b0 .LBB51
     /tmp/cckyFf43.s:417    .text:00000000000001bc .LBE51
     /tmp/cckyFf43.s:2702   .debug_loc:0000000000000328 .LLST3
     /tmp/cckyFf43.s:114    .text:0000000000000084 .LVL1
     /tmp/cckyFf43.s:10     .text:0000000000000000 .LFB33
     /tmp/cckyFf43.s:40     .text:0000000000000020 .LFE33
     /tmp/cckyFf43.s:2947   .debug_str:00000000000006bd .LASF111
     /tmp/cckyFf43.s:2771   .debug_str:00000000000000f8 .LASF97
     /tmp/cckyFf43.s:2885   .debug_str:0000000000000456 .LASF112
     /tmp/cckyFf43.s:2901   .debug_str:00000000000004b8 .LASF113
     /tmp/cckyFf43.s:2781   .debug_str:000000000000013a .LASF98
     /tmp/cckyFf43.s:2745   .debug_str:000000000000004b .LASF100
     /tmp/cckyFf43.s:2783   .debug_str:000000000000014d .LASF99
     /tmp/cckyFf43.s:88     .text:0000000000000050 .LVL0
     /tmp/cckyFf43.s:119    .text:0000000000000088 .LVL2
     /tmp/cckyFf43.s:174    .text:00000000000000ac .LVL6
     /tmp/cckyFf43.s:254    .text:000000000000010c .LVL12
     /tmp/cckyFf43.s:282    .text:0000000000000124 .LVL15
     /tmp/cckyFf43.s:346    .text:000000000000016c .LVL23
     /tmp/cckyFf43.s:351    .text:0000000000000174 .LVL24
     /tmp/cckyFf43.s:356    .text:000000000000017c .LVL25
     /tmp/cckyFf43.s:367    .text:0000000000000188 .LVL27
     /tmp/cckyFf43.s:377    .text:0000000000000190 .LVL28
     /tmp/cckyFf43.s:398    .text:00000000000001b0 .LVL31
     /tmp/cckyFf43.s:414    .text:00000000000001bc .LVL32
     /tmp/cckyFf43.s:142    .text:0000000000000098 .LVL3
     /tmp/cckyFf43.s:227    .text:00000000000000e8 .LVL11
     /tmp/cckyFf43.s:158    .text:00000000000000a4 .LVL4
     /tmp/cckyFf43.s:169    .text:00000000000000a8 .LVL5
     /tmp/cckyFf43.s:200    .text:00000000000000e0 .LVL9
     /tmp/cckyFf43.s:336    .text:0000000000000164 .LVL22
     /tmp/cckyFf43.s:298    .text:0000000000000128 .LVL16
     /tmp/cckyFf43.s:304    .text:000000000000012c .LVL17
     /tmp/cckyFf43.s:310    .text:0000000000000130 .LVL18
     /tmp/cckyFf43.s:320    .text:0000000000000144 .LVL20
     /tmp/cckyFf43.s:274    .text:0000000000000118 .LVL13
     /tmp/cckyFf43.s:214    .text:00000000000000e4 .LVL10
     /tmp/cckyFf43.s:473    .text:00000000000001ec .LVL36
     /tmp/cckyFf43.s:386    .text:00000000000001a8 .LVL29
     /tmp/cckyFf43.s:393    .text:00000000000001ac .LVL30
     /tmp/cckyFf43.s:505    .debug_info:0000000000000000 .Ldebug_info0
     /tmp/cckyFf43.s:122    .text:0000000000000088 .LBB54
     /tmp/cckyFf43.s:232    .text:00000000000000e8 .LBE54
     /tmp/cckyFf43.s:258    .text:000000000000010c .LBB69
     /tmp/cckyFf43.s:371    .text:0000000000000188 .LBE69

UNDEFINED SYMBOLS
console_handler
_Z11printStringPKc
_ZN3TCB10threadExitEv
_ZN3TCB11threadStartEPS_
_Znam
_ZN3TCB12createThreadEPFvPvES0_S0_b
_ZN3TCB8dispatchEv
_ZN3TCB16timeSliceCounterE
_ZN3TCB7runningE
