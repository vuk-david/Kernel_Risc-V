GAS LISTING /tmp/ccr7YwtU.s 			page 1


   1              		.file	"riscv.cpp"
   2              		.option pic
   3              		.option norelax
   4              		.text
   5              	.Ltext0:
   6              		.align	2
   7              		.globl	_ZN5Riscv10popSppSpieEv
   9              	_ZN5Riscv10popSppSpieEv:
  10              	.LFB33:
  11              		.file 1 "src/riscv.cpp"
   1:src/riscv.cpp **** //
   2:src/riscv.cpp **** // Created by marko on 20.4.22..
   3:src/riscv.cpp **** //
   4:src/riscv.cpp **** 
   5:src/riscv.cpp **** #include "../h/riscv.hpp"
   6:src/riscv.cpp **** #include "../h/tcb.hpp"
   7:src/riscv.cpp **** #include "../lib/console.h"
   8:src/riscv.cpp **** #include "../h/print.hpp"
   9:src/riscv.cpp **** #include "../h/syscall_c.h"
  10:src/riscv.cpp **** 
  11:src/riscv.cpp **** using Body = void (*)(void*);
  12:src/riscv.cpp **** 
  13:src/riscv.cpp **** void Riscv::popSppSpie()
  14:src/riscv.cpp **** {
  12              		.loc 1 14 1
  13              		.cfi_startproc
  14 0000 130101FF 		addi	sp,sp,-16
  15              		.cfi_def_cfa_offset 16
  16 0004 23348100 		sd	s0,8(sp)
  17              		.cfi_offset 8, -8
  18 0008 13040101 		addi	s0,sp,16
  19              		.cfi_def_cfa 8, 0
  15:src/riscv.cpp ****     __asm__ volatile("csrw sepc, ra");
  20              		.loc 1 15 5
  21              		.loc 1 15 38 is_stmt 0
  22              	#APP
  23              	# 15 "src/riscv.cpp" 1
  16              	    __asm__ volatile("sret");
  24              		csrw sepc, ra
  25              	# 0 "" 2
  26              		.loc 1 16 5 is_stmt 1
  27              		.loc 1 16 29 is_stmt 0
  28              	# 16 "src/riscv.cpp" 1
  17              	}
  29              		sret
  30              	# 0 "" 2
  31              		.loc 1 17 1
  32              	#NO_APP
  33 0014 03348100 		ld	s0,8(sp)
  34              		.cfi_restore 8
  35              		.cfi_def_cfa 2, 16
  36 0018 13010101 		addi	sp,sp,16
  37              		.cfi_def_cfa_offset 0
  38 001c 67800000 		jr	ra
  39              		.cfi_endproc
  40              	.LFE33:
  42              		.section	.rodata.str1.8,"aMS",@progbits,1
GAS LISTING /tmp/ccr7YwtU.s 			page 2


  43              		.align	3
  44              	.LC0:
  45 0000 6563616C 		.string	"ecall dispatch"
  45      6C206469 
  45      73706174 
  45      636800
  46              		.text
  47              		.align	2
  48              		.globl	_ZN5Riscv20handleSupervisorTrapEv
  50              	_ZN5Riscv20handleSupervisorTrapEv:
  51              	.LFB34:
  18:src/riscv.cpp **** 
  19:src/riscv.cpp **** void Riscv::handleSupervisorTrap()
  20:src/riscv.cpp **** {
  52              		.loc 1 20 1 is_stmt 1
  53              		.cfi_startproc
  54 0020 130101F9 		addi	sp,sp,-112
  55              		.cfi_def_cfa_offset 112
  56 0024 23341106 		sd	ra,104(sp)
  57 0028 23308106 		sd	s0,96(sp)
  58 002c 233C9104 		sd	s1,88(sp)
  59 0030 23382105 		sd	s2,80(sp)
  60 0034 23343105 		sd	s3,72(sp)
  61 0038 23304105 		sd	s4,64(sp)
  62 003c 233C5103 		sd	s5,56(sp)
  63              		.cfi_offset 1, -8
  64              		.cfi_offset 8, -16
  65              		.cfi_offset 9, -24
  66              		.cfi_offset 18, -32
  67              		.cfi_offset 19, -40
  68              		.cfi_offset 20, -48
  69              		.cfi_offset 21, -56
  70 0040 13040107 		addi	s0,sp,112
  71              		.cfi_def_cfa 8, 0
  21:src/riscv.cpp ****     uint64 scause = r_scause();
  72              		.loc 1 21 5
  73              	.LBB32:
  74              	.LBB33:
  75              		.file 2 "src/../h/riscv.hpp"
   1:src/../h/riscv.hpp **** //
   2:src/../h/riscv.hpp **** // Created by marko on 20.4.22..
   3:src/../h/riscv.hpp **** //
   4:src/../h/riscv.hpp **** 
   5:src/../h/riscv.hpp **** #ifndef OS1_VEZBE07_RISCV_CONTEXT_SWITCH_1_SYNCHRONOUS_RISCV_HPP
   6:src/../h/riscv.hpp **** #define OS1_VEZBE07_RISCV_CONTEXT_SWITCH_1_SYNCHRONOUS_RISCV_HPP
   7:src/../h/riscv.hpp **** 
   8:src/../h/riscv.hpp **** #include "../lib/hw.h"
   9:src/../h/riscv.hpp **** 
  10:src/../h/riscv.hpp **** class Riscv
  11:src/../h/riscv.hpp **** {
  12:src/../h/riscv.hpp **** public:
  13:src/../h/riscv.hpp ****     // pop sstatus.spp and sstatus.spie bits (has to be a non inline function)
  14:src/../h/riscv.hpp ****     static void popSppSpie();
  15:src/../h/riscv.hpp **** 
  16:src/../h/riscv.hpp ****     // push x3..x31 registers onto stack
  17:src/../h/riscv.hpp ****     static void pushRegisters();
  18:src/../h/riscv.hpp **** 
GAS LISTING /tmp/ccr7YwtU.s 			page 3


  19:src/../h/riscv.hpp ****     // pop x3..x31 registers onto stack
  20:src/../h/riscv.hpp ****     static void popRegisters();
  21:src/../h/riscv.hpp **** 
  22:src/../h/riscv.hpp ****     // read register scause
  23:src/../h/riscv.hpp ****     static uint64 r_scause();
  24:src/../h/riscv.hpp **** 
  25:src/../h/riscv.hpp ****     // write register scause
  26:src/../h/riscv.hpp ****     static void w_scause(uint64 scause);
  27:src/../h/riscv.hpp **** 
  28:src/../h/riscv.hpp ****     // read register sepc
  29:src/../h/riscv.hpp ****     static uint64 r_sepc();
  30:src/../h/riscv.hpp **** 
  31:src/../h/riscv.hpp ****     // write register sepc
  32:src/../h/riscv.hpp ****     static void w_sepc(uint64 sepc);
  33:src/../h/riscv.hpp **** 
  34:src/../h/riscv.hpp ****     // read register stvec
  35:src/../h/riscv.hpp ****     static uint64 r_stvec();
  36:src/../h/riscv.hpp **** 
  37:src/../h/riscv.hpp ****     // write register stvec
  38:src/../h/riscv.hpp ****     static void w_stvec(uint64 stvec);
  39:src/../h/riscv.hpp **** 
  40:src/../h/riscv.hpp ****     // read register stval
  41:src/../h/riscv.hpp ****     static uint64 r_stval();
  42:src/../h/riscv.hpp **** 
  43:src/../h/riscv.hpp ****     // write register stval
  44:src/../h/riscv.hpp ****     static void w_stval(uint64 stval);
  45:src/../h/riscv.hpp **** 
  46:src/../h/riscv.hpp ****     enum BitMaskSip
  47:src/../h/riscv.hpp ****     {
  48:src/../h/riscv.hpp ****         SIP_SSIP = (1 << 1),
  49:src/../h/riscv.hpp ****         SIP_STIP = (1 << 5),
  50:src/../h/riscv.hpp ****         SIP_SEIP = (1 << 9),
  51:src/../h/riscv.hpp ****     };
  52:src/../h/riscv.hpp **** 
  53:src/../h/riscv.hpp ****     // mask set register sip
  54:src/../h/riscv.hpp ****     static void ms_sip(uint64 mask);
  55:src/../h/riscv.hpp **** 
  56:src/../h/riscv.hpp ****     // mask clear register sip
  57:src/../h/riscv.hpp ****     static void mc_sip(uint64 mask);
  58:src/../h/riscv.hpp **** 
  59:src/../h/riscv.hpp ****     // read register sip
  60:src/../h/riscv.hpp ****     static uint64 r_sip();
  61:src/../h/riscv.hpp **** 
  62:src/../h/riscv.hpp ****     // write register sip
  63:src/../h/riscv.hpp ****     static void w_sip(uint64 sip);
  64:src/../h/riscv.hpp **** 
  65:src/../h/riscv.hpp ****     enum BitMaskSstatus
  66:src/../h/riscv.hpp ****     {
  67:src/../h/riscv.hpp ****         SSTATUS_SIE = (1 << 1),
  68:src/../h/riscv.hpp ****         SSTATUS_SPIE = (1 << 5),
  69:src/../h/riscv.hpp ****         SSTATUS_SPP = (1 << 8),
  70:src/../h/riscv.hpp ****     };
  71:src/../h/riscv.hpp **** 
  72:src/../h/riscv.hpp ****     // mask set register sstatus
  73:src/../h/riscv.hpp ****     static void ms_sstatus(uint64 mask);
  74:src/../h/riscv.hpp **** 
  75:src/../h/riscv.hpp ****     // mask clear register sstatus
GAS LISTING /tmp/ccr7YwtU.s 			page 4


  76:src/../h/riscv.hpp ****     static void mc_sstatus(uint64 mask);
  77:src/../h/riscv.hpp **** 
  78:src/../h/riscv.hpp ****     // read register sstatus
  79:src/../h/riscv.hpp ****     static uint64 r_sstatus();
  80:src/../h/riscv.hpp **** 
  81:src/../h/riscv.hpp ****     // write register sstatus
  82:src/../h/riscv.hpp ****     static void w_sstatus(uint64 sstatus);
  83:src/../h/riscv.hpp **** 
  84:src/../h/riscv.hpp ****     // supervisor trap
  85:src/../h/riscv.hpp ****     static void supervisorTrap();
  86:src/../h/riscv.hpp **** 
  87:src/../h/riscv.hpp **** private:
  88:src/../h/riscv.hpp ****     // supervisor trap handler. Sve vezano za prekid radimo u ovoj funkciji
  89:src/../h/riscv.hpp ****     static void handleSupervisorTrap();
  90:src/../h/riscv.hpp **** 
  91:src/../h/riscv.hpp **** };
  92:src/../h/riscv.hpp **** 
  93:src/../h/riscv.hpp **** inline uint64 Riscv::r_scause()
  94:src/../h/riscv.hpp **** {
  95:src/../h/riscv.hpp ****     uint64 volatile scause;
  76              		.loc 2 95 5
  96:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[scause], scause" : [scause] "=r"(scause));
  77              		.loc 2 96 5
  78              		.loc 2 96 72 is_stmt 0
  79              	#APP
  80              	# 96 "src/../h/riscv.hpp" 1
  97              	    return scause;
  81              		csrr a5, scause
  82              	# 0 "" 2
  83              	#NO_APP
  84 0048 233CF4F8 		sd	a5,-104(s0)
  85              		.loc 2 97 5 is_stmt 1
  86              		.loc 2 97 12 is_stmt 0
  87 004c 033784F9 		ld	a4,-104(s0)
  88              	.LVL0:
  89              	.LBE33:
  90              	.LBE32:
  22:src/riscv.cpp **** 
  23:src/riscv.cpp ****     if (scause == 0x0000000000000008UL || scause == 0x0000000000000009UL)
  91              		.loc 1 23 5 is_stmt 1
  92              	.LBB34:
  93              		.loc 1 23 40 is_stmt 0
  94 0050 930687FF 		addi	a3,a4,-8
  95              		.loc 1 23 5
  96 0054 93071000 		li	a5,1
  97 0058 63F8D702 		bleu	a3,a5,.L16
  98              	.LBE34:
  24:src/riscv.cpp ****     {
  25:src/riscv.cpp ****         // Interrupt: no, cause code: environment code for S-mode(9)
  26:src/riscv.cpp ****         uint64 sepc = r_sepc() + 4;
  27:src/riscv.cpp ****         uint64 sstatus = r_sstatus();
  28:src/riscv.cpp **** 
  29:src/riscv.cpp ****         // printString("huehue\n\n");
  30:src/riscv.cpp **** 
  31:src/riscv.cpp ****         uint64 number;
  32:src/riscv.cpp ****         __asm__ volatile ("mv %0, a0" : "=r" (number));
  33:src/riscv.cpp **** 
GAS LISTING /tmp/ccr7YwtU.s 			page 5


  34:src/riscv.cpp ****         switch (number)
  35:src/riscv.cpp ****         {
  36:src/riscv.cpp ****             case 0x11:
  37:src/riscv.cpp ****                 thread_t *handle;
  38:src/riscv.cpp ****                 Body body;
  39:src/riscv.cpp ****                 void *arg;
  40:src/riscv.cpp ****                 uint64  *stack;
  41:src/riscv.cpp **** 
  42:src/riscv.cpp ****                 __asm__ volatile ("mv %0, a1" : "=r" (handle));
  43:src/riscv.cpp ****                 __asm__ volatile ("mv %0, a2" : "=r" (body));
  44:src/riscv.cpp ****                 __asm__ volatile ("mv %0, a3" : "=r" (arg));
  45:src/riscv.cpp **** 
  46:src/riscv.cpp ****                 if (body != 0)
  47:src/riscv.cpp ****                     stack = (uint64 *)new uint64[DEFAULT_STACK_SIZE];
  48:src/riscv.cpp ****                 else
  49:src/riscv.cpp ****                     stack = 0;
  50:src/riscv.cpp **** 
  51:src/riscv.cpp ****                 *handle = TCB::createThread(body, arg, stack, true);
  52:src/riscv.cpp **** 
  53:src/riscv.cpp ****                 int ret;
  54:src/riscv.cpp ****                 ret = (*handle) != nullptr ? 0 : -1;
  55:src/riscv.cpp ****                 __asm__ volatile ("mv a0, %0" : : "r" (ret));
  56:src/riscv.cpp **** 
  57:src/riscv.cpp ****                 break;
  58:src/riscv.cpp **** 
  59:src/riscv.cpp ****             case 0x13:
  60:src/riscv.cpp ****                 printString("ecall dispatch");
  61:src/riscv.cpp ****                 TCB::dispatch();
  62:src/riscv.cpp **** 
  63:src/riscv.cpp ****                 break;
  64:src/riscv.cpp ****         }
  65:src/riscv.cpp **** 
  66:src/riscv.cpp **** //        TCB::timeSliceCounter = 0;
  67:src/riscv.cpp **** //        TCB::dispatch();
  68:src/riscv.cpp ****         w_sstatus(sstatus);
  69:src/riscv.cpp ****         w_sepc(sepc);
  70:src/riscv.cpp ****     }
  71:src/riscv.cpp ****     else if (scause == 0x8000000000000001UL)
  99              		.loc 1 71 10 is_stmt 1
 100              	.LBB66:
 101              	.LBB35:
 102 005c 9307F0FF 		li	a5,-1
 103 0060 9397F703 		slli	a5,a5,63
 104 0064 93871700 		addi	a5,a5,1
 105 0068 6308F70E 		beq	a4,a5,.L17
  72:src/riscv.cpp ****     {
  73:src/riscv.cpp ****         // Interrupt: yes, cause code: Software interrupt (timer)
  74:src/riscv.cpp ****         TCB::timeSliceCounter++;
  75:src/riscv.cpp **** 
  76:src/riscv.cpp ****         if (TCB::timeSliceCounter >= TCB::running->getTimeSlice())
  77:src/riscv.cpp ****         {
  78:src/riscv.cpp ****             uint64 sepc = r_sepc();
  79:src/riscv.cpp ****             uint64 sstatus = r_sstatus();
  80:src/riscv.cpp ****             TCB::timeSliceCounter = 0;
  81:src/riscv.cpp ****             TCB::dispatch();
  82:src/riscv.cpp ****             w_sstatus(sstatus);
  83:src/riscv.cpp ****             w_sepc(sepc);
GAS LISTING /tmp/ccr7YwtU.s 			page 6


  84:src/riscv.cpp ****         }
  85:src/riscv.cpp **** 
  86:src/riscv.cpp ****         mc_sip(SIP_SSIP);
  87:src/riscv.cpp ****     }
  88:src/riscv.cpp ****     else if (scause == 0x8000000000000009UL)
 106              		.loc 1 88 10
 107 006c 9307F0FF 		li	a5,-1
 108 0070 9397F703 		slli	a5,a5,63
 109 0074 93879700 		addi	a5,a5,9
 110 0078 6314F704 		bne	a4,a5,.L3
  89:src/riscv.cpp ****     {
  90:src/riscv.cpp ****         // Interrupt: yes, cause code: Software external interrupt (console)
  91:src/riscv.cpp ****         console_handler();
 111              		.loc 1 91 9
 112              		.loc 1 91 24 is_stmt 0
 113 007c 97000000 		call	console_handler@plt
 113      E7800000 
 114              	.LVL1:
 115              	.LBE35:
 116              	.LBE66:
  92:src/riscv.cpp ****     }
  93:src/riscv.cpp ****     else
  94:src/riscv.cpp ****     {
  95:src/riscv.cpp ****         // Unexpected trap cause
  96:src/riscv.cpp ****         // print(scause)
  97:src/riscv.cpp ****         // print(sepc)
  98:src/riscv.cpp ****         // print(stvalue)
  99:src/riscv.cpp **** 
 100:src/riscv.cpp ****     }
 101:src/riscv.cpp **** }...
 117              		.loc 1 101 1
 118 0084 6F00C003 		j	.L3
 119              	.LVL2:
 120              	.L16:
 121              	.LBB67:
 122              	.LBB52:
  26:src/riscv.cpp ****         uint64 sepc = r_sepc() + 4;
 123              		.loc 1 26 9 is_stmt 1
 124              	.LBB53:
 125              	.LBB54:
  98:src/../h/riscv.hpp **** }
  99:src/../h/riscv.hpp **** 
 100:src/../h/riscv.hpp **** inline void Riscv::w_scause(uint64 scause)
 101:src/../h/riscv.hpp **** {
 102:src/../h/riscv.hpp ****     __asm__ volatile ("csrw scause, %[scause]" : : [scause] "r"(scause));
 103:src/../h/riscv.hpp **** }
 104:src/../h/riscv.hpp **** 
 105:src/../h/riscv.hpp **** inline uint64 Riscv::r_sepc()
 106:src/../h/riscv.hpp **** {
 107:src/../h/riscv.hpp ****     uint64 volatile sepc;
 126              		.loc 2 107 5
 108:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[sepc], sepc" : [sepc] "=r"(sepc));
 127              		.loc 2 108 5
 128              		.loc 2 108 64 is_stmt 0
 129              	#APP
 130              	# 108 "src/../h/riscv.hpp" 1
 109              	    return sepc;
GAS LISTING /tmp/ccr7YwtU.s 			page 7


 131              		csrr a5, sepc
 132              	# 0 "" 2
 133              	#NO_APP
 134 008c 2334F4FA 		sd	a5,-88(s0)
 135              		.loc 2 109 5 is_stmt 1
 136              		.loc 2 109 12 is_stmt 0
 137 0090 833484FA 		ld	s1,-88(s0)
 138              	.LBE54:
 139              	.LBE53:
  26:src/riscv.cpp ****         uint64 sepc = r_sepc() + 4;
 140              		.loc 1 26 34
 141 0094 93844400 		addi	s1,s1,4
 142              	.LVL3:
  27:src/riscv.cpp ****         uint64 sstatus = r_sstatus();
 143              		.loc 1 27 9 is_stmt 1
 144              	.LBB55:
 145              	.LBB56:
 110:src/../h/riscv.hpp **** }
 111:src/../h/riscv.hpp **** 
 112:src/../h/riscv.hpp **** inline void Riscv::w_sepc(uint64 sepc)
 113:src/../h/riscv.hpp **** {
 114:src/../h/riscv.hpp ****     __asm__ volatile ("csrw sepc, %[sepc]" : : [sepc] "r"(sepc));
 115:src/../h/riscv.hpp **** }
 116:src/../h/riscv.hpp **** 
 117:src/../h/riscv.hpp **** inline uint64 Riscv::r_stvec()
 118:src/../h/riscv.hpp **** {
 119:src/../h/riscv.hpp ****     uint64 volatile stvec;
 120:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[stvec], stvec" : [stvec] "=r"(stvec));
 121:src/../h/riscv.hpp ****     return stvec;
 122:src/../h/riscv.hpp **** }
 123:src/../h/riscv.hpp **** 
 124:src/../h/riscv.hpp **** inline void Riscv::w_stvec(uint64 stvec)
 125:src/../h/riscv.hpp **** {
 126:src/../h/riscv.hpp ****     __asm__ volatile ("csrw stvec, %[stvec]" : : [stvec] "r"(stvec));
 127:src/../h/riscv.hpp **** }
 128:src/../h/riscv.hpp **** 
 129:src/../h/riscv.hpp **** inline uint64 Riscv::r_stval()
 130:src/../h/riscv.hpp **** {
 131:src/../h/riscv.hpp ****     uint64 volatile stval;
 132:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[stval], stval" : [stval] "=r"(stval));
 133:src/../h/riscv.hpp ****     return stval;
 134:src/../h/riscv.hpp **** }
 135:src/../h/riscv.hpp **** 
 136:src/../h/riscv.hpp **** inline void Riscv::w_stval(uint64 stval)
 137:src/../h/riscv.hpp **** {
 138:src/../h/riscv.hpp ****     __asm__ volatile ("csrw stval, %[stval]" : : [stval] "r"(stval));
 139:src/../h/riscv.hpp **** }
 140:src/../h/riscv.hpp **** 
 141:src/../h/riscv.hpp **** inline void Riscv::ms_sip(uint64 mask)
 142:src/../h/riscv.hpp **** {
 143:src/../h/riscv.hpp ****     __asm__ volatile ("csrs sip, %[mask]" : : [mask] "r"(mask));
 144:src/../h/riscv.hpp **** }
 145:src/../h/riscv.hpp **** 
 146:src/../h/riscv.hpp **** inline void Riscv::mc_sip(uint64 mask)
 147:src/../h/riscv.hpp **** {
 148:src/../h/riscv.hpp ****     __asm__ volatile ("csrc sip, %[mask]" : : [mask] "r"(mask));
 149:src/../h/riscv.hpp **** }
GAS LISTING /tmp/ccr7YwtU.s 			page 8


 150:src/../h/riscv.hpp **** 
 151:src/../h/riscv.hpp **** inline uint64 Riscv::r_sip()
 152:src/../h/riscv.hpp **** {
 153:src/../h/riscv.hpp ****     uint64 volatile sip;
 154:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[sip], sip" : [sip] "=r"(sip));
 155:src/../h/riscv.hpp ****     return sip;
 156:src/../h/riscv.hpp **** }
 157:src/../h/riscv.hpp **** 
 158:src/../h/riscv.hpp **** inline void Riscv::w_sip(uint64 sip)
 159:src/../h/riscv.hpp **** {
 160:src/../h/riscv.hpp ****     __asm__ volatile ("csrw sip, %[sip]" : : [sip] "r"(sip));
 161:src/../h/riscv.hpp **** }
 162:src/../h/riscv.hpp **** 
 163:src/../h/riscv.hpp **** inline void Riscv::ms_sstatus(uint64 mask)
 164:src/../h/riscv.hpp **** {
 165:src/../h/riscv.hpp ****     __asm__ volatile ("csrs sstatus, %[mask]" : : [mask] "r"(mask));
 166:src/../h/riscv.hpp **** }
 167:src/../h/riscv.hpp **** 
 168:src/../h/riscv.hpp **** inline void Riscv::mc_sstatus(uint64 mask)
 169:src/../h/riscv.hpp **** {
 170:src/../h/riscv.hpp ****     __asm__ volatile ("csrc sstatus, %[mask]" : : [mask] "r"(mask));
 171:src/../h/riscv.hpp **** }
 172:src/../h/riscv.hpp **** 
 173:src/../h/riscv.hpp **** inline uint64 Riscv::r_sstatus()
 174:src/../h/riscv.hpp **** {
 175:src/../h/riscv.hpp ****     uint64 volatile sstatus;
 146              		.loc 2 175 5
 176:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[sstatus], sstatus" : [sstatus] "=r"(sstatus));
 147              		.loc 2 176 5
 148              		.loc 2 176 76 is_stmt 0
 149              	#APP
 150              	# 176 "src/../h/riscv.hpp" 1
 177              	    return sstatus;
 151              		csrr a5, sstatus
 152              	# 0 "" 2
 153              	#NO_APP
 154 009c 2330F4FA 		sd	a5,-96(s0)
 155              		.loc 2 177 5 is_stmt 1
 156              		.loc 2 177 12 is_stmt 0
 157 00a0 033904FA 		ld	s2,-96(s0)
 158              	.LVL4:
 159              	.LBE56:
 160              	.LBE55:
  31:src/riscv.cpp ****         uint64 number;
 161              		.loc 1 31 9 is_stmt 1
  32:src/riscv.cpp ****         __asm__ volatile ("mv %0, a0" : "=r" (number));
 162              		.loc 1 32 9
  32:src/riscv.cpp ****         __asm__ volatile ("mv %0, a0" : "=r" (number));
 163              		.loc 1 32 55 is_stmt 0
 164              	#APP
 165              	# 32 "src/riscv.cpp" 1
 166              		mv a5, a0
 167              	# 0 "" 2
 168              	.LVL5:
  34:src/riscv.cpp ****         switch (number)
 169              		.loc 1 34 9 is_stmt 1
 170              	#NO_APP
GAS LISTING /tmp/ccr7YwtU.s 			page 9


 171              	.LBB57:
 172 00a8 13071001 		li	a4,17
 173              	.LVL6:
 174 00ac 638CE702 		beq	a5,a4,.L5
 175 00b0 13073001 		li	a4,19
 176 00b4 6384E708 		beq	a5,a4,.L6
 177              	.LVL7:
 178              	.L7:
 179              	.LBE57:
  68:src/riscv.cpp ****         w_sstatus(sstatus);
 180              		.loc 1 68 9
 181              	.LBB59:
 182              	.LBB60:
 178:src/../h/riscv.hpp **** }
 179:src/../h/riscv.hpp **** 
 180:src/../h/riscv.hpp **** inline void Riscv::w_sstatus(uint64 sstatus)
 181:src/../h/riscv.hpp **** {
 182:src/../h/riscv.hpp ****     __asm__ volatile ("csrw sstatus, %[sstatus]" : : [sstatus] "r"(sstatus));
 183              		.loc 2 182 5
 184              		.loc 2 182 77 is_stmt 0
 185              	#APP
 186              	# 182 "src/../h/riscv.hpp" 1
 183              	}
 187              		csrw sstatus, s2
 188              	# 0 "" 2
 189              	.LVL8:
 190              	#NO_APP
 191              	.LBE60:
 192              	.LBE59:
  69:src/riscv.cpp ****         w_sepc(sepc);
 193              		.loc 1 69 9 is_stmt 1
 194              	.LBB61:
 195              	.LBB62:
 114:src/../h/riscv.hpp **** }
 196              		.loc 2 114 5
 114:src/../h/riscv.hpp **** }
 197              		.loc 2 114 65 is_stmt 0
 198              	#APP
 199              	# 114 "src/../h/riscv.hpp" 1
 200              		csrw sepc, s1
 201              	# 0 "" 2
 202              	.LVL9:
 203              	#NO_APP
 204              	.L3:
 205              	.LBE62:
 206              	.LBE61:
 207              	.LBE52:
 208              	.LBE67:
 209              		.loc 1 101 1
 210 00c0 83308106 		ld	ra,104(sp)
 211              		.cfi_remember_state
 212              		.cfi_restore 1
 213 00c4 03340106 		ld	s0,96(sp)
 214              		.cfi_restore 8
 215              		.cfi_def_cfa 2, 112
 216 00c8 83348105 		ld	s1,88(sp)
 217              		.cfi_restore 9
GAS LISTING /tmp/ccr7YwtU.s 			page 10


 218 00cc 03390105 		ld	s2,80(sp)
 219              		.cfi_restore 18
 220 00d0 83398104 		ld	s3,72(sp)
 221              		.cfi_restore 19
 222 00d4 033A0104 		ld	s4,64(sp)
 223              		.cfi_restore 20
 224 00d8 833A8103 		ld	s5,56(sp)
 225              		.cfi_restore 21
 226 00dc 13010107 		addi	sp,sp,112
 227              		.cfi_def_cfa_offset 0
 228 00e0 67800000 		jr	ra
 229              	.LVL10:
 230              	.L5:
 231              		.cfi_restore_state
 232              	.LBB68:
 233              	.LBB64:
 234              	.LBB63:
 235              	.LBB58:
  36:src/riscv.cpp ****             case 0x11:
 236              		.loc 1 36 13 is_stmt 1
  37:src/riscv.cpp ****                 thread_t *handle;
 237              		.loc 1 37 17
  38:src/riscv.cpp ****                 Body body;
 238              		.loc 1 38 17
  39:src/riscv.cpp ****                 void *arg;
 239              		.loc 1 39 17
  40:src/riscv.cpp ****                 uint64  *stack;
 240              		.loc 1 40 17
  42:src/riscv.cpp ****                 __asm__ volatile ("mv %0, a1" : "=r" (handle));
 241              		.loc 1 42 17
  42:src/riscv.cpp ****                 __asm__ volatile ("mv %0, a1" : "=r" (handle));
 242              		.loc 1 42 63 is_stmt 0
 243              	#APP
 244              	# 42 "src/riscv.cpp" 1
 245              		mv s4, a1
 246              	# 0 "" 2
 247              	.LVL11:
  43:src/riscv.cpp ****                 __asm__ volatile ("mv %0, a2" : "=r" (body));
 248              		.loc 1 43 17 is_stmt 1
  43:src/riscv.cpp ****                 __asm__ volatile ("mv %0, a2" : "=r" (body));
 249              		.loc 1 43 61 is_stmt 0
 250              	# 43 "src/riscv.cpp" 1
 251              		mv s3, a2
 252              	# 0 "" 2
 253              	.LVL12:
  44:src/riscv.cpp ****                 __asm__ volatile ("mv %0, a3" : "=r" (arg));
 254              		.loc 1 44 17 is_stmt 1
  44:src/riscv.cpp ****                 __asm__ volatile ("mv %0, a3" : "=r" (arg));
 255              		.loc 1 44 60 is_stmt 0
 256              	# 44 "src/riscv.cpp" 1
 257              		mv s5, a3
 258              	# 0 "" 2
 259              	.LVL13:
  46:src/riscv.cpp ****                 if (body != 0)
 260              		.loc 1 46 17 is_stmt 1
 261              	#NO_APP
 262 00f0 638E0902 		beqz	s3,.L13
GAS LISTING /tmp/ccr7YwtU.s 			page 11


  47:src/riscv.cpp ****                     stack = (uint64 *)new uint64[DEFAULT_STACK_SIZE];
 263              		.loc 1 47 21
  47:src/riscv.cpp ****                     stack = (uint64 *)new uint64[DEFAULT_STACK_SIZE];
 264              		.loc 1 47 68 is_stmt 0
 265 00f4 37850000 		li	a0,32768
 266 00f8 97000000 		call	_Znam@plt
 266      E7800000 
 267              	.LVL14:
 268 0100 13060500 		mv	a2,a0
 269              	.LVL15:
 270              	.L8:
  51:src/riscv.cpp ****                 *handle = TCB::createThread(body, arg, stack, true);
 271              		.loc 1 51 17 is_stmt 1
  51:src/riscv.cpp ****                 *handle = TCB::createThread(body, arg, stack, true);
 272              		.loc 1 51 44 is_stmt 0
 273 0104 93061000 		li	a3,1
 274 0108 93850A00 		mv	a1,s5
 275 010c 13850900 		mv	a0,s3
 276 0110 97000000 		call	_ZN3TCB12createThreadEPFvPvES0_S0_b@plt
 276      E7800000 
 277              	.LVL16:
  51:src/riscv.cpp ****                 *handle = TCB::createThread(body, arg, stack, true);
 278              		.loc 1 51 25
 279 0118 2330AA00 		sd	a0,0(s4)
  53:src/riscv.cpp ****                 int ret;
 280              		.loc 1 53 17 is_stmt 1
  54:src/riscv.cpp ****                 ret = (*handle) != nullptr ? 0 : -1;
 281              		.loc 1 54 17
  54:src/riscv.cpp ****                 ret = (*handle) != nullptr ? 0 : -1;
 282              		.loc 1 54 44 is_stmt 0
 283 011c 630C0500 		beqz	a0,.L14
 284 0120 93070000 		li	a5,0
 285              	.L9:
 286              	.LVL17:
  55:src/riscv.cpp ****                 __asm__ volatile ("mv a0, %0" : : "r" (ret));
 287              		.loc 1 55 17 is_stmt 1 discriminator 4
  55:src/riscv.cpp ****                 __asm__ volatile ("mv a0, %0" : : "r" (ret));
 288              		.loc 1 55 61 is_stmt 0 discriminator 4
 289              	#APP
 290              	# 55 "src/riscv.cpp" 1
  57:src/riscv.cpp ****                 break;
 291              		mv a0, a5
 292              	# 0 "" 2
 293              		.loc 1 57 17 is_stmt 1 discriminator 4
 294              	#NO_APP
 295 0128 6FF01FF9 		j	.L7
 296              	.LVL18:
 297              	.L13:
  49:src/riscv.cpp ****                     stack = 0;
 298              		.loc 1 49 27 is_stmt 0
 299 012c 13060000 		li	a2,0
 300 0130 6FF05FFD 		j	.L8
 301              	.LVL19:
 302              	.L14:
  54:src/riscv.cpp ****                 ret = (*handle) != nullptr ? 0 : -1;
 303              		.loc 1 54 44
 304 0134 9307F0FF 		li	a5,-1
GAS LISTING /tmp/ccr7YwtU.s 			page 12


 305 0138 6FF0DFFE 		j	.L9
 306              	.LVL20:
 307              	.L6:
  59:src/riscv.cpp ****             case 0x13:
 308              		.loc 1 59 13 is_stmt 1
  60:src/riscv.cpp ****                 printString("ecall dispatch");
 309              		.loc 1 60 17
  60:src/riscv.cpp ****                 printString("ecall dispatch");
 310              		.loc 1 60 28 is_stmt 0
 311 013c 17050000 		lla	a0,.LC0
 311      13050500 
 312 0144 97000000 		call	_Z11printStringPKc@plt
 312      E7800000 
 313              	.LVL21:
  61:src/riscv.cpp ****                 TCB::dispatch();
 314              		.loc 1 61 17 is_stmt 1
  61:src/riscv.cpp ****                 TCB::dispatch();
 315              		.loc 1 61 30 is_stmt 0
 316 014c 97000000 		call	_ZN3TCB8dispatchEv@plt
 316      E7800000 
 317              	.LVL22:
  63:src/riscv.cpp ****                 break;
 318              		.loc 1 63 17 is_stmt 1
 319 0154 6FF05FF6 		j	.L7
 320              	.LVL23:
 321              	.L17:
 322              	.LBE58:
 323              	.LBE63:
 324              	.LBE64:
 325              	.LBB65:
 326              	.LBB36:
  74:src/riscv.cpp ****         TCB::timeSliceCounter++;
 327              		.loc 1 74 9
  74:src/riscv.cpp ****         TCB::timeSliceCounter++;
 328              		.loc 1 74 30 is_stmt 0
 329 0158 17070000 		la	a4,_ZN3TCB16timeSliceCounterE
 329      03370700 
 330              	.LVL24:
 331 0160 83370700 		ld	a5,0(a4)
 332 0164 93871700 		addi	a5,a5,1
 333 0168 2330F700 		sd	a5,0(a4)
  76:src/riscv.cpp ****         if (TCB::timeSliceCounter >= TCB::running->getTimeSlice())
 334              		.loc 1 76 9 is_stmt 1
 335              	.LBB37:
  76:src/riscv.cpp ****         if (TCB::timeSliceCounter >= TCB::running->getTimeSlice())
 336              		.loc 1 76 64 is_stmt 0
 337 016c 17070000 		la	a4,_ZN3TCB7runningE
 337      03370700 
 338 0174 03370700 		ld	a4,0(a4)
 339              	.LVL25:
 340              	.LBB38:
 341              	.LBB39:
 342              		.file 3 "src/../h/tcb.hpp"
   1:src/../h/tcb.hpp **** //
   2:src/../h/tcb.hpp **** // Created by os on 2/11/23.
   3:src/../h/tcb.hpp **** //
   4:src/../h/tcb.hpp **** 
GAS LISTING /tmp/ccr7YwtU.s 			page 13


   5:src/../h/tcb.hpp **** #ifndef PROJECT_BASE_TCB_HPP
   6:src/../h/tcb.hpp **** #define PROJECT_BASE_TCB_HPP
   7:src/../h/tcb.hpp **** 
   8:src/../h/tcb.hpp **** #include "../lib/hw.h"
   9:src/../h/tcb.hpp **** #include "scheduler.hpp"
  10:src/../h/tcb.hpp **** 
  11:src/../h/tcb.hpp **** // Thread Control Block
  12:src/../h/tcb.hpp **** class TCB {
  13:src/../h/tcb.hpp **** public:
  14:src/../h/tcb.hpp ****     ~TCB() { delete[] stack; }
  15:src/../h/tcb.hpp **** 
  16:src/../h/tcb.hpp ****     bool isFinished() const { return finished; }
  17:src/../h/tcb.hpp **** 
  18:src/../h/tcb.hpp ****     void setFinished(bool value) { finished = value; }
  19:src/../h/tcb.hpp **** 
  20:src/../h/tcb.hpp ****     uint64 getTimeSlice() const { return timeSlice; }
 343              		.loc 3 20 35 is_stmt 1
 344              		.loc 3 20 42 is_stmt 0
 345 0178 03378702 		ld	a4,40(a4)
 346              	.LVL26:
 347              	.LBE39:
 348              	.LBE38:
  76:src/riscv.cpp ****         if (TCB::timeSliceCounter >= TCB::running->getTimeSlice())
 349              		.loc 1 76 9
 350 017c 63F8E700 		bgeu	a5,a4,.L18
 351              	.LVL27:
 352              	.L12:
 353              	.LBE37:
  86:src/riscv.cpp ****         mc_sip(SIP_SSIP);
 354              		.loc 1 86 9 is_stmt 1
 355              	.LBB49:
 356              	.LBB50:
 148:src/../h/riscv.hpp **** }
 357              		.loc 2 148 5
 148:src/../h/riscv.hpp **** }
 358              		.loc 2 148 64 is_stmt 0
 359 0180 93072000 		li	a5,2
 360              	#APP
 361              	# 148 "src/../h/riscv.hpp" 1
 149:src/../h/riscv.hpp **** 
 362              		csrc sip, a5
 363              	# 0 "" 2
 364              		.loc 2 149 1
 365              	#NO_APP
 366 0188 6FF09FF3 		j	.L3
 367              	.LVL28:
 368              	.L18:
 369              	.LBE50:
 370              	.LBE49:
 371              	.LBB51:
 372              	.LBB40:
  78:src/riscv.cpp ****             uint64 sepc = r_sepc();
 373              		.loc 1 78 13 is_stmt 1
 374              	.LBB41:
 375              	.LBB42:
 107:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[sepc], sepc" : [sepc] "=r"(sepc));
 376              		.loc 2 107 5
GAS LISTING /tmp/ccr7YwtU.s 			page 14


 108:src/../h/riscv.hpp ****     return sepc;
 377              		.loc 2 108 5
 108:src/../h/riscv.hpp ****     return sepc;
 378              		.loc 2 108 64 is_stmt 0
 379              	#APP
 380              	# 108 "src/../h/riscv.hpp" 1
 381              		csrr a5, sepc
 382              	# 0 "" 2
 383              	#NO_APP
 384 0190 233CF4FA 		sd	a5,-72(s0)
 109:src/../h/riscv.hpp **** }
 385              		.loc 2 109 5 is_stmt 1
 109:src/../h/riscv.hpp **** }
 386              		.loc 2 109 12 is_stmt 0
 387 0194 833484FB 		ld	s1,-72(s0)
 388              	.LVL29:
 389              	.LBE42:
 390              	.LBE41:
  79:src/riscv.cpp ****             uint64 sstatus = r_sstatus();
 391              		.loc 1 79 13 is_stmt 1
 392              	.LBB43:
 393              	.LBB44:
 175:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[sstatus], sstatus" : [sstatus] "=r"(sstatus));
 394              		.loc 2 175 5
 176:src/../h/riscv.hpp ****     return sstatus;
 395              		.loc 2 176 5
 176:src/../h/riscv.hpp ****     return sstatus;
 396              		.loc 2 176 76 is_stmt 0
 397              	#APP
 398              	# 176 "src/../h/riscv.hpp" 1
 399              		csrr a5, sstatus
 400              	# 0 "" 2
 401              	#NO_APP
 402 019c 2338F4FA 		sd	a5,-80(s0)
 177:src/../h/riscv.hpp **** }
 403              		.loc 2 177 5 is_stmt 1
 177:src/../h/riscv.hpp **** }
 404              		.loc 2 177 12 is_stmt 0
 405 01a0 033904FB 		ld	s2,-80(s0)
 406              	.LVL30:
 407              	.LBE44:
 408              	.LBE43:
  80:src/riscv.cpp ****             TCB::timeSliceCounter = 0;
 409              		.loc 1 80 13 is_stmt 1
  80:src/riscv.cpp ****             TCB::timeSliceCounter = 0;
 410              		.loc 1 80 35 is_stmt 0
 411 01a4 97070000 		la	a5,_ZN3TCB16timeSliceCounterE
 411      83B70700 
 412 01ac 23B00700 		sd	zero,0(a5)
  81:src/riscv.cpp ****             TCB::dispatch();
 413              		.loc 1 81 13 is_stmt 1
  81:src/riscv.cpp ****             TCB::dispatch();
 414              		.loc 1 81 26 is_stmt 0
 415 01b0 97000000 		call	_ZN3TCB8dispatchEv@plt
 415      E7800000 
 416              	.LVL31:
  82:src/riscv.cpp ****             w_sstatus(sstatus);
GAS LISTING /tmp/ccr7YwtU.s 			page 15


 417              		.loc 1 82 13 is_stmt 1
 418              	.LBB45:
 419              	.LBB46:
 182:src/../h/riscv.hpp **** }
 420              		.loc 2 182 5
 182:src/../h/riscv.hpp **** }
 421              		.loc 2 182 77 is_stmt 0
 422              	#APP
 423              	# 182 "src/../h/riscv.hpp" 1
 424              		csrw sstatus, s2
 425              	# 0 "" 2
 426              	.LVL32:
 427              	#NO_APP
 428              	.LBE46:
 429              	.LBE45:
  83:src/riscv.cpp ****             w_sepc(sepc);
 430              		.loc 1 83 13 is_stmt 1
 431              	.LBB47:
 432              	.LBB48:
 114:src/../h/riscv.hpp **** }
 433              		.loc 2 114 5
 114:src/../h/riscv.hpp **** }
 434              		.loc 2 114 65 is_stmt 0
 435              	#APP
 436              	# 114 "src/../h/riscv.hpp" 1
 115:src/../h/riscv.hpp **** 
 437              		csrw sepc, s1
 438              	# 0 "" 2
 439              		.loc 2 115 1
 440              	#NO_APP
 441 01c0 6FF01FFC 		j	.L12
 442              	.LBE48:
 443              	.LBE47:
 444              	.LBE40:
 445              	.LBE51:
 446              	.LBE36:
 447              	.LBE65:
 448              	.LBE68:
 449              		.cfi_endproc
 450              	.LFE34:
 452              	.Letext0:
 453              		.file 4 "src/../h/../lib/hw.h"
 454              		.file 5 "src/../h/syscall_c.h"
 455              		.file 6 "src/../h/print.hpp"
 456              		.file 7 "src/../lib/console.h"
GAS LISTING /tmp/ccr7YwtU.s 			page 16


DEFINED SYMBOLS
                            *ABS*:0000000000000000 riscv.cpp
     /tmp/ccr7YwtU.s:9      .text:0000000000000000 _ZN5Riscv10popSppSpieEv
     /tmp/ccr7YwtU.s:13     .text:0000000000000000 .L0 
     /tmp/ccr7YwtU.s:14     .text:0000000000000000 .L0 
     /tmp/ccr7YwtU.s:15     .text:0000000000000004 .L0 
     /tmp/ccr7YwtU.s:17     .text:0000000000000008 .L0 
     /tmp/ccr7YwtU.s:19     .text:000000000000000c .L0 
     /tmp/ccr7YwtU.s:21     .text:000000000000000c .L0 
       src/riscv.cpp:15     .text:000000000000000c .L0 
     /tmp/ccr7YwtU.s:27     .text:0000000000000010 .L0 
       src/riscv.cpp:16     .text:0000000000000010 .L0 
     /tmp/ccr7YwtU.s:33     .text:0000000000000014 .L0 
     /tmp/ccr7YwtU.s:34     .text:0000000000000018 .L0 
     /tmp/ccr7YwtU.s:35     .text:0000000000000018 .L0 
     /tmp/ccr7YwtU.s:37     .text:000000000000001c .L0 
     /tmp/ccr7YwtU.s:39     .text:0000000000000020 .L0 
     /tmp/ccr7YwtU.s:50     .text:0000000000000020 _ZN5Riscv20handleSupervisorTrapEv
     /tmp/ccr7YwtU.s:53     .text:0000000000000020 .L0 
     /tmp/ccr7YwtU.s:54     .text:0000000000000020 .L0 
     /tmp/ccr7YwtU.s:55     .text:0000000000000024 .L0 
     /tmp/ccr7YwtU.s:63     .text:0000000000000040 .L0 
     /tmp/ccr7YwtU.s:64     .text:0000000000000040 .L0 
     /tmp/ccr7YwtU.s:65     .text:0000000000000040 .L0 
     /tmp/ccr7YwtU.s:66     .text:0000000000000040 .L0 
     /tmp/ccr7YwtU.s:67     .text:0000000000000040 .L0 
     /tmp/ccr7YwtU.s:68     .text:0000000000000040 .L0 
     /tmp/ccr7YwtU.s:69     .text:0000000000000040 .L0 
     /tmp/ccr7YwtU.s:71     .text:0000000000000044 .L0 
     /tmp/ccr7YwtU.s:76     .text:0000000000000044 .L0 
     /tmp/ccr7YwtU.s:77     .text:0000000000000044 .L0 
     /tmp/ccr7YwtU.s:78     .text:0000000000000044 .L0 
  src/../h/riscv.hpp:96     .text:0000000000000044 .L0 
     /tmp/ccr7YwtU.s:86     .text:000000000000004c .L0 
     /tmp/ccr7YwtU.s:87     .text:000000000000004c .L0 
     /tmp/ccr7YwtU.s:93     .text:0000000000000050 .L0 
     /tmp/ccr7YwtU.s:94     .text:0000000000000050 .L0 
     /tmp/ccr7YwtU.s:96     .text:0000000000000054 .L0 
     /tmp/ccr7YwtU.s:102    .text:000000000000005c .L0 
     /tmp/ccr7YwtU.s:107    .text:000000000000006c .L0 
     /tmp/ccr7YwtU.s:112    .text:000000000000007c .L0 
     /tmp/ccr7YwtU.s:113    .text:000000000000007c .L0 
     /tmp/ccr7YwtU.s:118    .text:0000000000000084 .L0 
     /tmp/ccr7YwtU.s:126    .text:0000000000000088 .L0 
     /tmp/ccr7YwtU.s:127    .text:0000000000000088 .L0 
     /tmp/ccr7YwtU.s:128    .text:0000000000000088 .L0 
  src/../h/riscv.hpp:108    .text:0000000000000088 .L0 
     /tmp/ccr7YwtU.s:136    .text:0000000000000090 .L0 
     /tmp/ccr7YwtU.s:137    .text:0000000000000090 .L0 
     /tmp/ccr7YwtU.s:141    .text:0000000000000094 .L0 
     /tmp/ccr7YwtU.s:146    .text:0000000000000098 .L0 
     /tmp/ccr7YwtU.s:147    .text:0000000000000098 .L0 
     /tmp/ccr7YwtU.s:148    .text:0000000000000098 .L0 
  src/../h/riscv.hpp:176    .text:0000000000000098 .L0 
     /tmp/ccr7YwtU.s:156    .text:00000000000000a0 .L0 
     /tmp/ccr7YwtU.s:157    .text:00000000000000a0 .L0 
     /tmp/ccr7YwtU.s:162    .text:00000000000000a4 .L0 
GAS LISTING /tmp/ccr7YwtU.s 			page 17


     /tmp/ccr7YwtU.s:163    .text:00000000000000a4 .L0 
       src/riscv.cpp:32     .text:00000000000000a4 .L0 
     /tmp/ccr7YwtU.s:172    .text:00000000000000a8 .L0 
     /tmp/ccr7YwtU.s:183    .text:00000000000000b8 .L0 
     /tmp/ccr7YwtU.s:184    .text:00000000000000b8 .L0 
  src/../h/riscv.hpp:182    .text:00000000000000b8 .L0 
     /tmp/ccr7YwtU.s:196    .text:00000000000000bc .L0 
     /tmp/ccr7YwtU.s:197    .text:00000000000000bc .L0 
  src/../h/riscv.hpp:114    .text:00000000000000bc .L0 
     /tmp/ccr7YwtU.s:210    .text:00000000000000c0 .L0 
     /tmp/ccr7YwtU.s:211    .text:00000000000000c4 .L0 
     /tmp/ccr7YwtU.s:212    .text:00000000000000c4 .L0 
     /tmp/ccr7YwtU.s:214    .text:00000000000000c8 .L0 
     /tmp/ccr7YwtU.s:215    .text:00000000000000c8 .L0 
     /tmp/ccr7YwtU.s:217    .text:00000000000000cc .L0 
     /tmp/ccr7YwtU.s:219    .text:00000000000000d0 .L0 
     /tmp/ccr7YwtU.s:221    .text:00000000000000d4 .L0 
     /tmp/ccr7YwtU.s:223    .text:00000000000000d8 .L0 
     /tmp/ccr7YwtU.s:225    .text:00000000000000dc .L0 
     /tmp/ccr7YwtU.s:227    .text:00000000000000e0 .L0 
     /tmp/ccr7YwtU.s:231    .text:00000000000000e4 .L0 
     /tmp/ccr7YwtU.s:237    .text:00000000000000e4 .L0 
     /tmp/ccr7YwtU.s:238    .text:00000000000000e4 .L0 
     /tmp/ccr7YwtU.s:239    .text:00000000000000e4 .L0 
     /tmp/ccr7YwtU.s:240    .text:00000000000000e4 .L0 
     /tmp/ccr7YwtU.s:241    .text:00000000000000e4 .L0 
     /tmp/ccr7YwtU.s:242    .text:00000000000000e4 .L0 
       src/riscv.cpp:42     .text:00000000000000e4 .L0 
     /tmp/ccr7YwtU.s:249    .text:00000000000000e8 .L0 
       src/riscv.cpp:43     .text:00000000000000e8 .L0 
     /tmp/ccr7YwtU.s:255    .text:00000000000000ec .L0 
       src/riscv.cpp:44     .text:00000000000000ec .L0 
     /tmp/ccr7YwtU.s:262    .text:00000000000000f0 .L0 
     /tmp/ccr7YwtU.s:264    .text:00000000000000f4 .L0 
     /tmp/ccr7YwtU.s:265    .text:00000000000000f4 .L0 
     /tmp/ccr7YwtU.s:272    .text:0000000000000104 .L0 
     /tmp/ccr7YwtU.s:273    .text:0000000000000104 .L0 
     /tmp/ccr7YwtU.s:279    .text:0000000000000118 .L0 
     /tmp/ccr7YwtU.s:281    .text:000000000000011c .L0 
     /tmp/ccr7YwtU.s:282    .text:000000000000011c .L0 
     /tmp/ccr7YwtU.s:283    .text:000000000000011c .L0 
     /tmp/ccr7YwtU.s:288    .text:0000000000000124 .L0 
       src/riscv.cpp:55     .text:0000000000000124 .L0 
     /tmp/ccr7YwtU.s:295    .text:0000000000000128 .L0 
     /tmp/ccr7YwtU.s:299    .text:000000000000012c .L0 
     /tmp/ccr7YwtU.s:304    .text:0000000000000134 .L0 
     /tmp/ccr7YwtU.s:309    .text:000000000000013c .L0 
     /tmp/ccr7YwtU.s:310    .text:000000000000013c .L0 
     /tmp/ccr7YwtU.s:311    .text:000000000000013c .L0 
     /tmp/ccr7YwtU.s:315    .text:000000000000014c .L0 
     /tmp/ccr7YwtU.s:316    .text:000000000000014c .L0 
     /tmp/ccr7YwtU.s:319    .text:0000000000000154 .L0 
     /tmp/ccr7YwtU.s:328    .text:0000000000000158 .L0 
     /tmp/ccr7YwtU.s:329    .text:0000000000000158 .L0 
     /tmp/ccr7YwtU.s:336    .text:000000000000016c .L0 
     /tmp/ccr7YwtU.s:337    .text:000000000000016c .L0 
     /tmp/ccr7YwtU.s:344    .text:0000000000000178 .L0 
GAS LISTING /tmp/ccr7YwtU.s 			page 18


     /tmp/ccr7YwtU.s:345    .text:0000000000000178 .L0 
     /tmp/ccr7YwtU.s:350    .text:000000000000017c .L0 
     /tmp/ccr7YwtU.s:357    .text:0000000000000180 .L0 
     /tmp/ccr7YwtU.s:358    .text:0000000000000180 .L0 
     /tmp/ccr7YwtU.s:359    .text:0000000000000180 .L0 
     /tmp/ccr7YwtU.s:366    .text:0000000000000188 .L0 
     /tmp/ccr7YwtU.s:376    .text:000000000000018c .L0 
     /tmp/ccr7YwtU.s:377    .text:000000000000018c .L0 
     /tmp/ccr7YwtU.s:378    .text:000000000000018c .L0 
  src/../h/riscv.hpp:108    .text:000000000000018c .L0 
     /tmp/ccr7YwtU.s:386    .text:0000000000000194 .L0 
     /tmp/ccr7YwtU.s:387    .text:0000000000000194 .L0 
     /tmp/ccr7YwtU.s:394    .text:0000000000000198 .L0 
     /tmp/ccr7YwtU.s:395    .text:0000000000000198 .L0 
     /tmp/ccr7YwtU.s:396    .text:0000000000000198 .L0 
  src/../h/riscv.hpp:176    .text:0000000000000198 .L0 
     /tmp/ccr7YwtU.s:404    .text:00000000000001a0 .L0 
     /tmp/ccr7YwtU.s:405    .text:00000000000001a0 .L0 
     /tmp/ccr7YwtU.s:410    .text:00000000000001a4 .L0 
     /tmp/ccr7YwtU.s:411    .text:00000000000001a4 .L0 
     /tmp/ccr7YwtU.s:414    .text:00000000000001b0 .L0 
     /tmp/ccr7YwtU.s:415    .text:00000000000001b0 .L0 
     /tmp/ccr7YwtU.s:420    .text:00000000000001b8 .L0 
     /tmp/ccr7YwtU.s:421    .text:00000000000001b8 .L0 
  src/../h/riscv.hpp:182    .text:00000000000001b8 .L0 
     /tmp/ccr7YwtU.s:433    .text:00000000000001bc .L0 
     /tmp/ccr7YwtU.s:434    .text:00000000000001bc .L0 
  src/../h/riscv.hpp:114    .text:00000000000001bc .L0 
     /tmp/ccr7YwtU.s:441    .text:00000000000001c0 .L0 
     /tmp/ccr7YwtU.s:449    .text:00000000000001c4 .L0 
     /tmp/ccr7YwtU.s:457    .text:00000000000001c4 .L0 
     /tmp/ccr7YwtU.s:44     .rodata.str1.8:0000000000000000 .LC0
     /tmp/ccr7YwtU.s:311    .text:000000000000013c .L0 
     /tmp/ccr7YwtU.s:329    .text:0000000000000158 .L0 
     /tmp/ccr7YwtU.s:337    .text:000000000000016c .L0 
     /tmp/ccr7YwtU.s:411    .text:00000000000001a4 .L0 
     /tmp/ccr7YwtU.s:120    .text:0000000000000088 .L16
     /tmp/ccr7YwtU.s:321    .text:0000000000000158 .L17
     /tmp/ccr7YwtU.s:204    .text:00000000000000c0 .L3
     /tmp/ccr7YwtU.s:230    .text:00000000000000e4 .L5
     /tmp/ccr7YwtU.s:307    .text:000000000000013c .L6
     /tmp/ccr7YwtU.s:297    .text:000000000000012c .L13
     /tmp/ccr7YwtU.s:302    .text:0000000000000134 .L14
     /tmp/ccr7YwtU.s:178    .text:00000000000000b8 .L7
     /tmp/ccr7YwtU.s:270    .text:0000000000000104 .L8
     /tmp/ccr7YwtU.s:285    .text:0000000000000124 .L9
     /tmp/ccr7YwtU.s:368    .text:000000000000018c .L18
     /tmp/ccr7YwtU.s:352    .text:0000000000000180 .L12
     /tmp/ccr7YwtU.s:1497   .debug_abbrev:0000000000000000 .Ldebug_abbrev0
     /tmp/ccr7YwtU.s:2792   .debug_str:0000000000000549 .LASF99
     /tmp/ccr7YwtU.s:2746   .debug_str:000000000000041e .LASF100
     /tmp/ccr7YwtU.s:2668   .debug_str:00000000000001df .LASF101
     /tmp/ccr7YwtU.s:5      .text:0000000000000000 .Ltext0
     /tmp/ccr7YwtU.s:452    .text:00000000000001c4 .Letext0
     /tmp/ccr7YwtU.s:2598   .debug_line:0000000000000000 .Ldebug_line0
     /tmp/ccr7YwtU.s:2726   .debug_str:00000000000003b2 .LASF0
     /tmp/ccr7YwtU.s:2742   .debug_str:00000000000003f8 .LASF1
GAS LISTING /tmp/ccr7YwtU.s 			page 19


     /tmp/ccr7YwtU.s:2716   .debug_str:000000000000036b .LASF2
     /tmp/ccr7YwtU.s:2692   .debug_str:00000000000002c8 .LASF4
     /tmp/ccr7YwtU.s:2772   .debug_str:00000000000004c7 .LASF3
     /tmp/ccr7YwtU.s:2626   .debug_str:000000000000009b .LASF5
     /tmp/ccr7YwtU.s:2744   .debug_str:000000000000040b .LASF6
     /tmp/ccr7YwtU.s:2724   .debug_str:000000000000039f .LASF7
     /tmp/ccr7YwtU.s:2796   .debug_str:000000000000061c .LASF8
     /tmp/ccr7YwtU.s:2678   .debug_str:0000000000000235 .LASF9
     /tmp/ccr7YwtU.s:2752   .debug_str:000000000000043d .LASF10
     /tmp/ccr7YwtU.s:2794   .debug_str:000000000000060d .LASF11
     /tmp/ccr7YwtU.s:2628   .debug_str:00000000000000a2 .LASF12
     /tmp/ccr7YwtU.s:2606   .debug_str:000000000000002b .LASF13
     /tmp/ccr7YwtU.s:2636   .debug_str:00000000000000ec .LASF14
     /tmp/ccr7YwtU.s:2764   .debug_str:0000000000000483 .LASF15
     /tmp/ccr7YwtU.s:2644   .debug_str:0000000000000110 .LASF16
     /tmp/ccr7YwtU.s:2738   .debug_str:00000000000003e7 .LASF60
     /tmp/ccr7YwtU.s:2704   .debug_str:0000000000000310 .LASF102
     /tmp/ccr7YwtU.s:2780   .debug_str:0000000000000500 .LASF17
     /tmp/ccr7YwtU.s:2736   .debug_str:00000000000003de .LASF18
     /tmp/ccr7YwtU.s:2698   .debug_str:00000000000002dd .LASF19
     /tmp/ccr7YwtU.s:2762   .debug_str:0000000000000478 .LASF20
     /tmp/ccr7YwtU.s:2812   .debug_str:0000000000000692 .LASF22
     /tmp/ccr7YwtU.s:2620   .debug_str:000000000000006c .LASF21
     /tmp/ccr7YwtU.s:2656   .debug_str:000000000000017b .LASF23
     /tmp/ccr7YwtU.s:2782   .debug_str:0000000000000509 .LASF24
     /tmp/ccr7YwtU.s:2604   .debug_str:0000000000000011 .LASF25
     /tmp/ccr7YwtU.s:2608   .debug_str:000000000000003b .LASF26
     /tmp/ccr7YwtU.s:2660   .debug_str:000000000000019e .LASF28
     /tmp/ccr7YwtU.s:2654   .debug_str:0000000000000172 .LASF30
     /tmp/ccr7YwtU.s:2652   .debug_str:000000000000015d .LASF32
     /tmp/ccr7YwtU.s:2776   .debug_str:00000000000004ea .LASF27
     /tmp/ccr7YwtU.s:2754   .debug_str:000000000000044c .LASF29
     /tmp/ccr7YwtU.s:2790   .debug_str:0000000000000542 .LASF31
     /tmp/ccr7YwtU.s:2786   .debug_str:000000000000051d .LASF33
     /tmp/ccr7YwtU.s:2672   .debug_str:0000000000000210 .LASF34
     /tmp/ccr7YwtU.s:2646   .debug_str:0000000000000126 .LASF35
     /tmp/ccr7YwtU.s:2602   .debug_str:0000000000000009 .LASF36
     /tmp/ccr7YwtU.s:2684   .debug_str:0000000000000271 .LASF37
     /tmp/ccr7YwtU.s:2624   .debug_str:0000000000000093 .LASF38
     /tmp/ccr7YwtU.s:2630   .debug_str:00000000000000b2 .LASF39
     /tmp/ccr7YwtU.s:2816   .debug_str:00000000000006b5 .LASF40
     /tmp/ccr7YwtU.s:2662   .debug_str:00000000000001b3 .LASF41
     /tmp/ccr7YwtU.s:2728   .debug_str:00000000000003bf .LASF42
     /tmp/ccr7YwtU.s:2808   .debug_str:000000000000067a .LASF43
     /tmp/ccr7YwtU.s:2618   .debug_str:0000000000000065 .LASF44
     /tmp/ccr7YwtU.s:2670   .debug_str:00000000000001fd .LASF45
     /tmp/ccr7YwtU.s:2674   .debug_str:0000000000000218 .LASF46
     /tmp/ccr7YwtU.s:2788   .debug_str:0000000000000530 .LASF47
     /tmp/ccr7YwtU.s:2616   .debug_str:000000000000005f .LASF48
     /tmp/ccr7YwtU.s:2822   .debug_str:00000000000006f8 .LASF49
     /tmp/ccr7YwtU.s:2814   .debug_str:00000000000006aa .LASF50
     /tmp/ccr7YwtU.s:2770   .debug_str:00000000000004af .LASF51
     /tmp/ccr7YwtU.s:2740   .debug_str:00000000000003ed .LASF52
     /tmp/ccr7YwtU.s:2708   .debug_str:0000000000000326 .LASF53
     /tmp/ccr7YwtU.s:2634   .debug_str:00000000000000e2 .LASF54
     /tmp/ccr7YwtU.s:2688   .debug_str:000000000000028a .LASF55
     /tmp/ccr7YwtU.s:2720   .debug_str:0000000000000385 .LASF56
GAS LISTING /tmp/ccr7YwtU.s 			page 20


     /tmp/ccr7YwtU.s:2682   .debug_str:000000000000025b .LASF57
     /tmp/ccr7YwtU.s:2778   .debug_str:00000000000004f1 .LASF58
     /tmp/ccr7YwtU.s:2632   .debug_str:00000000000000c6 .LASF59
     /tmp/ccr7YwtU.s:2798   .debug_str:000000000000062c .LASF79
     /tmp/ccr7YwtU.s:2702   .debug_str:00000000000002ee .LASF81
     /tmp/ccr7YwtU.s:2614   .debug_str:0000000000000057 .LASF103
     /tmp/ccr7YwtU.s:2686   .debug_str:0000000000000285 .LASF61
     /tmp/ccr7YwtU.s:2756   .debug_str:000000000000045f .LASF63
     /tmp/ccr7YwtU.s:2748   .debug_str:000000000000042c .LASF65
     /tmp/ccr7YwtU.s:2676   .debug_str:000000000000021e .LASF67
     /tmp/ccr7YwtU.s:2718   .debug_str:0000000000000379 .LASF62
     /tmp/ccr7YwtU.s:2818   .debug_str:00000000000006bd .LASF64
     /tmp/ccr7YwtU.s:2710   .debug_str:000000000000033e .LASF66
     /tmp/ccr7YwtU.s:2622   .debug_str:000000000000007a .LASF68
     /tmp/ccr7YwtU.s:2642   .debug_str:0000000000000103 .LASF69
     /tmp/ccr7YwtU.s:2820   .debug_str:00000000000006d4 .LASF70
     /tmp/ccr7YwtU.s:2760   .debug_str:0000000000000473 .LASF89
     /tmp/ccr7YwtU.s:2766   .debug_str:0000000000000499 .LASF71
     /tmp/ccr7YwtU.s:2722   .debug_str:000000000000038f .LASF72
     /tmp/ccr7YwtU.s:2658   .debug_str:0000000000000196 .LASF104
     /tmp/ccr7YwtU.s:2680   .debug_str:0000000000000243 .LASF105
     /tmp/ccr7YwtU.s:2696   .debug_str:00000000000002d8 .LASF73
     /tmp/ccr7YwtU.s:2640   .debug_str:00000000000000fd .LASF74
     /tmp/ccr7YwtU.s:2700   .debug_str:00000000000002e6 .LASF75
     /tmp/ccr7YwtU.s:2734   .debug_str:00000000000003d4 .LASF76
     /tmp/ccr7YwtU.s:2694   .debug_str:00000000000002cf .LASF77
     /tmp/ccr7YwtU.s:2712   .debug_str:000000000000034b .LASF78
     /tmp/ccr7YwtU.s:2714   .debug_str:000000000000035d .LASF80
     /tmp/ccr7YwtU.s:2802   .debug_str:000000000000064f .LASF82
     /tmp/ccr7YwtU.s:2800   .debug_str:0000000000000641 .LASF106
     /tmp/ccr7YwtU.s:2690   .debug_str:00000000000002a0 .LASF107
     /tmp/ccr7YwtU.s:2730   .debug_str:00000000000003c6 .LASF83
     /tmp/ccr7YwtU.s:2664   .debug_str:00000000000001c7 .LASF84
     /tmp/ccr7YwtU.s:2774   .debug_str:00000000000004d9 .LASF108
     /tmp/ccr7YwtU.s:2706   .debug_str:000000000000031b .LASF85
     /tmp/ccr7YwtU.s:2804   .debug_str:0000000000000668 .LASF86
     /tmp/ccr7YwtU.s:2666   .debug_str:00000000000001da .LASF87
     /tmp/ccr7YwtU.s:2600   .debug_str:0000000000000000 .LASF88
     /tmp/ccr7YwtU.s:51     .text:0000000000000020 .LFB34
     /tmp/ccr7YwtU.s:450    .text:00000000000001c4 .LFE34
     /tmp/ccr7YwtU.s:2610   .debug_str:0000000000000044 .LASF90
     /tmp/ccr7YwtU.s:2414   .debug_loc:0000000000000000 .LLST0
     /tmp/ccr7YwtU.s:2590   .debug_ranges:0000000000000000 .Ldebug_ranges0
     /tmp/ccr7YwtU.s:2732   .debug_str:00000000000003cf .LASF91
     /tmp/ccr7YwtU.s:2465   .debug_loc:00000000000000c7 .LLST4
     /tmp/ccr7YwtU.s:2758   .debug_str:000000000000046b .LASF92
     /tmp/ccr7YwtU.s:2476   .debug_loc:00000000000000fd .LLST5
     /tmp/ccr7YwtU.s:2806   .debug_str:0000000000000673 .LASF93
     /tmp/ccr7YwtU.s:2487   .debug_loc:0000000000000133 .LLST6
     /tmp/ccr7YwtU.s:235    .text:00000000000000e4 .LBB58
     /tmp/ccr7YwtU.s:322    .text:0000000000000158 .LBE58
     /tmp/ccr7YwtU.s:2784   .debug_str:0000000000000516 .LASF94
     /tmp/ccr7YwtU.s:2506   .debug_loc:000000000000018f .LLST7
     /tmp/ccr7YwtU.s:2513   .debug_loc:00000000000001b2 .LLST8
     /tmp/ccr7YwtU.s:2520   .debug_loc:00000000000001d5 .LLST9
     /tmp/ccr7YwtU.s:2527   .debug_loc:00000000000001f8 .LLST10
     /tmp/ccr7YwtU.s:2534   .debug_loc:000000000000021b .LLST11
GAS LISTING /tmp/ccr7YwtU.s 			page 21


     /tmp/ccr7YwtU.s:267    .text:0000000000000100 .LVL14
     /tmp/ccr7YwtU.s:277    .text:0000000000000118 .LVL16
     /tmp/ccr7YwtU.s:313    .text:000000000000014c .LVL21
     /tmp/ccr7YwtU.s:317    .text:0000000000000154 .LVL22
     /tmp/ccr7YwtU.s:124    .text:0000000000000088 .LBB53
     /tmp/ccr7YwtU.s:139    .text:0000000000000094 .LBE53
     /tmp/ccr7YwtU.s:144    .text:0000000000000098 .LBB55
     /tmp/ccr7YwtU.s:160    .text:00000000000000a4 .LBE55
     /tmp/ccr7YwtU.s:181    .text:00000000000000b8 .LBB59
     /tmp/ccr7YwtU.s:192    .text:00000000000000bc .LBE59
     /tmp/ccr7YwtU.s:2541   .debug_loc:000000000000023e .LLST12
     /tmp/ccr7YwtU.s:194    .text:00000000000000bc .LBB61
     /tmp/ccr7YwtU.s:206    .text:00000000000000c0 .LBE61
     /tmp/ccr7YwtU.s:2548   .debug_loc:0000000000000261 .LLST13
     /tmp/ccr7YwtU.s:372    .text:000000000000018c .LBB40
     /tmp/ccr7YwtU.s:444    .text:00000000000001c4 .LBE40
     /tmp/ccr7YwtU.s:374    .text:000000000000018c .LBB41
     /tmp/ccr7YwtU.s:390    .text:0000000000000198 .LBE41
     /tmp/ccr7YwtU.s:392    .text:0000000000000198 .LBB43
     /tmp/ccr7YwtU.s:408    .text:00000000000001a4 .LBE43
     /tmp/ccr7YwtU.s:418    .text:00000000000001b8 .LBB45
     /tmp/ccr7YwtU.s:429    .text:00000000000001bc .LBE45
     /tmp/ccr7YwtU.s:2555   .debug_loc:0000000000000284 .LLST2
     /tmp/ccr7YwtU.s:431    .text:00000000000001bc .LBB47
     /tmp/ccr7YwtU.s:443    .text:00000000000001c4 .LBE47
     /tmp/ccr7YwtU.s:416    .text:00000000000001b8 .LVL31
     /tmp/ccr7YwtU.s:73     .text:0000000000000044 .LBB32
     /tmp/ccr7YwtU.s:90     .text:0000000000000050 .LBE32
     /tmp/ccr7YwtU.s:340    .text:0000000000000178 .LBB38
     /tmp/ccr7YwtU.s:348    .text:000000000000017c .LBE38
     /tmp/ccr7YwtU.s:2562   .debug_loc:00000000000002a7 .LLST1
     /tmp/ccr7YwtU.s:355    .text:0000000000000180 .LBB49
     /tmp/ccr7YwtU.s:370    .text:000000000000018c .LBE49
     /tmp/ccr7YwtU.s:2569   .debug_loc:00000000000002ca .LLST3
     /tmp/ccr7YwtU.s:114    .text:0000000000000084 .LVL1
     /tmp/ccr7YwtU.s:10     .text:0000000000000000 .LFB33
     /tmp/ccr7YwtU.s:40     .text:0000000000000020 .LFE33
     /tmp/ccr7YwtU.s:2810   .debug_str:000000000000068d .LASF109
     /tmp/ccr7YwtU.s:2638   .debug_str:00000000000000f8 .LASF95
     /tmp/ccr7YwtU.s:2750   .debug_str:0000000000000437 .LASF110
     /tmp/ccr7YwtU.s:2768   .debug_str:000000000000049f .LASF111
     /tmp/ccr7YwtU.s:2648   .debug_str:000000000000013a .LASF96
     /tmp/ccr7YwtU.s:2612   .debug_str:000000000000004b .LASF98
     /tmp/ccr7YwtU.s:2650   .debug_str:000000000000014d .LASF97
     /tmp/ccr7YwtU.s:88     .text:0000000000000050 .LVL0
     /tmp/ccr7YwtU.s:119    .text:0000000000000088 .LVL2
     /tmp/ccr7YwtU.s:173    .text:00000000000000ac .LVL6
     /tmp/ccr7YwtU.s:177    .text:00000000000000b8 .LVL7
     /tmp/ccr7YwtU.s:229    .text:00000000000000e4 .LVL10
     /tmp/ccr7YwtU.s:296    .text:000000000000012c .LVL18
     /tmp/ccr7YwtU.s:301    .text:0000000000000134 .LVL19
     /tmp/ccr7YwtU.s:306    .text:000000000000013c .LVL20
     /tmp/ccr7YwtU.s:320    .text:0000000000000158 .LVL23
     /tmp/ccr7YwtU.s:330    .text:0000000000000160 .LVL24
     /tmp/ccr7YwtU.s:351    .text:0000000000000180 .LVL27
     /tmp/ccr7YwtU.s:367    .text:000000000000018c .LVL28
     /tmp/ccr7YwtU.s:142    .text:0000000000000098 .LVL3
GAS LISTING /tmp/ccr7YwtU.s 			page 22


     /tmp/ccr7YwtU.s:202    .text:00000000000000c0 .LVL9
     /tmp/ccr7YwtU.s:158    .text:00000000000000a4 .LVL4
     /tmp/ccr7YwtU.s:168    .text:00000000000000a8 .LVL5
     /tmp/ccr7YwtU.s:247    .text:00000000000000e8 .LVL11
     /tmp/ccr7YwtU.s:253    .text:00000000000000ec .LVL12
     /tmp/ccr7YwtU.s:259    .text:00000000000000f0 .LVL13
     /tmp/ccr7YwtU.s:269    .text:0000000000000104 .LVL15
     /tmp/ccr7YwtU.s:286    .text:0000000000000124 .LVL17
     /tmp/ccr7YwtU.s:189    .text:00000000000000bc .LVL8
     /tmp/ccr7YwtU.s:426    .text:00000000000001bc .LVL32
     /tmp/ccr7YwtU.s:339    .text:0000000000000178 .LVL25
     /tmp/ccr7YwtU.s:346    .text:000000000000017c .LVL26
     /tmp/ccr7YwtU.s:458    .debug_info:0000000000000000 .Ldebug_info0
     /tmp/ccr7YwtU.s:122    .text:0000000000000088 .LBB52
     /tmp/ccr7YwtU.s:207    .text:00000000000000c0 .LBE52
     /tmp/ccr7YwtU.s:233    .text:00000000000000e4 .LBB64
     /tmp/ccr7YwtU.s:324    .text:0000000000000158 .LBE64

UNDEFINED SYMBOLS
console_handler
_Znam
_ZN3TCB12createThreadEPFvPvES0_S0_b
_Z11printStringPKc
_ZN3TCB8dispatchEv
_ZN3TCB16timeSliceCounterE
_ZN3TCB7runningE
