GAS LISTING /tmp/cc5FFvbP.s 			page 1


   1              		.file	"riscv.cpp"
   2              		.option pic
   3              		.option norelax
   4              		.text
   5              	.Ltext0:
   6              		.align	2
   7              		.globl	_ZN5Riscv10popSppSpieEv
   9              	_ZN5Riscv10popSppSpieEv:
  10              	.LFB33:
  11              		.file 1 "src/riscv.cpp"
   1:src/riscv.cpp **** //
   2:src/riscv.cpp **** // Created by marko on 20.4.22..
   3:src/riscv.cpp **** //
   4:src/riscv.cpp **** 
   5:src/riscv.cpp **** #include "../h/riscv.hpp"
   6:src/riscv.cpp **** #include "../h/tcb.hpp"
   7:src/riscv.cpp **** #include "../lib/console.h"
   8:src/riscv.cpp **** #include "../h/print.hpp"
   9:src/riscv.cpp **** #include "../h/syscall_c.h"
  10:src/riscv.cpp **** 
  11:src/riscv.cpp **** using Body = void (*)(void*);
  12:src/riscv.cpp **** 
  13:src/riscv.cpp **** void Riscv::popSppSpie()
  14:src/riscv.cpp **** {
  12              		.loc 1 14 1
  13              		.cfi_startproc
  14 0000 130101FF 		addi	sp,sp,-16
  15              		.cfi_def_cfa_offset 16
  16 0004 23348100 		sd	s0,8(sp)
  17              		.cfi_offset 8, -8
  18 0008 13040101 		addi	s0,sp,16
  19              		.cfi_def_cfa 8, 0
  15:src/riscv.cpp ****     __asm__ volatile("csrw sepc, ra");
  20              		.loc 1 15 5
  21              		.loc 1 15 38 is_stmt 0
  22              	#APP
  23              	# 15 "src/riscv.cpp" 1
  16              	    __asm__ volatile("sret");
  24              		csrw sepc, ra
  25              	# 0 "" 2
  26              		.loc 1 16 5 is_stmt 1
  27              		.loc 1 16 29 is_stmt 0
  28              	# 16 "src/riscv.cpp" 1
  17              	}
  29              		sret
  30              	# 0 "" 2
  31              		.loc 1 17 1
  32              	#NO_APP
  33 0014 03348100 		ld	s0,8(sp)
  34              		.cfi_restore 8
  35              		.cfi_def_cfa 2, 16
  36 0018 13010101 		addi	sp,sp,16
  37              		.cfi_def_cfa_offset 0
  38 001c 67800000 		jr	ra
  39              		.cfi_endproc
  40              	.LFE33:
  42              		.section	.rodata.str1.8,"aMS",@progbits,1
GAS LISTING /tmp/cc5FFvbP.s 			page 2


  43              		.align	3
  44              	.LC0:
  45 0000 45786974 		.string	"Exiting...\n"
  45      696E672E 
  45      2E2E0A00 
  46              		.text
  47              		.align	2
  48              		.globl	_ZN5Riscv20handleSupervisorTrapEv
  50              	_ZN5Riscv20handleSupervisorTrapEv:
  51              	.LFB34:
  18:src/riscv.cpp **** 
  19:src/riscv.cpp **** void Riscv::handleSupervisorTrap()
  20:src/riscv.cpp **** {
  52              		.loc 1 20 1 is_stmt 1
  53              		.cfi_startproc
  54 0020 130101F9 		addi	sp,sp,-112
  55              		.cfi_def_cfa_offset 112
  56 0024 23341106 		sd	ra,104(sp)
  57 0028 23308106 		sd	s0,96(sp)
  58 002c 233C9104 		sd	s1,88(sp)
  59 0030 23382105 		sd	s2,80(sp)
  60 0034 23343105 		sd	s3,72(sp)
  61 0038 23304105 		sd	s4,64(sp)
  62 003c 233C5103 		sd	s5,56(sp)
  63              		.cfi_offset 1, -8
  64              		.cfi_offset 8, -16
  65              		.cfi_offset 9, -24
  66              		.cfi_offset 18, -32
  67              		.cfi_offset 19, -40
  68              		.cfi_offset 20, -48
  69              		.cfi_offset 21, -56
  70 0040 13040107 		addi	s0,sp,112
  71              		.cfi_def_cfa 8, 0
  21:src/riscv.cpp ****     uint64 scause = r_scause();
  72              		.loc 1 21 5
  73              	.LBB35:
  74              	.LBB36:
  75              		.file 2 "src/../h/riscv.hpp"
   1:src/../h/riscv.hpp **** //
   2:src/../h/riscv.hpp **** // Created by marko on 20.4.22..
   3:src/../h/riscv.hpp **** //
   4:src/../h/riscv.hpp **** 
   5:src/../h/riscv.hpp **** #ifndef OS1_VEZBE07_RISCV_CONTEXT_SWITCH_1_SYNCHRONOUS_RISCV_HPP
   6:src/../h/riscv.hpp **** #define OS1_VEZBE07_RISCV_CONTEXT_SWITCH_1_SYNCHRONOUS_RISCV_HPP
   7:src/../h/riscv.hpp **** 
   8:src/../h/riscv.hpp **** #include "../lib/hw.h"
   9:src/../h/riscv.hpp **** 
  10:src/../h/riscv.hpp **** class Riscv
  11:src/../h/riscv.hpp **** {
  12:src/../h/riscv.hpp **** public:
  13:src/../h/riscv.hpp ****     // pop sstatus.spp and sstatus.spie bits (has to be a non inline function)
  14:src/../h/riscv.hpp ****     static void popSppSpie();
  15:src/../h/riscv.hpp **** 
  16:src/../h/riscv.hpp ****     // push x3..x31 registers onto stack
  17:src/../h/riscv.hpp ****     static void pushRegisters();
  18:src/../h/riscv.hpp **** 
  19:src/../h/riscv.hpp ****     // pop x3..x31 registers onto stack
GAS LISTING /tmp/cc5FFvbP.s 			page 3


  20:src/../h/riscv.hpp ****     static void popRegisters();
  21:src/../h/riscv.hpp **** 
  22:src/../h/riscv.hpp ****     // read register scause
  23:src/../h/riscv.hpp ****     static uint64 r_scause();
  24:src/../h/riscv.hpp **** 
  25:src/../h/riscv.hpp ****     // write register scause
  26:src/../h/riscv.hpp ****     static void w_scause(uint64 scause);
  27:src/../h/riscv.hpp **** 
  28:src/../h/riscv.hpp ****     // read register sepc
  29:src/../h/riscv.hpp ****     static uint64 r_sepc();
  30:src/../h/riscv.hpp **** 
  31:src/../h/riscv.hpp ****     // write register sepc
  32:src/../h/riscv.hpp ****     static void w_sepc(uint64 sepc);
  33:src/../h/riscv.hpp **** 
  34:src/../h/riscv.hpp ****     // read register stvec
  35:src/../h/riscv.hpp ****     static uint64 r_stvec();
  36:src/../h/riscv.hpp **** 
  37:src/../h/riscv.hpp ****     // write register stvec
  38:src/../h/riscv.hpp ****     static void w_stvec(uint64 stvec);
  39:src/../h/riscv.hpp **** 
  40:src/../h/riscv.hpp ****     // read register stval
  41:src/../h/riscv.hpp ****     static uint64 r_stval();
  42:src/../h/riscv.hpp **** 
  43:src/../h/riscv.hpp ****     // write register stval
  44:src/../h/riscv.hpp ****     static void w_stval(uint64 stval);
  45:src/../h/riscv.hpp **** 
  46:src/../h/riscv.hpp ****     enum BitMaskSip
  47:src/../h/riscv.hpp ****     {
  48:src/../h/riscv.hpp ****         SIP_SSIP = (1 << 1),
  49:src/../h/riscv.hpp ****         SIP_STIP = (1 << 5),
  50:src/../h/riscv.hpp ****         SIP_SEIP = (1 << 9),
  51:src/../h/riscv.hpp ****     };
  52:src/../h/riscv.hpp **** 
  53:src/../h/riscv.hpp ****     // mask set register sip
  54:src/../h/riscv.hpp ****     static void ms_sip(uint64 mask);
  55:src/../h/riscv.hpp **** 
  56:src/../h/riscv.hpp ****     // mask clear register sip
  57:src/../h/riscv.hpp ****     static void mc_sip(uint64 mask);
  58:src/../h/riscv.hpp **** 
  59:src/../h/riscv.hpp ****     // read register sip
  60:src/../h/riscv.hpp ****     static uint64 r_sip();
  61:src/../h/riscv.hpp **** 
  62:src/../h/riscv.hpp ****     // write register sip
  63:src/../h/riscv.hpp ****     static void w_sip(uint64 sip);
  64:src/../h/riscv.hpp **** 
  65:src/../h/riscv.hpp ****     enum BitMaskSstatus
  66:src/../h/riscv.hpp ****     {
  67:src/../h/riscv.hpp ****         SSTATUS_SIE = (1 << 1),
  68:src/../h/riscv.hpp ****         SSTATUS_SPIE = (1 << 5),
  69:src/../h/riscv.hpp ****         SSTATUS_SPP = (1 << 8),
  70:src/../h/riscv.hpp ****     };
  71:src/../h/riscv.hpp **** 
  72:src/../h/riscv.hpp ****     // mask set register sstatus
  73:src/../h/riscv.hpp ****     static void ms_sstatus(uint64 mask);
  74:src/../h/riscv.hpp **** 
  75:src/../h/riscv.hpp ****     // mask clear register sstatus
  76:src/../h/riscv.hpp ****     static void mc_sstatus(uint64 mask);
GAS LISTING /tmp/cc5FFvbP.s 			page 4


  77:src/../h/riscv.hpp **** 
  78:src/../h/riscv.hpp ****     // read register sstatus
  79:src/../h/riscv.hpp ****     static uint64 r_sstatus();
  80:src/../h/riscv.hpp **** 
  81:src/../h/riscv.hpp ****     // write register sstatus
  82:src/../h/riscv.hpp ****     static void w_sstatus(uint64 sstatus);
  83:src/../h/riscv.hpp **** 
  84:src/../h/riscv.hpp ****     // supervisor trap
  85:src/../h/riscv.hpp ****     static void supervisorTrap();
  86:src/../h/riscv.hpp **** 
  87:src/../h/riscv.hpp **** private:
  88:src/../h/riscv.hpp ****     // supervisor trap handler. Sve vezano za prekid radimo u ovoj funkciji
  89:src/../h/riscv.hpp ****     static void handleSupervisorTrap();
  90:src/../h/riscv.hpp **** 
  91:src/../h/riscv.hpp **** };
  92:src/../h/riscv.hpp **** 
  93:src/../h/riscv.hpp **** inline uint64 Riscv::r_scause()
  94:src/../h/riscv.hpp **** {
  95:src/../h/riscv.hpp ****     uint64 volatile scause;
  76              		.loc 2 95 5
  96:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[scause], scause" : [scause] "=r"(scause));
  77              		.loc 2 96 5
  78              		.loc 2 96 72 is_stmt 0
  79              	#APP
  80              	# 96 "src/../h/riscv.hpp" 1
  97              	    return scause;
  81              		csrr a5, scause
  82              	# 0 "" 2
  83              	#NO_APP
  84 0048 233CF4F8 		sd	a5,-104(s0)
  85              		.loc 2 97 5 is_stmt 1
  86              		.loc 2 97 12 is_stmt 0
  87 004c 033784F9 		ld	a4,-104(s0)
  88              	.LVL0:
  89              	.LBE36:
  90              	.LBE35:
  22:src/riscv.cpp **** 
  23:src/riscv.cpp ****     if (scause == 0x0000000000000008UL || scause == 0x0000000000000009UL)
  91              		.loc 1 23 5 is_stmt 1
  92              	.LBB37:
  93              		.loc 1 23 40 is_stmt 0
  94 0050 930687FF 		addi	a3,a4,-8
  95              		.loc 1 23 5
  96 0054 93071000 		li	a5,1
  97 0058 63F8D702 		bleu	a3,a5,.L24
  98              	.LBE37:
  24:src/riscv.cpp ****     {
  25:src/riscv.cpp ****         // Interrupt: no, cause code: environment code for S-mode(9)
  26:src/riscv.cpp ****         uint64 sepc = r_sepc() + 4;
  27:src/riscv.cpp ****         uint64 sstatus = r_sstatus();
  28:src/riscv.cpp **** 
  29:src/riscv.cpp ****         uint64 number;
  30:src/riscv.cpp ****         int ret;
  31:src/riscv.cpp ****         __asm__ volatile ("mv %0, a0" : "=r" (number));
  32:src/riscv.cpp **** 
  33:src/riscv.cpp ****         switch (number)
  34:src/riscv.cpp ****         {
GAS LISTING /tmp/cc5FFvbP.s 			page 5


  35:src/riscv.cpp ****             case 0x11:
  36:src/riscv.cpp ****             {
  37:src/riscv.cpp ****                 thread_t *handle;
  38:src/riscv.cpp ****                 Body body;
  39:src/riscv.cpp ****                 void *arg;
  40:src/riscv.cpp ****                 uint64  *stack;
  41:src/riscv.cpp **** 
  42:src/riscv.cpp ****                 __asm__ volatile ("mv %0, a1" : "=r" (handle));
  43:src/riscv.cpp ****                 __asm__ volatile ("mv %0, a2" : "=r" (body));
  44:src/riscv.cpp ****                 __asm__ volatile ("mv %0, a3" : "=r" (arg));
  45:src/riscv.cpp **** 
  46:src/riscv.cpp ****                 if (body != 0)
  47:src/riscv.cpp ****                     stack = (uint64 *)new uint64[DEFAULT_STACK_SIZE];
  48:src/riscv.cpp ****                 else
  49:src/riscv.cpp ****                     stack = 0;
  50:src/riscv.cpp **** 
  51:src/riscv.cpp ****                 *handle = TCB::createThread(body, arg, stack, true);
  52:src/riscv.cpp **** 
  53:src/riscv.cpp **** 
  54:src/riscv.cpp ****                 ret = (*handle) != nullptr ? 0 : -1;
  55:src/riscv.cpp ****                 __asm__ volatile ("mv a0, %0" : : "r" (ret));
  56:src/riscv.cpp **** 
  57:src/riscv.cpp ****                 break;
  58:src/riscv.cpp ****             }
  59:src/riscv.cpp ****             case 0x12:
  60:src/riscv.cpp ****             {
  61:src/riscv.cpp ****                 printString("Exiting...\n");
  62:src/riscv.cpp ****                 ret = TCB::threadExit();
  63:src/riscv.cpp ****                 __asm__ volatile ("mv a0, %0" : : "r" (ret));
  64:src/riscv.cpp **** 
  65:src/riscv.cpp ****                 break;
  66:src/riscv.cpp ****             }
  67:src/riscv.cpp ****             case 0x13:
  68:src/riscv.cpp ****             {
  69:src/riscv.cpp ****                 TCB::dispatch();
  70:src/riscv.cpp **** 
  71:src/riscv.cpp ****                 break;
  72:src/riscv.cpp ****             }
  73:src/riscv.cpp ****             case 0x14:
  74:src/riscv.cpp ****             {
  75:src/riscv.cpp ****                 thread_t *handle;
  76:src/riscv.cpp ****                 Body body;
  77:src/riscv.cpp ****                 void *arg;
  78:src/riscv.cpp ****                 uint64  *stack;
  79:src/riscv.cpp **** 
  80:src/riscv.cpp ****                 __asm__ volatile ("mv %0, a1" : "=r" (handle));
  81:src/riscv.cpp ****                 __asm__ volatile ("mv %0, a2" : "=r" (body));
  82:src/riscv.cpp ****                 __asm__ volatile ("mv %0, a5" : "=r" (arg));
  83:src/riscv.cpp ****                 __asm__ volatile ("mv %0, a6" : "=r" (arg));
  84:src/riscv.cpp **** 
  85:src/riscv.cpp ****                 if (body != 0)
  86:src/riscv.cpp ****                     stack = (uint64 *)new uint64[DEFAULT_STACK_SIZE];
  87:src/riscv.cpp ****                 else
  88:src/riscv.cpp ****                     stack = 0;
  89:src/riscv.cpp **** 
  90:src/riscv.cpp ****                 *handle = TCB::createThread(body, arg, stack, false);
  91:src/riscv.cpp **** 
GAS LISTING /tmp/cc5FFvbP.s 			page 6


  92:src/riscv.cpp **** 
  93:src/riscv.cpp ****                 ret = (*handle) != nullptr ? 0 : -1;
  94:src/riscv.cpp ****                 __asm__ volatile ("mv a0, %0" : : "r" (ret));
  95:src/riscv.cpp **** 
  96:src/riscv.cpp ****                 break;
  97:src/riscv.cpp ****             }
  98:src/riscv.cpp ****             case 0x15:
  99:src/riscv.cpp ****             {
 100:src/riscv.cpp ****                 thread_t *handle;
 101:src/riscv.cpp ****                 __asm__ volatile ("mv %0, a1" : "=r" (handle));
 102:src/riscv.cpp **** 
 103:src/riscv.cpp ****                 TCB::threadStart((TCB*)handle);
 104:src/riscv.cpp ****                 break;
 105:src/riscv.cpp ****             }
 106:src/riscv.cpp **** 
 107:src/riscv.cpp **** 
 108:src/riscv.cpp ****         }
 109:src/riscv.cpp **** 
 110:src/riscv.cpp **** //        TCB::timeSliceCounter = 0;
 111:src/riscv.cpp **** //        TCB::dispatch();
 112:src/riscv.cpp ****         w_sstatus(sstatus);
 113:src/riscv.cpp ****         w_sepc(sepc);
 114:src/riscv.cpp ****     }
 115:src/riscv.cpp ****     else if (scause == 0x8000000000000001UL)
  99              		.loc 1 115 10 is_stmt 1
 100              	.LBB74:
 101              	.LBB38:
 102 005c 9307F0FF 		li	a5,-1
 103 0060 9397F703 		slli	a5,a5,63
 104 0064 93871700 		addi	a5,a5,1
 105 0068 6300F718 		beq	a4,a5,.L25
 116:src/riscv.cpp ****     {
 117:src/riscv.cpp ****         // Interrupt: yes, cause code: Software interrupt (timer)
 118:src/riscv.cpp ****         TCB::timeSliceCounter++;
 119:src/riscv.cpp **** 
 120:src/riscv.cpp ****         if (TCB::timeSliceCounter >= TCB::running->getTimeSlice())
 121:src/riscv.cpp ****         {
 122:src/riscv.cpp ****             uint64 sepc = r_sepc();
 123:src/riscv.cpp ****             uint64 sstatus = r_sstatus();
 124:src/riscv.cpp ****             TCB::timeSliceCounter = 0;
 125:src/riscv.cpp ****             TCB::dispatch();
 126:src/riscv.cpp ****             w_sstatus(sstatus);
 127:src/riscv.cpp ****             w_sepc(sepc);
 128:src/riscv.cpp ****         }
 129:src/riscv.cpp **** 
 130:src/riscv.cpp ****         mc_sip(SIP_SSIP);
 131:src/riscv.cpp ****     }
 132:src/riscv.cpp ****     else if (scause == 0x8000000000000009UL)
 106              		.loc 1 132 10
 107 006c 9307F0FF 		li	a5,-1
 108 0070 9397F703 		slli	a5,a5,63
 109 0074 93879700 		addi	a5,a5,9
 110 0078 6312F70A 		bne	a4,a5,.L3
 133:src/riscv.cpp ****     {
 134:src/riscv.cpp ****         // Interrupt: yes, cause code: Software external interrupt (console)
 135:src/riscv.cpp ****         console_handler();
 111              		.loc 1 135 9
GAS LISTING /tmp/cc5FFvbP.s 			page 7


 112              		.loc 1 135 24 is_stmt 0
 113 007c 97000000 		call	console_handler@plt
 113      E7800000 
 114              	.LVL1:
 115              	.LBE38:
 116              	.LBE74:
 136:src/riscv.cpp ****     }
 137:src/riscv.cpp ****     else
 138:src/riscv.cpp ****     {
 139:src/riscv.cpp ****         // Unexpected trap cause
 140:src/riscv.cpp ****         // print(scause)
 141:src/riscv.cpp ****         // print(sepc)
 142:src/riscv.cpp ****         // print(stvalue)
 143:src/riscv.cpp **** 
 144:src/riscv.cpp ****     }
 145:src/riscv.cpp **** }...
 117              		.loc 1 145 1
 118 0084 6F008009 		j	.L3
 119              	.LVL2:
 120              	.L24:
 121              	.LBB75:
 122              	.LBB55:
  26:src/riscv.cpp ****         uint64 sepc = r_sepc() + 4;
 123              		.loc 1 26 9 is_stmt 1
 124              	.LBB56:
 125              	.LBB57:
  98:src/../h/riscv.hpp **** }
  99:src/../h/riscv.hpp **** 
 100:src/../h/riscv.hpp **** inline void Riscv::w_scause(uint64 scause)
 101:src/../h/riscv.hpp **** {
 102:src/../h/riscv.hpp ****     __asm__ volatile ("csrw scause, %[scause]" : : [scause] "r"(scause));
 103:src/../h/riscv.hpp **** }
 104:src/../h/riscv.hpp **** 
 105:src/../h/riscv.hpp **** inline uint64 Riscv::r_sepc()
 106:src/../h/riscv.hpp **** {
 107:src/../h/riscv.hpp ****     uint64 volatile sepc;
 126              		.loc 2 107 5
 108:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[sepc], sepc" : [sepc] "=r"(sepc));
 127              		.loc 2 108 5
 128              		.loc 2 108 64 is_stmt 0
 129              	#APP
 130              	# 108 "src/../h/riscv.hpp" 1
 109              	    return sepc;
 131              		csrr a5, sepc
 132              	# 0 "" 2
 133              	#NO_APP
 134 008c 2334F4FA 		sd	a5,-88(s0)
 135              		.loc 2 109 5 is_stmt 1
 136              		.loc 2 109 12 is_stmt 0
 137 0090 833484FA 		ld	s1,-88(s0)
 138              	.LBE57:
 139              	.LBE56:
  26:src/riscv.cpp ****         uint64 sepc = r_sepc() + 4;
 140              		.loc 1 26 34
 141 0094 93844400 		addi	s1,s1,4
 142              	.LVL3:
  27:src/riscv.cpp ****         uint64 sstatus = r_sstatus();
GAS LISTING /tmp/cc5FFvbP.s 			page 8


 143              		.loc 1 27 9 is_stmt 1
 144              	.LBB58:
 145              	.LBB59:
 110:src/../h/riscv.hpp **** }
 111:src/../h/riscv.hpp **** 
 112:src/../h/riscv.hpp **** inline void Riscv::w_sepc(uint64 sepc)
 113:src/../h/riscv.hpp **** {
 114:src/../h/riscv.hpp ****     __asm__ volatile ("csrw sepc, %[sepc]" : : [sepc] "r"(sepc));
 115:src/../h/riscv.hpp **** }
 116:src/../h/riscv.hpp **** 
 117:src/../h/riscv.hpp **** inline uint64 Riscv::r_stvec()
 118:src/../h/riscv.hpp **** {
 119:src/../h/riscv.hpp ****     uint64 volatile stvec;
 120:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[stvec], stvec" : [stvec] "=r"(stvec));
 121:src/../h/riscv.hpp ****     return stvec;
 122:src/../h/riscv.hpp **** }
 123:src/../h/riscv.hpp **** 
 124:src/../h/riscv.hpp **** inline void Riscv::w_stvec(uint64 stvec)
 125:src/../h/riscv.hpp **** {
 126:src/../h/riscv.hpp ****     __asm__ volatile ("csrw stvec, %[stvec]" : : [stvec] "r"(stvec));
 127:src/../h/riscv.hpp **** }
 128:src/../h/riscv.hpp **** 
 129:src/../h/riscv.hpp **** inline uint64 Riscv::r_stval()
 130:src/../h/riscv.hpp **** {
 131:src/../h/riscv.hpp ****     uint64 volatile stval;
 132:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[stval], stval" : [stval] "=r"(stval));
 133:src/../h/riscv.hpp ****     return stval;
 134:src/../h/riscv.hpp **** }
 135:src/../h/riscv.hpp **** 
 136:src/../h/riscv.hpp **** inline void Riscv::w_stval(uint64 stval)
 137:src/../h/riscv.hpp **** {
 138:src/../h/riscv.hpp ****     __asm__ volatile ("csrw stval, %[stval]" : : [stval] "r"(stval));
 139:src/../h/riscv.hpp **** }
 140:src/../h/riscv.hpp **** 
 141:src/../h/riscv.hpp **** inline void Riscv::ms_sip(uint64 mask)
 142:src/../h/riscv.hpp **** {
 143:src/../h/riscv.hpp ****     __asm__ volatile ("csrs sip, %[mask]" : : [mask] "r"(mask));
 144:src/../h/riscv.hpp **** }
 145:src/../h/riscv.hpp **** 
 146:src/../h/riscv.hpp **** inline void Riscv::mc_sip(uint64 mask)
 147:src/../h/riscv.hpp **** {
 148:src/../h/riscv.hpp ****     __asm__ volatile ("csrc sip, %[mask]" : : [mask] "r"(mask));
 149:src/../h/riscv.hpp **** }
 150:src/../h/riscv.hpp **** 
 151:src/../h/riscv.hpp **** inline uint64 Riscv::r_sip()
 152:src/../h/riscv.hpp **** {
 153:src/../h/riscv.hpp ****     uint64 volatile sip;
 154:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[sip], sip" : [sip] "=r"(sip));
 155:src/../h/riscv.hpp ****     return sip;
 156:src/../h/riscv.hpp **** }
 157:src/../h/riscv.hpp **** 
 158:src/../h/riscv.hpp **** inline void Riscv::w_sip(uint64 sip)
 159:src/../h/riscv.hpp **** {
 160:src/../h/riscv.hpp ****     __asm__ volatile ("csrw sip, %[sip]" : : [sip] "r"(sip));
 161:src/../h/riscv.hpp **** }
 162:src/../h/riscv.hpp **** 
 163:src/../h/riscv.hpp **** inline void Riscv::ms_sstatus(uint64 mask)
GAS LISTING /tmp/cc5FFvbP.s 			page 9


 164:src/../h/riscv.hpp **** {
 165:src/../h/riscv.hpp ****     __asm__ volatile ("csrs sstatus, %[mask]" : : [mask] "r"(mask));
 166:src/../h/riscv.hpp **** }
 167:src/../h/riscv.hpp **** 
 168:src/../h/riscv.hpp **** inline void Riscv::mc_sstatus(uint64 mask)
 169:src/../h/riscv.hpp **** {
 170:src/../h/riscv.hpp ****     __asm__ volatile ("csrc sstatus, %[mask]" : : [mask] "r"(mask));
 171:src/../h/riscv.hpp **** }
 172:src/../h/riscv.hpp **** 
 173:src/../h/riscv.hpp **** inline uint64 Riscv::r_sstatus()
 174:src/../h/riscv.hpp **** {
 175:src/../h/riscv.hpp ****     uint64 volatile sstatus;
 146              		.loc 2 175 5
 176:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[sstatus], sstatus" : [sstatus] "=r"(sstatus));
 147              		.loc 2 176 5
 148              		.loc 2 176 76 is_stmt 0
 149              	#APP
 150              	# 176 "src/../h/riscv.hpp" 1
 177              	    return sstatus;
 151              		csrr a5, sstatus
 152              	# 0 "" 2
 153              	#NO_APP
 154 009c 2330F4FA 		sd	a5,-96(s0)
 155              		.loc 2 177 5 is_stmt 1
 156              		.loc 2 177 12 is_stmt 0
 157 00a0 033904FA 		ld	s2,-96(s0)
 158              	.LVL4:
 159              	.LBE59:
 160              	.LBE58:
  29:src/riscv.cpp ****         uint64 number;
 161              		.loc 1 29 9 is_stmt 1
  30:src/riscv.cpp ****         int ret;
 162              		.loc 1 30 9
  31:src/riscv.cpp ****         __asm__ volatile ("mv %0, a0" : "=r" (number));
 163              		.loc 1 31 9
  31:src/riscv.cpp ****         __asm__ volatile ("mv %0, a0" : "=r" (number));
 164              		.loc 1 31 55 is_stmt 0
 165              	#APP
 166              	# 31 "src/riscv.cpp" 1
 167              		mv a5, a0
 168              	# 0 "" 2
 169              	.LVL5:
  33:src/riscv.cpp ****         switch (number)
 170              		.loc 1 33 9 is_stmt 1
 171              	#NO_APP
 172 00a8 9387F7FE 		addi	a5,a5,-17
 173              	.LVL6:
 174 00ac 13074000 		li	a4,4
 175              	.LVL7:
 176 00b0 6362F706 		bgtu	a5,a4,.L5
 177 00b4 93972700 		slli	a5,a5,2
 178              	.LVL8:
 179 00b8 17070000 		lla	a4,.L7
 179      13070700 
 180 00c0 B387E700 		add	a5,a5,a4
 181 00c4 83A70700 		lw	a5,0(a5)
 182 00c8 B387E700 		add	a5,a5,a4
GAS LISTING /tmp/cc5FFvbP.s 			page 10


 183 00cc 67800700 		jr	a5
 184              		.section	.rodata
 185              		.align	2
 186              		.align	2
 187              	.L7:
 188 0000 00000000 		.word	.L11-.L7
 189 0004 00000000 		.word	.L10-.L7
 190 0008 00000000 		.word	.L9-.L7
 191 000c 00000000 		.word	.L8-.L7
 192 0010 00000000 		.word	.L6-.L7
 193              		.text
 194              	.L11:
 195              	.LBB60:
 196              	.LBB61:
  35:src/riscv.cpp ****             case 0x11:
 197              		.loc 1 35 13
  36:src/riscv.cpp ****             {
 198              		.loc 1 36 13
 199              	.LBB62:
  37:src/riscv.cpp ****                 thread_t *handle;
 200              		.loc 1 37 17
  38:src/riscv.cpp ****                 Body body;
 201              		.loc 1 38 17
  39:src/riscv.cpp ****                 void *arg;
 202              		.loc 1 39 17
  40:src/riscv.cpp ****                 uint64  *stack;
 203              		.loc 1 40 17
  42:src/riscv.cpp ****                 __asm__ volatile ("mv %0, a1" : "=r" (handle));
 204              		.loc 1 42 17
  42:src/riscv.cpp ****                 __asm__ volatile ("mv %0, a1" : "=r" (handle));
 205              		.loc 1 42 63 is_stmt 0
 206              	#APP
 207              	# 42 "src/riscv.cpp" 1
 208              		mv s4, a1
 209              	# 0 "" 2
 210              	.LVL9:
  43:src/riscv.cpp ****                 __asm__ volatile ("mv %0, a2" : "=r" (body));
 211              		.loc 1 43 17 is_stmt 1
  43:src/riscv.cpp ****                 __asm__ volatile ("mv %0, a2" : "=r" (body));
 212              		.loc 1 43 61 is_stmt 0
 213              	# 43 "src/riscv.cpp" 1
 214              		mv s3, a2
 215              	# 0 "" 2
 216              	.LVL10:
  44:src/riscv.cpp ****                 __asm__ volatile ("mv %0, a3" : "=r" (arg));
 217              		.loc 1 44 17 is_stmt 1
  44:src/riscv.cpp ****                 __asm__ volatile ("mv %0, a3" : "=r" (arg));
 218              		.loc 1 44 60 is_stmt 0
 219              	# 44 "src/riscv.cpp" 1
 220              		mv s5, a3
 221              	# 0 "" 2
 222              	.LVL11:
  46:src/riscv.cpp ****                 if (body != 0)
 223              		.loc 1 46 17 is_stmt 1
 224              	#NO_APP
 225 00dc 63820906 		beqz	s3,.L19
  47:src/riscv.cpp ****                     stack = (uint64 *)new uint64[DEFAULT_STACK_SIZE];
GAS LISTING /tmp/cc5FFvbP.s 			page 11


 226              		.loc 1 47 21
  47:src/riscv.cpp ****                     stack = (uint64 *)new uint64[DEFAULT_STACK_SIZE];
 227              		.loc 1 47 68 is_stmt 0
 228 00e0 37850000 		li	a0,32768
 229 00e4 97000000 		call	_Znam@plt
 229      E7800000 
 230              	.LVL12:
 231 00ec 13060500 		mv	a2,a0
 232              	.LVL13:
 233              	.L12:
  51:src/riscv.cpp ****                 *handle = TCB::createThread(body, arg, stack, true);
 234              		.loc 1 51 17 is_stmt 1
  51:src/riscv.cpp ****                 *handle = TCB::createThread(body, arg, stack, true);
 235              		.loc 1 51 44 is_stmt 0
 236 00f0 93061000 		li	a3,1
 237 00f4 93850A00 		mv	a1,s5
 238 00f8 13850900 		mv	a0,s3
 239 00fc 97000000 		call	_ZN3TCB12createThreadEPFvPvES0_S0_b@plt
 239      E7800000 
 240              	.LVL14:
  51:src/riscv.cpp ****                 *handle = TCB::createThread(body, arg, stack, true);
 241              		.loc 1 51 25
 242 0104 2330AA00 		sd	a0,0(s4)
  54:src/riscv.cpp ****                 ret = (*handle) != nullptr ? 0 : -1;
 243              		.loc 1 54 17 is_stmt 1
  54:src/riscv.cpp ****                 ret = (*handle) != nullptr ? 0 : -1;
 244              		.loc 1 54 44 is_stmt 0
 245 0108 63000504 		beqz	a0,.L20
 246 010c 93070000 		li	a5,0
 247              	.L13:
 248              	.LVL15:
  55:src/riscv.cpp ****                 __asm__ volatile ("mv a0, %0" : : "r" (ret));
 249              		.loc 1 55 17 is_stmt 1 discriminator 4
  55:src/riscv.cpp ****                 __asm__ volatile ("mv a0, %0" : : "r" (ret));
 250              		.loc 1 55 61 is_stmt 0 discriminator 4
 251              	#APP
 252              	# 55 "src/riscv.cpp" 1
  57:src/riscv.cpp ****                 break;
 253              		mv a0, a5
 254              	# 0 "" 2
 255              		.loc 1 57 17 is_stmt 1 discriminator 4
 256              	.LVL16:
 257              	#NO_APP
 258              	.L5:
 259              	.LBE62:
 260              	.LBE61:
 261              	.LBE60:
 112:src/riscv.cpp ****         w_sstatus(sstatus);
 262              		.loc 1 112 9
 263              	.LBB67:
 264              	.LBB68:
 178:src/../h/riscv.hpp **** }
 179:src/../h/riscv.hpp **** 
 180:src/../h/riscv.hpp **** inline void Riscv::w_sstatus(uint64 sstatus)
 181:src/../h/riscv.hpp **** {
 182:src/../h/riscv.hpp ****     __asm__ volatile ("csrw sstatus, %[sstatus]" : : [sstatus] "r"(sstatus));
 265              		.loc 2 182 5
GAS LISTING /tmp/cc5FFvbP.s 			page 12


 266              		.loc 2 182 77 is_stmt 0
 267              	#APP
 268              	# 182 "src/../h/riscv.hpp" 1
 183              	}
 269              		csrw sstatus, s2
 270              	# 0 "" 2
 271              	.LVL17:
 272              	#NO_APP
 273              	.LBE68:
 274              	.LBE67:
 113:src/riscv.cpp ****         w_sepc(sepc);
 275              		.loc 1 113 9 is_stmt 1
 276              	.LBB69:
 277              	.LBB70:
 114:src/../h/riscv.hpp **** }
 278              		.loc 2 114 5
 114:src/../h/riscv.hpp **** }
 279              		.loc 2 114 65 is_stmt 0
 280              	#APP
 281              	# 114 "src/../h/riscv.hpp" 1
 282              		csrw sepc, s1
 283              	# 0 "" 2
 284              	.LVL18:
 285              	#NO_APP
 286              	.L3:
 287              	.LBE70:
 288              	.LBE69:
 289              	.LBE55:
 290              	.LBE75:
 291              		.loc 1 145 1
 292 011c 83308106 		ld	ra,104(sp)
 293              		.cfi_remember_state
 294              		.cfi_restore 1
 295 0120 03340106 		ld	s0,96(sp)
 296              		.cfi_restore 8
 297              		.cfi_def_cfa 2, 112
 298 0124 83348105 		ld	s1,88(sp)
 299              		.cfi_restore 9
 300 0128 03390105 		ld	s2,80(sp)
 301              		.cfi_restore 18
 302 012c 83398104 		ld	s3,72(sp)
 303              		.cfi_restore 19
 304 0130 033A0104 		ld	s4,64(sp)
 305              		.cfi_restore 20
 306 0134 833A8103 		ld	s5,56(sp)
 307              		.cfi_restore 21
 308 0138 13010107 		addi	sp,sp,112
 309              		.cfi_def_cfa_offset 0
 310 013c 67800000 		jr	ra
 311              	.LVL19:
 312              	.L19:
 313              		.cfi_restore_state
 314              	.LBB76:
 315              	.LBB72:
 316              	.LBB71:
 317              	.LBB66:
 318              	.LBB63:
GAS LISTING /tmp/cc5FFvbP.s 			page 13


  49:src/riscv.cpp ****                     stack = 0;
 319              		.loc 1 49 27
 320 0140 13060000 		li	a2,0
 321 0144 6FF0DFFA 		j	.L12
 322              	.LVL20:
 323              	.L20:
  54:src/riscv.cpp ****                 ret = (*handle) != nullptr ? 0 : -1;
 324              		.loc 1 54 44
 325 0148 9307F0FF 		li	a5,-1
 326 014c 6FF05FFC 		j	.L13
 327              	.LVL21:
 328              	.L10:
 329              	.LBE63:
  59:src/riscv.cpp ****             case 0x12:
 330              		.loc 1 59 13 is_stmt 1
  60:src/riscv.cpp ****             {
 331              		.loc 1 60 13
  61:src/riscv.cpp ****                 printString("Exiting...\n");
 332              		.loc 1 61 17
  61:src/riscv.cpp ****                 printString("Exiting...\n");
 333              		.loc 1 61 28 is_stmt 0
 334 0150 17050000 		lla	a0,.LC0
 334      13050500 
 335 0158 97000000 		call	_Z11printStringPKc@plt
 335      E7800000 
 336              	.LVL22:
  62:src/riscv.cpp ****                 ret = TCB::threadExit();
 337              		.loc 1 62 17 is_stmt 1
  62:src/riscv.cpp ****                 ret = TCB::threadExit();
 338              		.loc 1 62 38 is_stmt 0
 339 0160 97000000 		call	_ZN3TCB10threadExitEv@plt
 339      E7800000 
 340              	.LVL23:
  63:src/riscv.cpp ****                 __asm__ volatile ("mv a0, %0" : : "r" (ret));
 341              		.loc 1 63 17 is_stmt 1
  63:src/riscv.cpp ****                 __asm__ volatile ("mv a0, %0" : : "r" (ret));
 342              		.loc 1 63 61 is_stmt 0
 343              	#APP
 344              	# 63 "src/riscv.cpp" 1
  65:src/riscv.cpp ****                 break;
 345              		mv a0, a0
 346              	# 0 "" 2
 347              		.loc 1 65 17 is_stmt 1
 348              	#NO_APP
 349 016c 6FF09FFA 		j	.L5
 350              	.LVL24:
 351              	.L9:
  67:src/riscv.cpp ****             case 0x13:
 352              		.loc 1 67 13
  68:src/riscv.cpp ****             {
 353              		.loc 1 68 13
  69:src/riscv.cpp ****                 TCB::dispatch();
 354              		.loc 1 69 17
  69:src/riscv.cpp ****                 TCB::dispatch();
 355              		.loc 1 69 30 is_stmt 0
 356 0170 97000000 		call	_ZN3TCB8dispatchEv@plt
 356      E7800000 
GAS LISTING /tmp/cc5FFvbP.s 			page 14


 357              	.LVL25:
  71:src/riscv.cpp ****                 break;
 358              		.loc 1 71 17 is_stmt 1
 359 0178 6FF0DFF9 		j	.L5
 360              	.LVL26:
 361              	.L8:
  73:src/riscv.cpp ****             case 0x14:
 362              		.loc 1 73 13
  74:src/riscv.cpp ****             {
 363              		.loc 1 74 13
 364              	.LBB64:
  75:src/riscv.cpp ****                 thread_t *handle;
 365              		.loc 1 75 17
  76:src/riscv.cpp ****                 Body body;
 366              		.loc 1 76 17
  77:src/riscv.cpp ****                 void *arg;
 367              		.loc 1 77 17
  78:src/riscv.cpp ****                 uint64  *stack;
 368              		.loc 1 78 17
  80:src/riscv.cpp ****                 __asm__ volatile ("mv %0, a1" : "=r" (handle));
 369              		.loc 1 80 17
  80:src/riscv.cpp ****                 __asm__ volatile ("mv %0, a1" : "=r" (handle));
 370              		.loc 1 80 63 is_stmt 0
 371              	#APP
 372              	# 80 "src/riscv.cpp" 1
 373              		mv s4, a1
 374              	# 0 "" 2
 375              	.LVL27:
  81:src/riscv.cpp ****                 __asm__ volatile ("mv %0, a2" : "=r" (body));
 376              		.loc 1 81 17 is_stmt 1
  81:src/riscv.cpp ****                 __asm__ volatile ("mv %0, a2" : "=r" (body));
 377              		.loc 1 81 61 is_stmt 0
 378              	# 81 "src/riscv.cpp" 1
 379              		mv s3, a2
 380              	# 0 "" 2
 381              	.LVL28:
  82:src/riscv.cpp ****                 __asm__ volatile ("mv %0, a5" : "=r" (arg));
 382              		.loc 1 82 17 is_stmt 1
  82:src/riscv.cpp ****                 __asm__ volatile ("mv %0, a5" : "=r" (arg));
 383              		.loc 1 82 60 is_stmt 0
 384              	# 82 "src/riscv.cpp" 1
 385              		mv a5, a5
 386              	# 0 "" 2
 387              	.LVL29:
  83:src/riscv.cpp ****                 __asm__ volatile ("mv %0, a6" : "=r" (arg));
 388              		.loc 1 83 17 is_stmt 1
  83:src/riscv.cpp ****                 __asm__ volatile ("mv %0, a6" : "=r" (arg));
 389              		.loc 1 83 60 is_stmt 0
 390              	# 83 "src/riscv.cpp" 1
 391              		mv s5, a6
 392              	# 0 "" 2
 393              	.LVL30:
  85:src/riscv.cpp ****                 if (body != 0)
 394              		.loc 1 85 17 is_stmt 1
 395              	#NO_APP
 396 018c 638E0902 		beqz	s3,.L21
  86:src/riscv.cpp ****                     stack = (uint64 *)new uint64[DEFAULT_STACK_SIZE];
GAS LISTING /tmp/cc5FFvbP.s 			page 15


 397              		.loc 1 86 21
  86:src/riscv.cpp ****                     stack = (uint64 *)new uint64[DEFAULT_STACK_SIZE];
 398              		.loc 1 86 68 is_stmt 0
 399 0190 37850000 		li	a0,32768
 400 0194 97000000 		call	_Znam@plt
 400      E7800000 
 401              	.LVL31:
 402 019c 13060500 		mv	a2,a0
 403              	.LVL32:
 404              	.L14:
  90:src/riscv.cpp ****                 *handle = TCB::createThread(body, arg, stack, false);
 405              		.loc 1 90 17 is_stmt 1
  90:src/riscv.cpp ****                 *handle = TCB::createThread(body, arg, stack, false);
 406              		.loc 1 90 44 is_stmt 0
 407 01a0 93060000 		li	a3,0
 408 01a4 93850A00 		mv	a1,s5
 409 01a8 13850900 		mv	a0,s3
 410 01ac 97000000 		call	_ZN3TCB12createThreadEPFvPvES0_S0_b@plt
 410      E7800000 
 411              	.LVL33:
  90:src/riscv.cpp ****                 *handle = TCB::createThread(body, arg, stack, false);
 412              		.loc 1 90 25
 413 01b4 2330AA00 		sd	a0,0(s4)
  93:src/riscv.cpp ****                 ret = (*handle) != nullptr ? 0 : -1;
 414              		.loc 1 93 17 is_stmt 1
  93:src/riscv.cpp ****                 ret = (*handle) != nullptr ? 0 : -1;
 415              		.loc 1 93 44 is_stmt 0
 416 01b8 630C0500 		beqz	a0,.L22
 417 01bc 93070000 		li	a5,0
 418              	.L15:
 419              	.LVL34:
  94:src/riscv.cpp ****                 __asm__ volatile ("mv a0, %0" : : "r" (ret));
 420              		.loc 1 94 17 is_stmt 1 discriminator 4
  94:src/riscv.cpp ****                 __asm__ volatile ("mv a0, %0" : : "r" (ret));
 421              		.loc 1 94 61 is_stmt 0 discriminator 4
 422              	#APP
 423              	# 94 "src/riscv.cpp" 1
  96:src/riscv.cpp ****                 break;
 424              		mv a0, a5
 425              	# 0 "" 2
 426              		.loc 1 96 17 is_stmt 1 discriminator 4
 427              	#NO_APP
 428 01c4 6FF01FF5 		j	.L5
 429              	.LVL35:
 430              	.L21:
  88:src/riscv.cpp ****                     stack = 0;
 431              		.loc 1 88 27 is_stmt 0
 432 01c8 13060000 		li	a2,0
 433 01cc 6FF05FFD 		j	.L14
 434              	.LVL36:
 435              	.L22:
  93:src/riscv.cpp ****                 ret = (*handle) != nullptr ? 0 : -1;
 436              		.loc 1 93 44
 437 01d0 9307F0FF 		li	a5,-1
 438 01d4 6FF0DFFE 		j	.L15
 439              	.LVL37:
 440              	.L6:
GAS LISTING /tmp/cc5FFvbP.s 			page 16


 441              	.LBE64:
  98:src/riscv.cpp ****             case 0x15:
 442              		.loc 1 98 13 is_stmt 1
  99:src/riscv.cpp ****             {
 443              		.loc 1 99 13
 444              	.LBB65:
 100:src/riscv.cpp ****                 thread_t *handle;
 445              		.loc 1 100 17
 101:src/riscv.cpp ****                 __asm__ volatile ("mv %0, a1" : "=r" (handle));
 446              		.loc 1 101 17
 101:src/riscv.cpp ****                 __asm__ volatile ("mv %0, a1" : "=r" (handle));
 447              		.loc 1 101 63 is_stmt 0
 448              	#APP
 449              	# 101 "src/riscv.cpp" 1
 450              		mv a0, a1
 451              	# 0 "" 2
 452              	.LVL38:
 103:src/riscv.cpp ****                 TCB::threadStart((TCB*)handle);
 453              		.loc 1 103 17 is_stmt 1
 103:src/riscv.cpp ****                 TCB::threadStart((TCB*)handle);
 454              		.loc 1 103 33 is_stmt 0
 455              	#NO_APP
 456 01dc 97000000 		call	_ZN3TCB11threadStartEPS_@plt
 456      E7800000 
 457              	.LVL39:
 104:src/riscv.cpp ****                 break;
 458              		.loc 1 104 17 is_stmt 1
 459 01e4 6FF01FF3 		j	.L5
 460              	.LVL40:
 461              	.L25:
 462              	.LBE65:
 463              	.LBE66:
 464              	.LBE71:
 465              	.LBE72:
 466              	.LBB73:
 467              	.LBB39:
 118:src/riscv.cpp ****         TCB::timeSliceCounter++;
 468              		.loc 1 118 9
 118:src/riscv.cpp ****         TCB::timeSliceCounter++;
 469              		.loc 1 118 30 is_stmt 0
 470 01e8 17070000 		la	a4,_ZN3TCB16timeSliceCounterE
 470      03370700 
 471              	.LVL41:
 472 01f0 83370700 		ld	a5,0(a4)
 473 01f4 93871700 		addi	a5,a5,1
 474 01f8 2330F700 		sd	a5,0(a4)
 120:src/riscv.cpp ****         if (TCB::timeSliceCounter >= TCB::running->getTimeSlice())
 475              		.loc 1 120 9 is_stmt 1
 476              	.LBB40:
 120:src/riscv.cpp ****         if (TCB::timeSliceCounter >= TCB::running->getTimeSlice())
 477              		.loc 1 120 64 is_stmt 0
 478 01fc 17070000 		la	a4,_ZN3TCB7runningE
 478      03370700 
 479 0204 03370700 		ld	a4,0(a4)
 480              	.LVL42:
 481              	.LBB41:
 482              	.LBB42:
GAS LISTING /tmp/cc5FFvbP.s 			page 17


 483              		.file 3 "src/../h/tcb.hpp"
   1:src/../h/tcb.hpp **** //
   2:src/../h/tcb.hpp **** // Created by os on 2/11/23.
   3:src/../h/tcb.hpp **** //
   4:src/../h/tcb.hpp **** 
   5:src/../h/tcb.hpp **** #ifndef PROJECT_BASE_TCB_HPP
   6:src/../h/tcb.hpp **** #define PROJECT_BASE_TCB_HPP
   7:src/../h/tcb.hpp **** 
   8:src/../h/tcb.hpp **** #include "../lib/hw.h"
   9:src/../h/tcb.hpp **** #include "scheduler.hpp"
  10:src/../h/tcb.hpp **** 
  11:src/../h/tcb.hpp **** // Thread Control Block
  12:src/../h/tcb.hpp **** class TCB {
  13:src/../h/tcb.hpp **** public:
  14:src/../h/tcb.hpp ****     ~TCB() { delete[] stack; }
  15:src/../h/tcb.hpp **** 
  16:src/../h/tcb.hpp ****     bool isFinished() const { return finished; }
  17:src/../h/tcb.hpp **** 
  18:src/../h/tcb.hpp ****     void setFinished(bool value) { finished = value; }
  19:src/../h/tcb.hpp **** 
  20:src/../h/tcb.hpp ****     uint64 getTimeSlice() const { return timeSlice; }
 484              		.loc 3 20 35 is_stmt 1
 485              		.loc 3 20 42 is_stmt 0
 486 0208 03378702 		ld	a4,40(a4)
 487              	.LVL43:
 488              	.LBE42:
 489              	.LBE41:
 120:src/riscv.cpp ****         if (TCB::timeSliceCounter >= TCB::running->getTimeSlice())
 490              		.loc 1 120 9
 491 020c 63F8E700 		bgeu	a5,a4,.L26
 492              	.LVL44:
 493              	.L18:
 494              	.LBE40:
 130:src/riscv.cpp ****         mc_sip(SIP_SSIP);
 495              		.loc 1 130 9 is_stmt 1
 496              	.LBB52:
 497              	.LBB53:
 148:src/../h/riscv.hpp **** }
 498              		.loc 2 148 5
 148:src/../h/riscv.hpp **** }
 499              		.loc 2 148 64 is_stmt 0
 500 0210 93072000 		li	a5,2
 501              	#APP
 502              	# 148 "src/../h/riscv.hpp" 1
 149:src/../h/riscv.hpp **** 
 503              		csrc sip, a5
 504              	# 0 "" 2
 505              		.loc 2 149 1
 506              	#NO_APP
 507 0218 6FF05FF0 		j	.L3
 508              	.LVL45:
 509              	.L26:
 510              	.LBE53:
 511              	.LBE52:
 512              	.LBB54:
 513              	.LBB43:
 122:src/riscv.cpp ****             uint64 sepc = r_sepc();
GAS LISTING /tmp/cc5FFvbP.s 			page 18


 514              		.loc 1 122 13 is_stmt 1
 515              	.LBB44:
 516              	.LBB45:
 107:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[sepc], sepc" : [sepc] "=r"(sepc));
 517              		.loc 2 107 5
 108:src/../h/riscv.hpp ****     return sepc;
 518              		.loc 2 108 5
 108:src/../h/riscv.hpp ****     return sepc;
 519              		.loc 2 108 64 is_stmt 0
 520              	#APP
 521              	# 108 "src/../h/riscv.hpp" 1
 522              		csrr a5, sepc
 523              	# 0 "" 2
 524              	#NO_APP
 525 0220 233CF4FA 		sd	a5,-72(s0)
 109:src/../h/riscv.hpp **** }
 526              		.loc 2 109 5 is_stmt 1
 109:src/../h/riscv.hpp **** }
 527              		.loc 2 109 12 is_stmt 0
 528 0224 833484FB 		ld	s1,-72(s0)
 529              	.LVL46:
 530              	.LBE45:
 531              	.LBE44:
 123:src/riscv.cpp ****             uint64 sstatus = r_sstatus();
 532              		.loc 1 123 13 is_stmt 1
 533              	.LBB46:
 534              	.LBB47:
 175:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[sstatus], sstatus" : [sstatus] "=r"(sstatus));
 535              		.loc 2 175 5
 176:src/../h/riscv.hpp ****     return sstatus;
 536              		.loc 2 176 5
 176:src/../h/riscv.hpp ****     return sstatus;
 537              		.loc 2 176 76 is_stmt 0
 538              	#APP
 539              	# 176 "src/../h/riscv.hpp" 1
 540              		csrr a5, sstatus
 541              	# 0 "" 2
 542              	#NO_APP
 543 022c 2338F4FA 		sd	a5,-80(s0)
 177:src/../h/riscv.hpp **** }
 544              		.loc 2 177 5 is_stmt 1
 177:src/../h/riscv.hpp **** }
 545              		.loc 2 177 12 is_stmt 0
 546 0230 033904FB 		ld	s2,-80(s0)
 547              	.LVL47:
 548              	.LBE47:
 549              	.LBE46:
 124:src/riscv.cpp ****             TCB::timeSliceCounter = 0;
 550              		.loc 1 124 13 is_stmt 1
 124:src/riscv.cpp ****             TCB::timeSliceCounter = 0;
 551              		.loc 1 124 35 is_stmt 0
 552 0234 97070000 		la	a5,_ZN3TCB16timeSliceCounterE
 552      83B70700 
 553 023c 23B00700 		sd	zero,0(a5)
 125:src/riscv.cpp ****             TCB::dispatch();
 554              		.loc 1 125 13 is_stmt 1
 125:src/riscv.cpp ****             TCB::dispatch();
GAS LISTING /tmp/cc5FFvbP.s 			page 19


 555              		.loc 1 125 26 is_stmt 0
 556 0240 97000000 		call	_ZN3TCB8dispatchEv@plt
 556      E7800000 
 557              	.LVL48:
 126:src/riscv.cpp ****             w_sstatus(sstatus);
 558              		.loc 1 126 13 is_stmt 1
 559              	.LBB48:
 560              	.LBB49:
 182:src/../h/riscv.hpp **** }
 561              		.loc 2 182 5
 182:src/../h/riscv.hpp **** }
 562              		.loc 2 182 77 is_stmt 0
 563              	#APP
 564              	# 182 "src/../h/riscv.hpp" 1
 565              		csrw sstatus, s2
 566              	# 0 "" 2
 567              	.LVL49:
 568              	#NO_APP
 569              	.LBE49:
 570              	.LBE48:
 127:src/riscv.cpp ****             w_sepc(sepc);
 571              		.loc 1 127 13 is_stmt 1
 572              	.LBB50:
 573              	.LBB51:
 114:src/../h/riscv.hpp **** }
 574              		.loc 2 114 5
 114:src/../h/riscv.hpp **** }
 575              		.loc 2 114 65 is_stmt 0
 576              	#APP
 577              	# 114 "src/../h/riscv.hpp" 1
 115:src/../h/riscv.hpp **** 
 578              		csrw sepc, s1
 579              	# 0 "" 2
 580              		.loc 2 115 1
 581              	#NO_APP
 582 0250 6FF01FFC 		j	.L18
 583              	.LBE51:
 584              	.LBE50:
 585              	.LBE43:
 586              	.LBE54:
 587              	.LBE39:
 588              	.LBE73:
 589              	.LBE76:
 590              		.cfi_endproc
 591              	.LFE34:
 593              	.Letext0:
 594              		.file 4 "src/../h/../lib/hw.h"
 595              		.file 5 "src/../h/syscall_c.h"
 596              		.file 6 "src/../h/print.hpp"
 597              		.file 7 "src/../lib/console.h"
GAS LISTING /tmp/cc5FFvbP.s 			page 20


DEFINED SYMBOLS
                            *ABS*:0000000000000000 riscv.cpp
     /tmp/cc5FFvbP.s:9      .text:0000000000000000 _ZN5Riscv10popSppSpieEv
     /tmp/cc5FFvbP.s:13     .text:0000000000000000 .L0 
     /tmp/cc5FFvbP.s:14     .text:0000000000000000 .L0 
     /tmp/cc5FFvbP.s:15     .text:0000000000000004 .L0 
     /tmp/cc5FFvbP.s:17     .text:0000000000000008 .L0 
     /tmp/cc5FFvbP.s:19     .text:000000000000000c .L0 
     /tmp/cc5FFvbP.s:21     .text:000000000000000c .L0 
       src/riscv.cpp:15     .text:000000000000000c .L0 
     /tmp/cc5FFvbP.s:27     .text:0000000000000010 .L0 
       src/riscv.cpp:16     .text:0000000000000010 .L0 
     /tmp/cc5FFvbP.s:33     .text:0000000000000014 .L0 
     /tmp/cc5FFvbP.s:34     .text:0000000000000018 .L0 
     /tmp/cc5FFvbP.s:35     .text:0000000000000018 .L0 
     /tmp/cc5FFvbP.s:37     .text:000000000000001c .L0 
     /tmp/cc5FFvbP.s:39     .text:0000000000000020 .L0 
     /tmp/cc5FFvbP.s:50     .text:0000000000000020 _ZN5Riscv20handleSupervisorTrapEv
     /tmp/cc5FFvbP.s:53     .text:0000000000000020 .L0 
     /tmp/cc5FFvbP.s:54     .text:0000000000000020 .L0 
     /tmp/cc5FFvbP.s:55     .text:0000000000000024 .L0 
     /tmp/cc5FFvbP.s:63     .text:0000000000000040 .L0 
     /tmp/cc5FFvbP.s:64     .text:0000000000000040 .L0 
     /tmp/cc5FFvbP.s:65     .text:0000000000000040 .L0 
     /tmp/cc5FFvbP.s:66     .text:0000000000000040 .L0 
     /tmp/cc5FFvbP.s:67     .text:0000000000000040 .L0 
     /tmp/cc5FFvbP.s:68     .text:0000000000000040 .L0 
     /tmp/cc5FFvbP.s:69     .text:0000000000000040 .L0 
     /tmp/cc5FFvbP.s:71     .text:0000000000000044 .L0 
     /tmp/cc5FFvbP.s:76     .text:0000000000000044 .L0 
     /tmp/cc5FFvbP.s:77     .text:0000000000000044 .L0 
     /tmp/cc5FFvbP.s:78     .text:0000000000000044 .L0 
  src/../h/riscv.hpp:96     .text:0000000000000044 .L0 
     /tmp/cc5FFvbP.s:86     .text:000000000000004c .L0 
     /tmp/cc5FFvbP.s:87     .text:000000000000004c .L0 
     /tmp/cc5FFvbP.s:93     .text:0000000000000050 .L0 
     /tmp/cc5FFvbP.s:94     .text:0000000000000050 .L0 
     /tmp/cc5FFvbP.s:96     .text:0000000000000054 .L0 
     /tmp/cc5FFvbP.s:102    .text:000000000000005c .L0 
     /tmp/cc5FFvbP.s:107    .text:000000000000006c .L0 
     /tmp/cc5FFvbP.s:112    .text:000000000000007c .L0 
     /tmp/cc5FFvbP.s:113    .text:000000000000007c .L0 
     /tmp/cc5FFvbP.s:118    .text:0000000000000084 .L0 
     /tmp/cc5FFvbP.s:126    .text:0000000000000088 .L0 
     /tmp/cc5FFvbP.s:127    .text:0000000000000088 .L0 
     /tmp/cc5FFvbP.s:128    .text:0000000000000088 .L0 
  src/../h/riscv.hpp:108    .text:0000000000000088 .L0 
     /tmp/cc5FFvbP.s:136    .text:0000000000000090 .L0 
     /tmp/cc5FFvbP.s:137    .text:0000000000000090 .L0 
     /tmp/cc5FFvbP.s:141    .text:0000000000000094 .L0 
     /tmp/cc5FFvbP.s:146    .text:0000000000000098 .L0 
     /tmp/cc5FFvbP.s:147    .text:0000000000000098 .L0 
     /tmp/cc5FFvbP.s:148    .text:0000000000000098 .L0 
  src/../h/riscv.hpp:176    .text:0000000000000098 .L0 
     /tmp/cc5FFvbP.s:156    .text:00000000000000a0 .L0 
     /tmp/cc5FFvbP.s:157    .text:00000000000000a0 .L0 
     /tmp/cc5FFvbP.s:162    .text:00000000000000a4 .L0 
GAS LISTING /tmp/cc5FFvbP.s 			page 21


     /tmp/cc5FFvbP.s:163    .text:00000000000000a4 .L0 
     /tmp/cc5FFvbP.s:164    .text:00000000000000a4 .L0 
       src/riscv.cpp:31     .text:00000000000000a4 .L0 
     /tmp/cc5FFvbP.s:172    .text:00000000000000a8 .L0 
     /tmp/cc5FFvbP.s:198    .text:00000000000000d0 .L0 
     /tmp/cc5FFvbP.s:200    .text:00000000000000d0 .L0 
     /tmp/cc5FFvbP.s:201    .text:00000000000000d0 .L0 
     /tmp/cc5FFvbP.s:202    .text:00000000000000d0 .L0 
     /tmp/cc5FFvbP.s:203    .text:00000000000000d0 .L0 
     /tmp/cc5FFvbP.s:204    .text:00000000000000d0 .L0 
     /tmp/cc5FFvbP.s:205    .text:00000000000000d0 .L0 
       src/riscv.cpp:42     .text:00000000000000d0 .L0 
     /tmp/cc5FFvbP.s:212    .text:00000000000000d4 .L0 
       src/riscv.cpp:43     .text:00000000000000d4 .L0 
     /tmp/cc5FFvbP.s:218    .text:00000000000000d8 .L0 
       src/riscv.cpp:44     .text:00000000000000d8 .L0 
     /tmp/cc5FFvbP.s:225    .text:00000000000000dc .L0 
     /tmp/cc5FFvbP.s:227    .text:00000000000000e0 .L0 
     /tmp/cc5FFvbP.s:228    .text:00000000000000e0 .L0 
     /tmp/cc5FFvbP.s:235    .text:00000000000000f0 .L0 
     /tmp/cc5FFvbP.s:236    .text:00000000000000f0 .L0 
     /tmp/cc5FFvbP.s:242    .text:0000000000000104 .L0 
     /tmp/cc5FFvbP.s:244    .text:0000000000000108 .L0 
     /tmp/cc5FFvbP.s:245    .text:0000000000000108 .L0 
     /tmp/cc5FFvbP.s:250    .text:0000000000000110 .L0 
       src/riscv.cpp:55     .text:0000000000000110 .L0 
     /tmp/cc5FFvbP.s:262    .text:0000000000000114 .L0 
     /tmp/cc5FFvbP.s:265    .text:0000000000000114 .L0 
     /tmp/cc5FFvbP.s:266    .text:0000000000000114 .L0 
  src/../h/riscv.hpp:182    .text:0000000000000114 .L0 
     /tmp/cc5FFvbP.s:278    .text:0000000000000118 .L0 
     /tmp/cc5FFvbP.s:279    .text:0000000000000118 .L0 
  src/../h/riscv.hpp:114    .text:0000000000000118 .L0 
     /tmp/cc5FFvbP.s:292    .text:000000000000011c .L0 
     /tmp/cc5FFvbP.s:293    .text:0000000000000120 .L0 
     /tmp/cc5FFvbP.s:294    .text:0000000000000120 .L0 
     /tmp/cc5FFvbP.s:296    .text:0000000000000124 .L0 
     /tmp/cc5FFvbP.s:297    .text:0000000000000124 .L0 
     /tmp/cc5FFvbP.s:299    .text:0000000000000128 .L0 
     /tmp/cc5FFvbP.s:301    .text:000000000000012c .L0 
     /tmp/cc5FFvbP.s:303    .text:0000000000000130 .L0 
     /tmp/cc5FFvbP.s:305    .text:0000000000000134 .L0 
     /tmp/cc5FFvbP.s:307    .text:0000000000000138 .L0 
     /tmp/cc5FFvbP.s:309    .text:000000000000013c .L0 
     /tmp/cc5FFvbP.s:313    .text:0000000000000140 .L0 
     /tmp/cc5FFvbP.s:320    .text:0000000000000140 .L0 
     /tmp/cc5FFvbP.s:325    .text:0000000000000148 .L0 
     /tmp/cc5FFvbP.s:331    .text:0000000000000150 .L0 
     /tmp/cc5FFvbP.s:332    .text:0000000000000150 .L0 
     /tmp/cc5FFvbP.s:333    .text:0000000000000150 .L0 
     /tmp/cc5FFvbP.s:334    .text:0000000000000150 .L0 
     /tmp/cc5FFvbP.s:338    .text:0000000000000160 .L0 
     /tmp/cc5FFvbP.s:339    .text:0000000000000160 .L0 
     /tmp/cc5FFvbP.s:342    .text:0000000000000168 .L0 
       src/riscv.cpp:63     .text:0000000000000168 .L0 
     /tmp/cc5FFvbP.s:349    .text:000000000000016c .L0 
     /tmp/cc5FFvbP.s:353    .text:0000000000000170 .L0 
GAS LISTING /tmp/cc5FFvbP.s 			page 22


     /tmp/cc5FFvbP.s:354    .text:0000000000000170 .L0 
     /tmp/cc5FFvbP.s:355    .text:0000000000000170 .L0 
     /tmp/cc5FFvbP.s:356    .text:0000000000000170 .L0 
     /tmp/cc5FFvbP.s:359    .text:0000000000000178 .L0 
     /tmp/cc5FFvbP.s:363    .text:000000000000017c .L0 
     /tmp/cc5FFvbP.s:365    .text:000000000000017c .L0 
     /tmp/cc5FFvbP.s:366    .text:000000000000017c .L0 
     /tmp/cc5FFvbP.s:367    .text:000000000000017c .L0 
     /tmp/cc5FFvbP.s:368    .text:000000000000017c .L0 
     /tmp/cc5FFvbP.s:369    .text:000000000000017c .L0 
     /tmp/cc5FFvbP.s:370    .text:000000000000017c .L0 
       src/riscv.cpp:80     .text:000000000000017c .L0 
     /tmp/cc5FFvbP.s:377    .text:0000000000000180 .L0 
       src/riscv.cpp:81     .text:0000000000000180 .L0 
     /tmp/cc5FFvbP.s:383    .text:0000000000000184 .L0 
       src/riscv.cpp:82     .text:0000000000000184 .L0 
     /tmp/cc5FFvbP.s:389    .text:0000000000000188 .L0 
       src/riscv.cpp:83     .text:0000000000000188 .L0 
     /tmp/cc5FFvbP.s:396    .text:000000000000018c .L0 
     /tmp/cc5FFvbP.s:398    .text:0000000000000190 .L0 
     /tmp/cc5FFvbP.s:399    .text:0000000000000190 .L0 
     /tmp/cc5FFvbP.s:406    .text:00000000000001a0 .L0 
     /tmp/cc5FFvbP.s:407    .text:00000000000001a0 .L0 
     /tmp/cc5FFvbP.s:413    .text:00000000000001b4 .L0 
     /tmp/cc5FFvbP.s:415    .text:00000000000001b8 .L0 
     /tmp/cc5FFvbP.s:416    .text:00000000000001b8 .L0 
     /tmp/cc5FFvbP.s:421    .text:00000000000001c0 .L0 
       src/riscv.cpp:94     .text:00000000000001c0 .L0 
     /tmp/cc5FFvbP.s:428    .text:00000000000001c4 .L0 
     /tmp/cc5FFvbP.s:432    .text:00000000000001c8 .L0 
     /tmp/cc5FFvbP.s:437    .text:00000000000001d0 .L0 
     /tmp/cc5FFvbP.s:443    .text:00000000000001d8 .L0 
     /tmp/cc5FFvbP.s:445    .text:00000000000001d8 .L0 
     /tmp/cc5FFvbP.s:446    .text:00000000000001d8 .L0 
     /tmp/cc5FFvbP.s:447    .text:00000000000001d8 .L0 
       src/riscv.cpp:101    .text:00000000000001d8 .L0 
     /tmp/cc5FFvbP.s:454    .text:00000000000001dc .L0 
     /tmp/cc5FFvbP.s:456    .text:00000000000001dc .L0 
     /tmp/cc5FFvbP.s:459    .text:00000000000001e4 .L0 
     /tmp/cc5FFvbP.s:469    .text:00000000000001e8 .L0 
     /tmp/cc5FFvbP.s:470    .text:00000000000001e8 .L0 
     /tmp/cc5FFvbP.s:477    .text:00000000000001fc .L0 
     /tmp/cc5FFvbP.s:478    .text:00000000000001fc .L0 
     /tmp/cc5FFvbP.s:485    .text:0000000000000208 .L0 
     /tmp/cc5FFvbP.s:486    .text:0000000000000208 .L0 
     /tmp/cc5FFvbP.s:491    .text:000000000000020c .L0 
     /tmp/cc5FFvbP.s:498    .text:0000000000000210 .L0 
     /tmp/cc5FFvbP.s:499    .text:0000000000000210 .L0 
     /tmp/cc5FFvbP.s:500    .text:0000000000000210 .L0 
     /tmp/cc5FFvbP.s:507    .text:0000000000000218 .L0 
     /tmp/cc5FFvbP.s:517    .text:000000000000021c .L0 
     /tmp/cc5FFvbP.s:518    .text:000000000000021c .L0 
     /tmp/cc5FFvbP.s:519    .text:000000000000021c .L0 
  src/../h/riscv.hpp:108    .text:000000000000021c .L0 
     /tmp/cc5FFvbP.s:527    .text:0000000000000224 .L0 
     /tmp/cc5FFvbP.s:528    .text:0000000000000224 .L0 
     /tmp/cc5FFvbP.s:535    .text:0000000000000228 .L0 
GAS LISTING /tmp/cc5FFvbP.s 			page 23


     /tmp/cc5FFvbP.s:536    .text:0000000000000228 .L0 
     /tmp/cc5FFvbP.s:537    .text:0000000000000228 .L0 
  src/../h/riscv.hpp:176    .text:0000000000000228 .L0 
     /tmp/cc5FFvbP.s:545    .text:0000000000000230 .L0 
     /tmp/cc5FFvbP.s:546    .text:0000000000000230 .L0 
     /tmp/cc5FFvbP.s:551    .text:0000000000000234 .L0 
     /tmp/cc5FFvbP.s:552    .text:0000000000000234 .L0 
     /tmp/cc5FFvbP.s:555    .text:0000000000000240 .L0 
     /tmp/cc5FFvbP.s:556    .text:0000000000000240 .L0 
     /tmp/cc5FFvbP.s:561    .text:0000000000000248 .L0 
     /tmp/cc5FFvbP.s:562    .text:0000000000000248 .L0 
  src/../h/riscv.hpp:182    .text:0000000000000248 .L0 
     /tmp/cc5FFvbP.s:574    .text:000000000000024c .L0 
     /tmp/cc5FFvbP.s:575    .text:000000000000024c .L0 
  src/../h/riscv.hpp:114    .text:000000000000024c .L0 
     /tmp/cc5FFvbP.s:582    .text:0000000000000250 .L0 
     /tmp/cc5FFvbP.s:590    .text:0000000000000254 .L0 
     /tmp/cc5FFvbP.s:598    .text:0000000000000254 .L0 
     /tmp/cc5FFvbP.s:187    .rodata:0000000000000000 .L7
     /tmp/cc5FFvbP.s:179    .text:00000000000000b8 .L0 
     /tmp/cc5FFvbP.s:44     .rodata.str1.8:0000000000000000 .LC0
     /tmp/cc5FFvbP.s:334    .text:0000000000000150 .L0 
     /tmp/cc5FFvbP.s:470    .text:00000000000001e8 .L0 
     /tmp/cc5FFvbP.s:478    .text:00000000000001fc .L0 
     /tmp/cc5FFvbP.s:552    .text:0000000000000234 .L0 
     /tmp/cc5FFvbP.s:120    .text:0000000000000088 .L24
     /tmp/cc5FFvbP.s:461    .text:00000000000001e8 .L25
     /tmp/cc5FFvbP.s:286    .text:000000000000011c .L3
     /tmp/cc5FFvbP.s:258    .text:0000000000000114 .L5
     /tmp/cc5FFvbP.s:312    .text:0000000000000140 .L19
     /tmp/cc5FFvbP.s:323    .text:0000000000000148 .L20
     /tmp/cc5FFvbP.s:233    .text:00000000000000f0 .L12
     /tmp/cc5FFvbP.s:247    .text:0000000000000110 .L13
     /tmp/cc5FFvbP.s:430    .text:00000000000001c8 .L21
     /tmp/cc5FFvbP.s:435    .text:00000000000001d0 .L22
     /tmp/cc5FFvbP.s:404    .text:00000000000001a0 .L14
     /tmp/cc5FFvbP.s:418    .text:00000000000001c0 .L15
     /tmp/cc5FFvbP.s:509    .text:000000000000021c .L26
     /tmp/cc5FFvbP.s:493    .text:0000000000000210 .L18
     /tmp/cc5FFvbP.s:194    .text:00000000000000d0 .L11
     /tmp/cc5FFvbP.s:328    .text:0000000000000150 .L10
     /tmp/cc5FFvbP.s:351    .text:0000000000000170 .L9
     /tmp/cc5FFvbP.s:361    .text:000000000000017c .L8
     /tmp/cc5FFvbP.s:440    .text:00000000000001d8 .L6
     /tmp/cc5FFvbP.s:1731   .debug_abbrev:0000000000000000 .Ldebug_abbrev0
     /tmp/cc5FFvbP.s:3137   .debug_str:000000000000056e .LASF101
     /tmp/cc5FFvbP.s:3091   .debug_str:000000000000043d .LASF102
     /tmp/cc5FFvbP.s:3011   .debug_str:00000000000001df .LASF103
     /tmp/cc5FFvbP.s:5      .text:0000000000000000 .Ltext0
     /tmp/cc5FFvbP.s:593    .text:0000000000000254 .Letext0
     /tmp/cc5FFvbP.s:2941   .debug_line:0000000000000000 .Ldebug_line0
     /tmp/cc5FFvbP.s:3071   .debug_str:00000000000003d1 .LASF0
     /tmp/cc5FFvbP.s:3087   .debug_str:0000000000000417 .LASF1
     /tmp/cc5FFvbP.s:3063   .debug_str:000000000000039a .LASF2
     /tmp/cc5FFvbP.s:3037   .debug_str:00000000000002de .LASF4
     /tmp/cc5FFvbP.s:3115   .debug_str:00000000000004e0 .LASF3
     /tmp/cc5FFvbP.s:2969   .debug_str:000000000000009b .LASF5
GAS LISTING /tmp/cc5FFvbP.s 			page 24


     /tmp/cc5FFvbP.s:3089   .debug_str:000000000000042a .LASF6
     /tmp/cc5FFvbP.s:3069   .debug_str:00000000000003be .LASF7
     /tmp/cc5FFvbP.s:3143   .debug_str:000000000000064c .LASF8
     /tmp/cc5FFvbP.s:3021   .debug_str:0000000000000235 .LASF9
     /tmp/cc5FFvbP.s:3097   .debug_str:000000000000045c .LASF10
     /tmp/cc5FFvbP.s:3139   .debug_str:0000000000000632 .LASF11
     /tmp/cc5FFvbP.s:2971   .debug_str:00000000000000a2 .LASF12
     /tmp/cc5FFvbP.s:2949   .debug_str:000000000000002b .LASF13
     /tmp/cc5FFvbP.s:2979   .debug_str:00000000000000ec .LASF14
     /tmp/cc5FFvbP.s:3109   .debug_str:00000000000004a2 .LASF15
     /tmp/cc5FFvbP.s:2987   .debug_str:0000000000000110 .LASF16
     /tmp/cc5FFvbP.s:3083   .debug_str:0000000000000406 .LASF60
     /tmp/cc5FFvbP.s:3051   .debug_str:000000000000033f .LASF104
     /tmp/cc5FFvbP.s:3123   .debug_str:0000000000000519 .LASF17
     /tmp/cc5FFvbP.s:3081   .debug_str:00000000000003fd .LASF18
     /tmp/cc5FFvbP.s:3045   .debug_str:000000000000030c .LASF19
     /tmp/cc5FFvbP.s:3107   .debug_str:0000000000000497 .LASF20
     /tmp/cc5FFvbP.s:3159   .debug_str:00000000000006c2 .LASF22
     /tmp/cc5FFvbP.s:2963   .debug_str:000000000000006c .LASF21
     /tmp/cc5FFvbP.s:2999   .debug_str:000000000000017b .LASF23
     /tmp/cc5FFvbP.s:3125   .debug_str:0000000000000522 .LASF24
     /tmp/cc5FFvbP.s:2947   .debug_str:0000000000000011 .LASF25
     /tmp/cc5FFvbP.s:2951   .debug_str:000000000000003b .LASF26
     /tmp/cc5FFvbP.s:3003   .debug_str:000000000000019e .LASF28
     /tmp/cc5FFvbP.s:2997   .debug_str:0000000000000172 .LASF30
     /tmp/cc5FFvbP.s:2995   .debug_str:000000000000015d .LASF32
     /tmp/cc5FFvbP.s:3119   .debug_str:0000000000000503 .LASF27
     /tmp/cc5FFvbP.s:3099   .debug_str:000000000000046b .LASF29
     /tmp/cc5FFvbP.s:3135   .debug_str:0000000000000567 .LASF31
     /tmp/cc5FFvbP.s:3129   .debug_str:0000000000000536 .LASF33
     /tmp/cc5FFvbP.s:3015   .debug_str:0000000000000210 .LASF34
     /tmp/cc5FFvbP.s:2989   .debug_str:0000000000000126 .LASF35
     /tmp/cc5FFvbP.s:2945   .debug_str:0000000000000009 .LASF36
     /tmp/cc5FFvbP.s:3029   .debug_str:0000000000000287 .LASF37
     /tmp/cc5FFvbP.s:2967   .debug_str:0000000000000093 .LASF38
     /tmp/cc5FFvbP.s:2973   .debug_str:00000000000000b2 .LASF39
     /tmp/cc5FFvbP.s:3163   .debug_str:00000000000006e5 .LASF40
     /tmp/cc5FFvbP.s:3005   .debug_str:00000000000001b3 .LASF41
     /tmp/cc5FFvbP.s:3073   .debug_str:00000000000003de .LASF42
     /tmp/cc5FFvbP.s:3155   .debug_str:00000000000006aa .LASF43
     /tmp/cc5FFvbP.s:2961   .debug_str:0000000000000065 .LASF44
     /tmp/cc5FFvbP.s:3013   .debug_str:00000000000001fd .LASF45
     /tmp/cc5FFvbP.s:3017   .debug_str:0000000000000218 .LASF46
     /tmp/cc5FFvbP.s:3133   .debug_str:0000000000000555 .LASF47
     /tmp/cc5FFvbP.s:2959   .debug_str:000000000000005f .LASF48
     /tmp/cc5FFvbP.s:3169   .debug_str:0000000000000728 .LASF49
     /tmp/cc5FFvbP.s:3161   .debug_str:00000000000006da .LASF50
     /tmp/cc5FFvbP.s:3113   .debug_str:00000000000004c8 .LASF51
     /tmp/cc5FFvbP.s:3085   .debug_str:000000000000040c .LASF52
     /tmp/cc5FFvbP.s:3055   .debug_str:0000000000000355 .LASF53
     /tmp/cc5FFvbP.s:2977   .debug_str:00000000000000e2 .LASF54
     /tmp/cc5FFvbP.s:3033   .debug_str:00000000000002a0 .LASF55
     /tmp/cc5FFvbP.s:3067   .debug_str:00000000000003b4 .LASF56
     /tmp/cc5FFvbP.s:3027   .debug_str:0000000000000271 .LASF57
     /tmp/cc5FFvbP.s:3121   .debug_str:000000000000050a .LASF58
     /tmp/cc5FFvbP.s:2975   .debug_str:00000000000000c6 .LASF59
     /tmp/cc5FFvbP.s:3145   .debug_str:000000000000065c .LASF77
GAS LISTING /tmp/cc5FFvbP.s 			page 25


     /tmp/cc5FFvbP.s:3049   .debug_str:000000000000031d .LASF79
     /tmp/cc5FFvbP.s:2957   .debug_str:0000000000000057 .LASF105
     /tmp/cc5FFvbP.s:3031   .debug_str:000000000000029b .LASF61
     /tmp/cc5FFvbP.s:3101   .debug_str:000000000000047e .LASF63
     /tmp/cc5FFvbP.s:3093   .debug_str:000000000000044b .LASF65
     /tmp/cc5FFvbP.s:3019   .debug_str:000000000000021e .LASF67
     /tmp/cc5FFvbP.s:3065   .debug_str:00000000000003a8 .LASF62
     /tmp/cc5FFvbP.s:3165   .debug_str:00000000000006ed .LASF64
     /tmp/cc5FFvbP.s:3057   .debug_str:000000000000036d .LASF66
     /tmp/cc5FFvbP.s:2965   .debug_str:000000000000007a .LASF68
     /tmp/cc5FFvbP.s:2985   .debug_str:0000000000000103 .LASF69
     /tmp/cc5FFvbP.s:3167   .debug_str:0000000000000704 .LASF70
     /tmp/cc5FFvbP.s:3105   .debug_str:0000000000000492 .LASF91
     /tmp/cc5FFvbP.s:3001   .debug_str:0000000000000196 .LASF106
     /tmp/cc5FFvbP.s:3025   .debug_str:0000000000000259 .LASF107
     /tmp/cc5FFvbP.s:3043   .debug_str:0000000000000307 .LASF71
     /tmp/cc5FFvbP.s:2983   .debug_str:00000000000000fd .LASF72
     /tmp/cc5FFvbP.s:3047   .debug_str:0000000000000315 .LASF73
     /tmp/cc5FFvbP.s:3079   .debug_str:00000000000003f3 .LASF74
     /tmp/cc5FFvbP.s:3041   .debug_str:00000000000002fe .LASF75
     /tmp/cc5FFvbP.s:3059   .debug_str:000000000000037a .LASF76
     /tmp/cc5FFvbP.s:3061   .debug_str:000000000000038c .LASF78
     /tmp/cc5FFvbP.s:3149   .debug_str:000000000000067f .LASF80
     /tmp/cc5FFvbP.s:3147   .debug_str:0000000000000671 .LASF108
     /tmp/cc5FFvbP.s:3035   .debug_str:00000000000002b6 .LASF109
     /tmp/cc5FFvbP.s:3075   .debug_str:00000000000003e5 .LASF81
     /tmp/cc5FFvbP.s:3007   .debug_str:00000000000001c7 .LASF82
     /tmp/cc5FFvbP.s:3141   .debug_str:0000000000000641 .LASF83
     /tmp/cc5FFvbP.s:3023   .debug_str:0000000000000243 .LASF84
     /tmp/cc5FFvbP.s:3131   .debug_str:0000000000000549 .LASF85
     /tmp/cc5FFvbP.s:3039   .debug_str:00000000000002e5 .LASF86
     /tmp/cc5FFvbP.s:3117   .debug_str:00000000000004f2 .LASF110
     /tmp/cc5FFvbP.s:3053   .debug_str:000000000000034a .LASF87
     /tmp/cc5FFvbP.s:3151   .debug_str:0000000000000698 .LASF88
     /tmp/cc5FFvbP.s:3009   .debug_str:00000000000001da .LASF89
     /tmp/cc5FFvbP.s:2943   .debug_str:0000000000000000 .LASF90
     /tmp/cc5FFvbP.s:51     .text:0000000000000020 .LFB34
     /tmp/cc5FFvbP.s:591    .text:0000000000000254 .LFE34
     /tmp/cc5FFvbP.s:2953   .debug_str:0000000000000044 .LASF92
     /tmp/cc5FFvbP.s:2684   .debug_loc:0000000000000000 .LLST0
     /tmp/cc5FFvbP.s:2927   .debug_ranges:0000000000000000 .Ldebug_ranges0
     /tmp/cc5FFvbP.s:3077   .debug_str:00000000000003ee .LASF93
     /tmp/cc5FFvbP.s:2753   .debug_loc:0000000000000106 .LLST4
     /tmp/cc5FFvbP.s:3103   .debug_str:000000000000048a .LASF94
     /tmp/cc5FFvbP.s:2764   .debug_loc:000000000000013c .LLST5
     /tmp/cc5FFvbP.s:3153   .debug_str:00000000000006a3 .LASF95
     /tmp/cc5FFvbP.s:2775   .debug_loc:0000000000000172 .LLST6
     /tmp/cc5FFvbP.s:2788   .debug_loc:00000000000001aa .LLST7
     /tmp/cc5FFvbP.s:3127   .debug_str:000000000000052f .LASF96
     /tmp/cc5FFvbP.s:2803   .debug_loc:00000000000001f3 .LLST8
     /tmp/cc5FFvbP.s:2814   .debug_loc:0000000000000229 .LLST9
     /tmp/cc5FFvbP.s:2825   .debug_loc:000000000000025f .LLST10
     /tmp/cc5FFvbP.s:2836   .debug_loc:0000000000000295 .LLST11
     /tmp/cc5FFvbP.s:230    .text:00000000000000ec .LVL12
     /tmp/cc5FFvbP.s:240    .text:0000000000000104 .LVL14
     /tmp/cc5FFvbP.s:364    .text:000000000000017c .LBB64
     /tmp/cc5FFvbP.s:441    .text:00000000000001d8 .LBE64
GAS LISTING /tmp/cc5FFvbP.s 			page 26


     /tmp/cc5FFvbP.s:2843   .debug_loc:00000000000002b8 .LLST12
     /tmp/cc5FFvbP.s:2850   .debug_loc:00000000000002db .LLST13
     /tmp/cc5FFvbP.s:2857   .debug_loc:00000000000002fe .LLST14
     /tmp/cc5FFvbP.s:2864   .debug_loc:0000000000000321 .LLST15
     /tmp/cc5FFvbP.s:401    .text:000000000000019c .LVL31
     /tmp/cc5FFvbP.s:411    .text:00000000000001b4 .LVL33
     /tmp/cc5FFvbP.s:444    .text:00000000000001d8 .LBB65
     /tmp/cc5FFvbP.s:462    .text:00000000000001e8 .LBE65
     /tmp/cc5FFvbP.s:2871   .debug_loc:0000000000000344 .LLST16
     /tmp/cc5FFvbP.s:457    .text:00000000000001e4 .LVL39
     /tmp/cc5FFvbP.s:124    .text:0000000000000088 .LBB56
     /tmp/cc5FFvbP.s:139    .text:0000000000000094 .LBE56
     /tmp/cc5FFvbP.s:144    .text:0000000000000098 .LBB58
     /tmp/cc5FFvbP.s:160    .text:00000000000000a4 .LBE58
     /tmp/cc5FFvbP.s:263    .text:0000000000000114 .LBB67
     /tmp/cc5FFvbP.s:274    .text:0000000000000118 .LBE67
     /tmp/cc5FFvbP.s:2878   .debug_loc:0000000000000367 .LLST17
     /tmp/cc5FFvbP.s:276    .text:0000000000000118 .LBB69
     /tmp/cc5FFvbP.s:288    .text:000000000000011c .LBE69
     /tmp/cc5FFvbP.s:2885   .debug_loc:000000000000038a .LLST18
     /tmp/cc5FFvbP.s:336    .text:0000000000000160 .LVL22
     /tmp/cc5FFvbP.s:340    .text:0000000000000168 .LVL23
     /tmp/cc5FFvbP.s:357    .text:0000000000000178 .LVL25
     /tmp/cc5FFvbP.s:513    .text:000000000000021c .LBB43
     /tmp/cc5FFvbP.s:585    .text:0000000000000254 .LBE43
     /tmp/cc5FFvbP.s:515    .text:000000000000021c .LBB44
     /tmp/cc5FFvbP.s:531    .text:0000000000000228 .LBE44
     /tmp/cc5FFvbP.s:533    .text:0000000000000228 .LBB46
     /tmp/cc5FFvbP.s:549    .text:0000000000000234 .LBE46
     /tmp/cc5FFvbP.s:559    .text:0000000000000248 .LBB48
     /tmp/cc5FFvbP.s:570    .text:000000000000024c .LBE48
     /tmp/cc5FFvbP.s:2892   .debug_loc:00000000000003ad .LLST2
     /tmp/cc5FFvbP.s:572    .text:000000000000024c .LBB50
     /tmp/cc5FFvbP.s:584    .text:0000000000000254 .LBE50
     /tmp/cc5FFvbP.s:557    .text:0000000000000248 .LVL48
     /tmp/cc5FFvbP.s:73     .text:0000000000000044 .LBB35
     /tmp/cc5FFvbP.s:90     .text:0000000000000050 .LBE35
     /tmp/cc5FFvbP.s:481    .text:0000000000000208 .LBB41
     /tmp/cc5FFvbP.s:489    .text:000000000000020c .LBE41
     /tmp/cc5FFvbP.s:2899   .debug_loc:00000000000003d0 .LLST1
     /tmp/cc5FFvbP.s:496    .text:0000000000000210 .LBB52
     /tmp/cc5FFvbP.s:511    .text:000000000000021c .LBE52
     /tmp/cc5FFvbP.s:2906   .debug_loc:00000000000003f3 .LLST3
     /tmp/cc5FFvbP.s:114    .text:0000000000000084 .LVL1
     /tmp/cc5FFvbP.s:10     .text:0000000000000000 .LFB33
     /tmp/cc5FFvbP.s:40     .text:0000000000000020 .LFE33
     /tmp/cc5FFvbP.s:3157   .debug_str:00000000000006bd .LASF111
     /tmp/cc5FFvbP.s:2981   .debug_str:00000000000000f8 .LASF97
     /tmp/cc5FFvbP.s:3095   .debug_str:0000000000000456 .LASF112
     /tmp/cc5FFvbP.s:3111   .debug_str:00000000000004b8 .LASF113
     /tmp/cc5FFvbP.s:2991   .debug_str:000000000000013a .LASF98
     /tmp/cc5FFvbP.s:2955   .debug_str:000000000000004b .LASF100
     /tmp/cc5FFvbP.s:2993   .debug_str:000000000000014d .LASF99
     /tmp/cc5FFvbP.s:88     .text:0000000000000050 .LVL0
     /tmp/cc5FFvbP.s:119    .text:0000000000000088 .LVL2
     /tmp/cc5FFvbP.s:175    .text:00000000000000b0 .LVL7
     /tmp/cc5FFvbP.s:311    .text:0000000000000140 .LVL19
GAS LISTING /tmp/cc5FFvbP.s 			page 27


     /tmp/cc5FFvbP.s:322    .text:0000000000000148 .LVL20
     /tmp/cc5FFvbP.s:327    .text:0000000000000150 .LVL21
     /tmp/cc5FFvbP.s:350    .text:0000000000000170 .LVL24
     /tmp/cc5FFvbP.s:360    .text:000000000000017c .LVL26
     /tmp/cc5FFvbP.s:429    .text:00000000000001c8 .LVL35
     /tmp/cc5FFvbP.s:434    .text:00000000000001d0 .LVL36
     /tmp/cc5FFvbP.s:439    .text:00000000000001d8 .LVL37
     /tmp/cc5FFvbP.s:460    .text:00000000000001e8 .LVL40
     /tmp/cc5FFvbP.s:471    .text:00000000000001f0 .LVL41
     /tmp/cc5FFvbP.s:492    .text:0000000000000210 .LVL44
     /tmp/cc5FFvbP.s:508    .text:000000000000021c .LVL45
     /tmp/cc5FFvbP.s:142    .text:0000000000000098 .LVL3
     /tmp/cc5FFvbP.s:284    .text:000000000000011c .LVL18
     /tmp/cc5FFvbP.s:158    .text:00000000000000a4 .LVL4
     /tmp/cc5FFvbP.s:169    .text:00000000000000a8 .LVL5
     /tmp/cc5FFvbP.s:173    .text:00000000000000ac .LVL6
     /tmp/cc5FFvbP.s:178    .text:00000000000000b8 .LVL8
     /tmp/cc5FFvbP.s:248    .text:0000000000000110 .LVL15
     /tmp/cc5FFvbP.s:256    .text:0000000000000114 .LVL16
     /tmp/cc5FFvbP.s:419    .text:00000000000001c0 .LVL34
     /tmp/cc5FFvbP.s:210    .text:00000000000000d4 .LVL9
     /tmp/cc5FFvbP.s:216    .text:00000000000000d8 .LVL10
     /tmp/cc5FFvbP.s:222    .text:00000000000000dc .LVL11
     /tmp/cc5FFvbP.s:232    .text:00000000000000f0 .LVL13
     /tmp/cc5FFvbP.s:375    .text:0000000000000180 .LVL27
     /tmp/cc5FFvbP.s:381    .text:0000000000000184 .LVL28
     /tmp/cc5FFvbP.s:393    .text:000000000000018c .LVL30
     /tmp/cc5FFvbP.s:403    .text:00000000000001a0 .LVL32
     /tmp/cc5FFvbP.s:452    .text:00000000000001dc .LVL38
     /tmp/cc5FFvbP.s:271    .text:0000000000000118 .LVL17
     /tmp/cc5FFvbP.s:567    .text:000000000000024c .LVL49
     /tmp/cc5FFvbP.s:480    .text:0000000000000208 .LVL42
     /tmp/cc5FFvbP.s:487    .text:000000000000020c .LVL43
     /tmp/cc5FFvbP.s:599    .debug_info:0000000000000000 .Ldebug_info0
     /tmp/cc5FFvbP.s:122    .text:0000000000000088 .LBB55
     /tmp/cc5FFvbP.s:289    .text:000000000000011c .LBE55
     /tmp/cc5FFvbP.s:315    .text:0000000000000140 .LBB72
     /tmp/cc5FFvbP.s:465    .text:00000000000001e8 .LBE72
     /tmp/cc5FFvbP.s:199    .text:00000000000000d0 .LBB62
     /tmp/cc5FFvbP.s:259    .text:0000000000000114 .LBE62
     /tmp/cc5FFvbP.s:318    .text:0000000000000140 .LBB63
     /tmp/cc5FFvbP.s:329    .text:0000000000000150 .LBE63

UNDEFINED SYMBOLS
console_handler
_Znam
_ZN3TCB12createThreadEPFvPvES0_S0_b
_Z11printStringPKc
_ZN3TCB10threadExitEv
_ZN3TCB8dispatchEv
_ZN3TCB11threadStartEPS_
_ZN3TCB16timeSliceCounterE
_ZN3TCB7runningE
