GAS LISTING /tmp/cci4wTfs.s 			page 1


   1              		.file	"syscall_c.c"
   2              		.option nopic
   3              		.option norelax
   4              		.text
   5              	.Ltext0:
   6              		.cfi_sections	.debug_frame
   7              		.align	2
   8              		.globl	mem_alloc
  10              	mem_alloc:
  11              	.LFB0:
  12              		.file 1 "src/syscall_c.c"
   1:src/syscall_c.c **** #include "../h/syscall_c.h"
   2:src/syscall_c.c **** #include "../lib/console.h"
   3:src/syscall_c.c **** 
   4:src/syscall_c.c **** 
   5:src/syscall_c.c **** #define FIRST_FREE_ADDRESS HEAP_START_ADDR
   6:src/syscall_c.c **** #define LAST_FREE_ADDRESS ((HEAP_END_ADDR)-(1))
   7:src/syscall_c.c **** 
   8:src/syscall_c.c **** // zasto ovo kad mogu sam oda ukljucim hw.h? Ukljucena je hw.h implicitno kroz syscall_c.h
   9:src/syscall_c.c **** //extern const void* HEAP_START_ADDR;
  10:src/syscall_c.c **** //extern const void* HEAP_END_ADDR;
  11:src/syscall_c.c **** 
  12:src/syscall_c.c **** 
  13:src/syscall_c.c **** 
  14:src/syscall_c.c **** //unsigned int total_size_of_level(int i)
  15:src/syscall_c.c **** //{
  16:src/syscall_c.c **** //    return (0x1 << i) * MEM_BLOCK_SIZE;
  17:src/syscall_c.c **** //}
  18:src/syscall_c.c **** //
  19:src/syscall_c.c **** //// Nothing to do with best-fit algorithm
  20:src/syscall_c.c **** //unsigned int level_of_best_fit_block(size_t req)
  21:src/syscall_c.c **** //{
  22:src/syscall_c.c **** //    unsigned int total = req + sizeof(FreeBlocks);
  23:src/syscall_c.c **** //    unsigned int i = 0x1;
  24:src/syscall_c.c **** //
  25:src/syscall_c.c **** //    while (i < total)
  26:src/syscall_c.c **** //        i <<= 1;
  27:src/syscall_c.c **** //
  28:src/syscall_c.c **** //    return i;
  29:src/syscall_c.c **** //}
  30:src/syscall_c.c **** 
  31:src/syscall_c.c **** void*
  32:src/syscall_c.c **** mem_alloc(size_t size)
  33:src/syscall_c.c **** {
  13              		.loc 1 33 1
  14              		.cfi_startproc
  15              	.LVL0:
  16 0000 130101FF 		addi	sp,sp,-16
  17              		.cfi_def_cfa_offset 16
  18 0004 23348100 		sd	s0,8(sp)
  19              		.cfi_offset 8, -8
  20 0008 13040101 		addi	s0,sp,16
  21              		.cfi_def_cfa 8, 0
  34:src/syscall_c.c ****     size_t blocks = 1;
  22              		.loc 1 34 5
  23              	.LVL1:
  24              		.loc 1 34 12 is_stmt 0
GAS LISTING /tmp/cci4wTfs.s 			page 2


  25 000c 93071000 		li	a5,1
  26              	.LVL2:
  27              	.L3:
  35:src/syscall_c.c **** 
  36:src/syscall_c.c ****     // Nalazimo koliko nam blokova treba da 'pokrijemo' size bajtova
  37:src/syscall_c.c ****     do{
  28              		.loc 1 37 5 is_stmt 1
  38:src/syscall_c.c ****         if (blocks * MEM_BLOCK_SIZE >= size)
  29              		.loc 1 38 9
  30              		.loc 1 38 20 is_stmt 0
  31 0010 13976700 		slli	a4,a5,6
  32              		.loc 1 38 12
  33 0014 6376A700 		bgeu	a4,a0,.L2
  39:src/syscall_c.c ****             break;
  40:src/syscall_c.c **** 
  41:src/syscall_c.c ****         blocks++;
  34              		.loc 1 41 9 is_stmt 1
  35              		.loc 1 41 15 is_stmt 0
  36 0018 93871700 		addi	a5,a5,1
  37              	.LVL3:
  42:src/syscall_c.c ****     } while (1);
  38              		.loc 1 42 13 is_stmt 1
  38:src/syscall_c.c ****         if (blocks * MEM_BLOCK_SIZE >= size)
  39              		.loc 1 38 12 is_stmt 0
  40 001c 6FF05FFF 		j	.L3
  41              	.L2:
  43:src/syscall_c.c **** 
  44:src/syscall_c.c ****     //void* result = (void*) (blocks * MEM_BLOCK_SIZE);
  45:src/syscall_c.c **** 
  46:src/syscall_c.c ****     return NULL;
  42              		.loc 1 46 5 is_stmt 1
  47:src/syscall_c.c **** }
  43              		.loc 1 47 1 is_stmt 0
  44 0020 13050000 		li	a0,0
  45              	.LVL4:
  46 0024 03348100 		ld	s0,8(sp)
  47              		.cfi_restore 8
  48              		.cfi_def_cfa 2, 16
  49 0028 13010101 		addi	sp,sp,16
  50              		.cfi_def_cfa_offset 0
  51 002c 67800000 		jr	ra
  52              		.cfi_endproc
  53              	.LFE0:
  55              		.align	2
  56              		.globl	mem_alloc_proba
  58              	mem_alloc_proba:
  59              	.LFB1:
  48:src/syscall_c.c **** 
  49:src/syscall_c.c **** void* mem_alloc_proba(size_t size)
  50:src/syscall_c.c **** {
  60              		.loc 1 50 1 is_stmt 1
  61              		.cfi_startproc
  62              	.LVL5:
  63 0030 130101FF 		addi	sp,sp,-16
  64              		.cfi_def_cfa_offset 16
  65 0034 23341100 		sd	ra,8(sp)
  66 0038 23308100 		sd	s0,0(sp)
GAS LISTING /tmp/cci4wTfs.s 			page 3


  67              		.cfi_offset 1, -8
  68              		.cfi_offset 8, -16
  69 003c 13040101 		addi	s0,sp,16
  70              		.cfi_def_cfa 8, 0
  51:src/syscall_c.c ****     size_t blocks = 1;
  71              		.loc 1 51 5
  72              	.LVL6:
  73              		.loc 1 51 12 is_stmt 0
  74 0040 93071000 		li	a5,1
  75              	.LVL7:
  76              	.L7:
  52:src/syscall_c.c **** 
  53:src/syscall_c.c **** // Nalazimo koliko nam blokova treba da 'pokrijemo' size bajtova
  54:src/syscall_c.c ****     do{
  77              		.loc 1 54 5 is_stmt 1
  55:src/syscall_c.c ****         if (blocks * MEM_BLOCK_SIZE >= size)
  78              		.loc 1 55 9
  79              		.loc 1 55 20 is_stmt 0
  80 0044 13976700 		slli	a4,a5,6
  81              		.loc 1 55 12
  82 0048 6376A700 		bgeu	a4,a0,.L6
  56:src/syscall_c.c ****             break;
  57:src/syscall_c.c **** 
  58:src/syscall_c.c ****         blocks++;
  83              		.loc 1 58 9 is_stmt 1
  84              		.loc 1 58 15 is_stmt 0
  85 004c 93871700 		addi	a5,a5,1
  86              	.LVL8:
  59:src/syscall_c.c ****     } while (1);
  87              		.loc 1 59 13 is_stmt 1
  55:src/syscall_c.c ****         if (blocks * MEM_BLOCK_SIZE >= size)
  88              		.loc 1 55 12 is_stmt 0
  89 0050 6FF05FFF 		j	.L7
  90              	.L6:
  60:src/syscall_c.c **** 
  61:src/syscall_c.c **** //    void* result = (void*) (blocks * MEM_BLOCK_SIZE);
  62:src/syscall_c.c **** //    result++;
  63:src/syscall_c.c **** 
  64:src/syscall_c.c **** 
  65:src/syscall_c.c ****    // Priprema za sistemski poziv. Izgleda da moram da napravim prekidnu
  66:src/syscall_c.c ****    // rutinu da bi ovo moglo da radi
  67:src/syscall_c.c **** /*
  68:src/syscall_c.c ****    asm volatile ("xor a0, a0, a0");
  69:src/syscall_c.c ****    asm volatile ("addiw a0, x0, 1");
  70:src/syscall_c.c ****    asm volatile("ecall"); // Why does this terminates the program?
  71:src/syscall_c.c **** */
  72:src/syscall_c.c **** 
  73:src/syscall_c.c ****    // KAKO JE OVO Error: offset too large kad bukvalno pre
  74:src/syscall_c.c ****    // Nego sto se izvrsi instrukcija, adresa iste velicine po pitanju
  75:src/syscall_c.c ****    // bitova se vec nalazi tu. Znaci koji KURAC!!!!!
  76:src/syscall_c.c ****    // asm volatile ("ld ra,  0x80001710"); Ilegalna instrukcija - MAJMUNE
  77:src/syscall_c.c ****    long long int ovo = 0;
  91              		.loc 1 77 4 is_stmt 1
  92              	.LVL9:
  78:src/syscall_c.c ****    asm volatile ("li ra,  0x80001710");
  93              		.loc 1 78 4
  94              	#APP
GAS LISTING /tmp/cci4wTfs.s 			page 4


  95              	# 78 "src/syscall_c.c" 1
  79              	   asm volatile ("mv %0, ra" : "=r" (ovo));
  96              		li ra,  0x80001710
  97              	# 0 "" 2
  98              		.loc 1 79 4
  99              	# 79 "src/syscall_c.c" 1
  80              	   // asm volatile("mv %0, s0" : "=r" (x) );
 100              		mv a5, ra
 101              	# 0 "" 2
 102              	.LVL10:
  81:src/syscall_c.c ****    // asm volatile("ld s0, 8(sp)");
  82:src/syscall_c.c **** 
  83:src/syscall_c.c ****    long long int rem = ovo;
 103              		.loc 1 83 4
  84:src/syscall_c.c ****    ovo++;
 104              		.loc 1 84 4
  85:src/syscall_c.c **** 
  86:src/syscall_c.c ****    ovo = ovo - rem;
 105              		.loc 1 86 4
  87:src/syscall_c.c ****    __putc(ovo);
 106              		.loc 1 87 4
 107              	#NO_APP
 108 0068 13051000 		li	a0,1
 109              	.LVL11:
 110 006c 97000000 		call	__putc
 110      E7800000 
 111              	.LVL12:
  88:src/syscall_c.c ****    __putc('\n');
 112              		.loc 1 88 4
 113 0074 1305A000 		li	a0,10
 114 0078 97000000 		call	__putc
 114      E7800000 
 115              	.LVL13:
  89:src/syscall_c.c **** 
  90:src/syscall_c.c **** 
  91:src/syscall_c.c **** 
  92:src/syscall_c.c ****     // Ulazimo u sistemski rezim procesora i pozivamo funkciju na poziciji 0x01 tj. mem_alloc;
  93:src/syscall_c.c ****     // ecall(0x01);
  94:src/syscall_c.c **** 
  95:src/syscall_c.c ****     // Pitanje - kako se ovde poziva mrtvi __mem_alloc iz mem.c koji bi trebalo da je ABI.
  96:src/syscall_c.c ****     // Ili je zapravo __mem_alloc zapravo C API i ne bi trebalo da imam dva?
  97:src/syscall_c.c **** 
  98:src/syscall_c.c ****     // Prilikom obrade sistemskog poziva, izuzetka ili prekida, procesor radi sledeće:
  99:src/syscall_c.c ****     //   vrednost registra pc upisuje u registar sepc (adresa instrukcije ecall ili adresa
 100:src/syscall_c.c ****     //   prve neizvršene/prekinute instrukcije);
 101:src/syscall_c.c ****     // Ovo se valjda radi impliticno pozivanjem funkcije ecall
 102:src/syscall_c.c **** 
 103:src/syscall_c.c ****     // Znaci ecall pozivamo ovako:
 104:src/syscall_c.c ****     // ecall 0x01
 105:src/syscall_c.c **** 
 106:src/syscall_c.c ****     // I onda se PC upisuje u
 107:src/syscall_c.c ****     // sepc(sačuvana vrednost registra pc u korisničkom režimu)
 108:src/syscall_c.c ****     //
 109:src/syscall_c.c **** 
 110:src/syscall_c.c ****     // U registar sstatus upisuje sledeće vrednosti:
 111:src/syscall_c.c ****     //   u bit SPP (bit 8) vrednost koja pokazuje iz kog režima se dogodio skok
 112:src/syscall_c.c ****     // ( vrednost 0 – korisnički režim, vrednost 1 – sistemski režim);
GAS LISTING /tmp/cci4wTfs.s 			page 5


 113:src/syscall_c.c **** 
 114:src/syscall_c.c ****     //   u bit SIE (bit 1) nulu, čime se maskiraju spoljašnji prekidi; u korisničkom
 115:src/syscall_c.c ****     // režimu se ovaj bit ignoriše – prekidi su podrazumevano dozvoljeni;
 116:src/syscall_c.c **** 
 117:src/syscall_c.c ****     //   u bit SPIE (bit 5) prethodnu vrednost bita SIE.
 118:src/syscall_c.c **** 
 119:src/syscall_c.c ****     // skače na prekidnu rutinu čija je adresa zapisana u registru stvec.
 120:src/syscall_c.c ****     // To znači da ovaj procesor ima jednu jedinstvenu prekidnu rutinu za sve vrste prekida.
 121:src/syscall_c.c **** 
 122:src/syscall_c.c ****     // Ostali registri se ne čuvaju hardverski, već je to odgovornost prekidne rutine.
 123:src/syscall_c.c **** 
 124:src/syscall_c.c ****     //   Registar sip sadrži informaciju o tome koji zahtevi za prekid su trenutno aktivni. Bit
 125:src/syscall_c.c ****     // SSIP (bit 1) označava da postoji zahtev za softverski prekid. U SSIP bit može da se
 126:src/syscall_c.c ****     // upiše vrednost. Upis jedinice postavlja zahtev za softverskim prekidom, dok upis nule
 127:src/syscall_c.c ****     // označava da se softverski prekid obradio (ovo svakako treba uraditi nakon obrade
 128:src/syscall_c.c ****     // prekida). Bit SEIP (bit 9) označava da postoji zahtev za spoljašnji hardverski prekid.
 129:src/syscall_c.c **** 
 130:src/syscall_c.c **** 
 131:src/syscall_c.c ****     /*
 132:src/syscall_c.c ****     * Registar sie je registar za maskiranje prekida, pa sadrži informaciju o tome koji prekidi
 133:src/syscall_c.c ****         su dozvoljeni. Vrednost ovog registra se uzima u obzir i prilikom izvršavanja u
 134:src/syscall_c.c ****         korisničkom režimu. Bit SSIE (bit 1) označava da li su dozvoljeni softverski prekidi. Bi
 135:src/syscall_c.c ****         SEIE (bit 9) označava da li su dozvoljeni spoljašnji hardverski prekidi. Ukoliko se
 136:src/syscall_c.c ****         program izvršava u sistemskom režimu i bit SIE u registru sstatus ima vrednost 0,
 137:src/syscall_c.c ****         vrednost registra sie se ignoriše.
 138:src/syscall_c.c ****      */
 139:src/syscall_c.c **** 
 140:src/syscall_c.c ****     return NULL;
 116              		.loc 1 140 5
 141:src/syscall_c.c **** }...
 117              		.loc 1 141 1 is_stmt 0
 118 0080 13050000 		li	a0,0
 119 0084 83308100 		ld	ra,8(sp)
 120              		.cfi_restore 1
 121 0088 03340100 		ld	s0,0(sp)
 122              		.cfi_restore 8
 123              		.cfi_def_cfa 2, 16
 124 008c 13010101 		addi	sp,sp,16
 125              		.cfi_def_cfa_offset 0
 126 0090 67800000 		jr	ra
 127              		.cfi_endproc
 128              	.LFE1:
 130              	.Letext0:
 131              		.file 2 "src/../h/../lib/hw.h"
 132              		.file 3 "src/../lib/console.h"
GAS LISTING /tmp/cci4wTfs.s 			page 6


DEFINED SYMBOLS
                            *ABS*:0000000000000000 syscall_c.c
     /tmp/cci4wTfs.s:10     .text:0000000000000000 mem_alloc
     /tmp/cci4wTfs.s:14     .text:0000000000000000 .L0 
     /tmp/cci4wTfs.s:16     .text:0000000000000000 .L0 
     /tmp/cci4wTfs.s:17     .text:0000000000000004 .L0 
     /tmp/cci4wTfs.s:19     .text:0000000000000008 .L0 
     /tmp/cci4wTfs.s:21     .text:000000000000000c .L0 
     /tmp/cci4wTfs.s:24     .text:000000000000000c .L0 
     /tmp/cci4wTfs.s:25     .text:000000000000000c .L0 
     /tmp/cci4wTfs.s:29     .text:0000000000000010 .L0 
     /tmp/cci4wTfs.s:30     .text:0000000000000010 .L0 
     /tmp/cci4wTfs.s:31     .text:0000000000000010 .L0 
     /tmp/cci4wTfs.s:33     .text:0000000000000014 .L0 
     /tmp/cci4wTfs.s:35     .text:0000000000000018 .L0 
     /tmp/cci4wTfs.s:36     .text:0000000000000018 .L0 
     /tmp/cci4wTfs.s:39     .text:000000000000001c .L0 
     /tmp/cci4wTfs.s:40     .text:000000000000001c .L0 
     /tmp/cci4wTfs.s:43     .text:0000000000000020 .L0 
     /tmp/cci4wTfs.s:44     .text:0000000000000020 .L0 
     /tmp/cci4wTfs.s:47     .text:0000000000000028 .L0 
     /tmp/cci4wTfs.s:48     .text:0000000000000028 .L0 
     /tmp/cci4wTfs.s:50     .text:000000000000002c .L0 
     /tmp/cci4wTfs.s:52     .text:0000000000000030 .L0 
     /tmp/cci4wTfs.s:58     .text:0000000000000030 mem_alloc_proba
     /tmp/cci4wTfs.s:61     .text:0000000000000030 .L0 
     /tmp/cci4wTfs.s:63     .text:0000000000000030 .L0 
     /tmp/cci4wTfs.s:64     .text:0000000000000034 .L0 
     /tmp/cci4wTfs.s:67     .text:000000000000003c .L0 
     /tmp/cci4wTfs.s:68     .text:000000000000003c .L0 
     /tmp/cci4wTfs.s:70     .text:0000000000000040 .L0 
     /tmp/cci4wTfs.s:73     .text:0000000000000040 .L0 
     /tmp/cci4wTfs.s:74     .text:0000000000000040 .L0 
     /tmp/cci4wTfs.s:78     .text:0000000000000044 .L0 
     /tmp/cci4wTfs.s:79     .text:0000000000000044 .L0 
     /tmp/cci4wTfs.s:80     .text:0000000000000044 .L0 
     /tmp/cci4wTfs.s:82     .text:0000000000000048 .L0 
     /tmp/cci4wTfs.s:84     .text:000000000000004c .L0 
     /tmp/cci4wTfs.s:85     .text:000000000000004c .L0 
     /tmp/cci4wTfs.s:88     .text:0000000000000050 .L0 
     /tmp/cci4wTfs.s:89     .text:0000000000000050 .L0 
     /tmp/cci4wTfs.s:93     .text:0000000000000054 .L0 
     src/syscall_c.c:78     .text:0000000000000054 .L0 
     src/syscall_c.c:79     .text:0000000000000064 .L0 
     /tmp/cci4wTfs.s:104    .text:0000000000000068 .L0 
     /tmp/cci4wTfs.s:105    .text:0000000000000068 .L0 
     /tmp/cci4wTfs.s:106    .text:0000000000000068 .L0 
     /tmp/cci4wTfs.s:108    .text:0000000000000068 .L0 
     /tmp/cci4wTfs.s:113    .text:0000000000000074 .L0 
     /tmp/cci4wTfs.s:117    .text:0000000000000080 .L0 
     /tmp/cci4wTfs.s:118    .text:0000000000000080 .L0 
     /tmp/cci4wTfs.s:120    .text:0000000000000088 .L0 
     /tmp/cci4wTfs.s:122    .text:000000000000008c .L0 
     /tmp/cci4wTfs.s:123    .text:000000000000008c .L0 
     /tmp/cci4wTfs.s:125    .text:0000000000000090 .L0 
     /tmp/cci4wTfs.s:127    .text:0000000000000094 .L0 
     /tmp/cci4wTfs.s:133    .text:0000000000000094 .L0 
GAS LISTING /tmp/cci4wTfs.s 			page 7


                     .debug_frame:0000000000000000 .L0 
     /tmp/cci4wTfs.s:41     .text:0000000000000020 .L2
     /tmp/cci4wTfs.s:27     .text:0000000000000010 .L3
     /tmp/cci4wTfs.s:90     .text:0000000000000054 .L6
     /tmp/cci4wTfs.s:76     .text:0000000000000044 .L7
     /tmp/cci4wTfs.s:353    .debug_abbrev:0000000000000000 .Ldebug_abbrev0
     /tmp/cci4wTfs.s:754    .debug_str:0000000000000161 .LASF22
     /tmp/cci4wTfs.s:718    .debug_str:000000000000004f .LASF23
     /tmp/cci4wTfs.s:726    .debug_str:000000000000008b .LASF24
     /tmp/cci4wTfs.s:5      .text:0000000000000000 .Ltext0
     /tmp/cci4wTfs.s:130    .text:0000000000000094 .Letext0
     /tmp/cci4wTfs.s:704    .debug_line:0000000000000000 .Ldebug_line0
     /tmp/cci4wTfs.s:708    .debug_str:000000000000000e .LASF0
     /tmp/cci4wTfs.s:744    .debug_str:0000000000000115 .LASF1
     /tmp/cci4wTfs.s:732    .debug_str:00000000000000ba .LASF2
     /tmp/cci4wTfs.s:724    .debug_str:0000000000000084 .LASF4
     /tmp/cci4wTfs.s:720    .debug_str:000000000000005f .LASF3
     /tmp/cci4wTfs.s:714    .debug_str:0000000000000038 .LASF5
     /tmp/cci4wTfs.s:722    .debug_str:0000000000000071 .LASF6
     /tmp/cci4wTfs.s:742    .debug_str:0000000000000102 .LASF7
     /tmp/cci4wTfs.s:750    .debug_str:0000000000000147 .LASF8
     /tmp/cci4wTfs.s:710    .debug_str:000000000000001b .LASF9
     /tmp/cci4wTfs.s:712    .debug_str:0000000000000029 .LASF10
     /tmp/cci4wTfs.s:748    .debug_str:0000000000000138 .LASF11
     /tmp/cci4wTfs.s:716    .debug_str:000000000000003f .LASF12
     /tmp/cci4wTfs.s:746    .debug_str:0000000000000128 .LASF13
     /tmp/cci4wTfs.s:730    .debug_str:00000000000000ae .LASF14
     /tmp/cci4wTfs.s:738    .debug_str:00000000000000e5 .LASF15
     /tmp/cci4wTfs.s:736    .debug_str:00000000000000cf .LASF16
     /tmp/cci4wTfs.s:756    .debug_str:00000000000001ff .LASF19
     /tmp/cci4wTfs.s:59     .text:0000000000000030 .LFB1
     /tmp/cci4wTfs.s:128    .text:0000000000000094 .LFE1
     /tmp/cci4wTfs.s:728    .debug_str:00000000000000a9 .LASF21
     /tmp/cci4wTfs.s:626    .debug_loc:0000000000000000 .LLST2
     /tmp/cci4wTfs.s:734    .debug_str:00000000000000c8 .LASF17
     /tmp/cci4wTfs.s:640    .debug_loc:0000000000000039 .LLST3
     /tmp/cci4wTfs.s:652    .debug_loc:0000000000000070 .LLST4
     /tmp/cci4wTfs.s:111    .text:0000000000000074 .LVL12
     /tmp/cci4wTfs.s:115    .text:0000000000000080 .LVL13
     /tmp/cci4wTfs.s:706    .debug_str:0000000000000000 .LASF18
     /tmp/cci4wTfs.s:752    .debug_str:0000000000000157 .LASF20
     /tmp/cci4wTfs.s:11     .text:0000000000000000 .LFB0
     /tmp/cci4wTfs.s:53     .text:0000000000000030 .LFE0
     /tmp/cci4wTfs.s:665    .debug_loc:00000000000000a8 .LLST0
     /tmp/cci4wTfs.s:679    .debug_loc:00000000000000e1 .LLST1
     /tmp/cci4wTfs.s:740    .debug_str:00000000000000fb .LASF25
     /tmp/cci4wTfs.s:62     .text:0000000000000030 .LVL5
     /tmp/cci4wTfs.s:109    .text:000000000000006c .LVL11
     /tmp/cci4wTfs.s:72     .text:0000000000000040 .LVL6
     /tmp/cci4wTfs.s:75     .text:0000000000000044 .LVL7
     /tmp/cci4wTfs.s:102    .text:0000000000000068 .LVL10
     /tmp/cci4wTfs.s:92     .text:0000000000000054 .LVL9
     /tmp/cci4wTfs.s:15     .text:0000000000000000 .LVL0
     /tmp/cci4wTfs.s:45     .text:0000000000000024 .LVL4
     /tmp/cci4wTfs.s:23     .text:000000000000000c .LVL1
     /tmp/cci4wTfs.s:26     .text:0000000000000010 .LVL2
     /tmp/cci4wTfs.s:134    .debug_info:0000000000000000 .Ldebug_info0
GAS LISTING /tmp/cci4wTfs.s 			page 8



UNDEFINED SYMBOLS
__putc
